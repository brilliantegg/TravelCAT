<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>EntityFramework</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute">
      <summary>表示為屬性 (Property) 添加的屬性 (Attribute)，可指出屬性 (property) 所對應的資料庫資料行具有索引。</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor">
      <summary>為依照慣例命名，但未指定資料行順序、叢集或唯一性的索引，初始化新的 <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> 執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor(System.String)">
      <summary>為具有指定名稱，但未指定資料行順序、叢集或唯一性的索引，初始化新的 <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> 執行個體。</summary>
      <param name="name">索引名稱。</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor(System.String,System.Int32)">
      <summary>為具有指定名稱及資料行順序，但未指定叢集或唯一性的索引，初始化新的 <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> 執行個體。</summary>
      <param name="name">索引名稱。</param>
      <param name="order">要用來判斷多資料行索引之資料行順序的數字。</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Equals(System.ComponentModel.DataAnnotations.Schema.IndexAttribute)">
      <summary>判斷此屬性指定的名稱與組態，與給定的屬性所指定者相同。</summary>
      <returns>若其他物件等於此物件，則為 true，否則為 false。</returns>
      <param name="other">要比較的屬性。</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Equals(System.Object)">
      <summary>判斷此屬性指定的名稱與組態，與給定的屬性所指定者相同。</summary>
      <returns>若其他物件等於此物件，則為 true，否則為 false。</returns>
      <param name="obj">要比較的屬性。</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>此執行個體的雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered">
      <summary>取得或設定值，以指出此索引是否要定義叢集索引。</summary>
      <returns>若此索引要定義叢集索引，則為 true；若此索引要定義非叢集索引，則為 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClusteredConfigured">
      <summary>取得或設定 <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered" /> 是否已設定值。</summary>
      <returns>若 <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered" /> 已設定值，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique">
      <summary>取得或設定值，以指出是否要定義唯一的索引。</summary>
      <returns>若要定義唯一的索引，則為 true；若要定義非唯一索引，則為 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUniqueConfigured">
      <summary>取得或設定 <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique" /> 是否已設定值。</summary>
      <returns>若 <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique" /> 已設定值，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Name">
      <summary>取得或設定索引名稱。</summary>
      <returns>索引名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Order">
      <summary>取得或設定用以判斷多資料行索引之資料行順序的數字。如果尚未指定資料行順序，此值會是 -1。</summary>
      <returns>判斷多資料行索引之資料行順序的數字；若未指定資料行順序，即為 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.ToString">
      <summary>傳回此執行個體的字串表示。</summary>
      <returns>此執行個體的字串表示。</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.TypeId">
      <summary>為每個物件執行個體取得或設定不同的 ID，如此類型描述元就不會嘗試將所有 IndexAttribute 執行個體合併為單一執行個體。</summary>
      <returns>每個物件執行個體使用不同的 ID。</returns>
    </member>
    <member name="T:System.Data.Entity.CreateDatabaseIfNotExists`1">
      <summary>IDatabaseInitializer 的實作，只會在資料庫不存在時重新建立資料庫，並選擇性地重新植入資料庫。若要植入資料庫，請建立衍生類別並覆寫 Seed 方法。</summary>
      <typeparam name="TContext"> 內容的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.InitializeDatabase(`0)">
      <summary>     執行為給定內容初始化資料庫的策略。</summary>
      <param name="context"> 內容。</param>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.Seed(`0)">
      <summary>應該覆寫的方法，以便實際將資料加入內容中進行植入。預設實作不做任何動作。</summary>
      <param name="context"> 要植入的內容。 </param>
    </member>
    <member name="T:System.Data.Entity.Database">
      <summary>此類別的執行個體是從 <see cref="T:System.Data.Entity.DbContext" /> 物件取得，可用來管理支援 DbContext 或連接的實際資料庫。其中包括建立和刪除資料庫及檢查資料庫是否存在。請注意，只要使用此類別的靜態方法，透過連接 (亦即不需要完整內容) 就可以執行資料庫的刪除及檢查其是否存在。</summary>
    </member>
    <member name="M:System.Data.Entity.Database.BeginTransaction">
      <summary>在基礎存放區連接上開始交易</summary>
      <returns>包裝對基礎存放區交易物件之存取的 <see cref="T:System.Data.Entity.DbContextTransaction" /> 物件</returns>
    </member>
    <member name="M:System.Data.Entity.Database.BeginTransaction(System.Data.IsolationLevel)">
      <summary>在基礎存放區連接上使用指定的隔離等級開始交易</summary>
      <returns>包裝對基礎存放區交易物件之存取的 <see cref="T:System.Data.Entity.DbContextTransaction" /> 物件</returns>
      <param name="isolationLevel">要建立基礎存放區交易的資料庫隔離等級</param>
    </member>
    <member name="P:System.Data.Entity.Database.CommandTimeout">
      <summary>取得或設定所有內容作業的逾時值 (以秒為單位)。預設值為 null，而 null 表示將會使用基礎提供者的預設值。</summary>
      <returns>以秒為單位的逾時，如為 null 則使用提供者的預設值。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)">
      <summary>檢查資料庫是否與目前的 Code First 模型相容。</summary>
      <returns>如果內容與資料庫中的模型雜湊相符，則為 true，否則為 false。</returns>
      <param name="throwIfNoMetadata">如果設定為 true，一旦資料庫中找不到模型中繼資料，便會擲回例外狀況。如果設定為 false，則在找不到中繼資料時，此方法會傳回 true。</param>
    </member>
    <member name="P:System.Data.Entity.Database.Connection">
      <summary>傳回此內容正在使用的連接。如果連接尚不存在，這可能會導致建立連接。</summary>
    </member>
    <member name="M:System.Data.Entity.Database.Create">
      <summary>在資料庫伺服器上針對支援內容中所定義的模型建立新的資料庫。請注意，在執行資料庫初始化策略之前呼叫此方法將會停用該策略的執行。</summary>
    </member>
    <member name="M:System.Data.Entity.Database.CreateIfNotExists">
      <summary>在資料庫伺服器上針對支援內容中所定義的模型建立新的資料庫，但前提是伺服器上尚未有同名的資料庫存在。</summary>
      <returns>如果資料庫尚未存在但是已建立則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Database.CurrentTransaction">
      <summary>取得基礎存放區連接登記所在的交易。可能是空白值。</summary>
    </member>
    <member name="P:System.Data.Entity.Database.DefaultConnectionFactory">
      <summary>單僅從資料庫名稱或連接字串建立 <see cref="T:System.Data.Common.DbConnection" /> 時所要使用的連接工廠。</summary>
    </member>
    <member name="M:System.Data.Entity.Database.Delete">
      <summary>如果資料庫伺服器上有資料庫則將它刪除，否則不執行任何動作。從初始設定式外部呼叫此方法會將資料庫標示為尚未初始化。這表示一旦資料庫已刪除後，若又試圖再次使用該資料庫，則將再次執行任何初始設定式的設定，而且通常會自動嘗試再次建立資料庫。</summary>
      <returns>如果資料庫存在但是已刪除則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.Data.Common.DbConnection)">
      <summary>如果資料庫伺服器上有資料庫則將它刪除，否則不執行任何動作。</summary>
      <returns>如果資料庫存在但是已刪除則為 true，否則為 false。</returns>
      <param name="existingConnection">與資料庫的現有連接。</param>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.String)">
      <summary>如果資料庫伺服器上有資料庫則將它刪除，否則不執行任何動作。與資料庫的連接是使用給定的資料庫名稱或連接字串所建立，如同 <see cref="T:System.Data.Entity.DbContext" /> 類別的文件中所述。</summary>
      <returns>如果資料庫存在但是已刪除則為 true，否則為 false。</returns>
      <param name="nameOrConnectionString">與資料庫連接的資料庫名稱或連接字串。</param>
    </member>
    <member name="M:System.Data.Entity.Database.Equals(System.Object)">
      <summary>判斷指定的資料庫是否等於目前的資料庫。</summary>
      <returns>當指定的資料庫等於目前的資料庫時為 true，否則即為 false。</returns>
      <param name="obj">要與目前物件比較的資料庫。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>針對資料庫執行給定的 DDL/DML 命令。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor)。或者，您也可以建構 DbParameter 再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>執行此命令之後由資料庫傳回的結果。</returns>
      <param name="transactionalBehavior">控制此命令的交易建立作業。</param>
      <param name="sql">命令字串。</param>
      <param name="parameters">要套用至命令字串的參數。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.String,System.Object[])">
      <summary>針對資料庫執行給定的 DDL/DML 命令。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor)。或者，您也可以建構 DbParameter 再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>執行此命令之後由資料庫傳回的結果。</returns>
      <param name="sql">命令字串。</param>
      <param name="parameters">要套用至命令字串的參數。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>針對資料庫以非同步方式執行給定的 DDL/DML 命令。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor)。或者，您也可以建構 DbParameter 再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示非同步作業的工作。工作結果包含執行此命令之後由資料庫傳回的結果。</returns>
      <param name="transactionalBehavior">控制此命令的交易建立作業。</param>
      <param name="sql">命令字串。</param>
      <param name="parameters">要套用至命令字串的參數。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>針對資料庫以非同步方式執行給定的 DDL/DML 命令。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor)。或者，您也可以建構 DbParameter 再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示非同步作業的工作。工作結果包含執行此命令之後由資料庫傳回的結果。</returns>
      <param name="transactionalBehavior">控制此命令的交易建立作業。</param>
      <param name="sql">命令字串。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">要套用至命令字串的參數。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.String,System.Object[])">
      <summary>針對資料庫以非同步方式執行給定的 DDL/DML 命令。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor)。或者，您也可以建構 DbParameter 再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示非同步作業的工作。工作結果包含執行此命令之後由資料庫傳回的結果。</returns>
      <param name="sql">命令字串。</param>
      <param name="parameters">要套用至命令字串的參數。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>針對資料庫以非同步方式執行給定的 DDL/DML 命令。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor)。或者，您也可以建構 DbParameter 再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示非同步作業的工作。工作結果包含執行此命令之後由資料庫傳回的結果。</returns>
      <param name="sql">命令字串。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">要套用至命令字串的參數。</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists">
      <summary>檢查資料庫是否存在伺服器上。</summary>
      <returns>如果資料庫存在則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.Data.Common.DbConnection)">
      <summary>檢查資料庫是否存在伺服器上。</summary>
      <returns>如果資料庫存在則為 true，否則為 false。</returns>
      <param name="existingConnection">與資料庫的現有連接。</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.String)">
      <summary>檢查資料庫是否存在伺服器上。與資料庫的連接是使用給定的資料庫名稱或連接字串所建立，如同 <see cref="T:System.Data.Entity.DbContext" /> 類別的文件中所述。</summary>
      <returns>如果資料庫存在則為 true，否則為 false。</returns>
      <param name="nameOrConnectionString">與資料庫連接的資料庫名稱或連接字串。</param>
    </member>
    <member name="M:System.Data.Entity.Database.GetHashCode">
      <summary>傳回此資料庫的雜湊函數。</summary>
      <returns>此資料庫的雜湊函數。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Initialize(System.Boolean)">
      <summary>在此內容上執行登錄的 <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />。如果 "force" 設定為 true，則會執行初始設定式，不論其之前是否已執行。如果在應用程式執行時刪除資料庫而且需要重新初始化，這樣的處理方式會很實用。如果 "force" 設定為 false，則只有當此內容、模型及此應用程式定義域中的連接尚未執行初始設定式時，才會予以執行。需要確定資料庫已經建立並植入之後再開始某項作業時 (例如，當作業為交易的一部分而應暫緩以免造成問題)，通常會使用此方法。</summary>
      <param name="force">如果設定為 true，則會執行初始設定式，即使它已經執行亦然。</param>
    </member>
    <member name="P:System.Data.Entity.Database.Log">
      <summary>設定此屬性，將 <see cref="T:System.Data.Entity.DbContext" /> 產生的 SQL 記錄至指定的委派。例如，要記錄至主控台，請將此屬性設為 <see cref="M:System.Console.Write(System.String)" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>設定要用於給定內容類型的資料庫初始設定式。初次使用給定的 <see cref="T:System.Data.Entity.DbContext" /> 類型存取資料庫時，便會呼叫資料庫初始設定式。Code First 內容的預設策略是 <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" /> 的執行個體。</summary>
      <param name="strategy">要使用的初始設定式，如為 null 則會停用給定內容類型的初始化。</param>
      <typeparam name="TContext">內容的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])">
      <summary>建立原始 SQL 查詢，此查詢將會傳回給定泛型類型的項目。此類型可以是擁有屬性的任何類型 (這些屬性符合從查詢傳回的資料行名稱) 或者可以是簡單基本類型。此類型不必是實體類型。此內容絕對不會追蹤此查詢的結果，即使傳回之物件的類型為實體類型亦然。使用 <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" /> 方法可傳回此內容所追蹤的實體。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.Database.SqlQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);。或者，您也可以建構 DbParameter，再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.Database.SqlQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>將在列舉時執行查詢的 <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1" /> 物件。</returns>
      <param name="sql">SQL 查詢字串。</param>
      <param name="parameters">要套用至 SQL 查詢字串的參數。如果使用了輸出參數，在完全讀取結果之前，這些參數的值將無法使用。這是由於 DbDataReader 的基礎行為所造成，請參閱 http://go.microsoft.com/fwlink/?LinkID=398589 以取得詳細資料。</param>
      <typeparam name="TElement">查詢傳回之物件的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])">
      <summary>建立原始 SQL 查詢，此查詢將會傳回給定類型的項目。此類型可以是擁有屬性的任何類型 (這些屬性符合從查詢傳回的資料行名稱) 或者可以是簡單基本類型。此類型不必是實體類型。此內容絕對不會追蹤此查詢的結果，即使傳回之物件的類型為實體類型亦然。使用 <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" /> 方法可傳回此內容所追蹤的實體。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.Database.SqlQuery(typeof(Post), "SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor)。或者，您也可以建構 DbParameter 再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.Database.SqlQuery(typeof(Post), "SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>將在列舉時執行查詢的 <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" /> 物件。</returns>
      <param name="elementType">查詢傳回之物件的類型。</param>
      <param name="sql">SQL 查詢字串。</param>
      <param name="parameters">要套用至 SQL 查詢字串的參數。如果使用了輸出參數，在完全讀取結果之前，這些參數的值將無法使用。這是由於 DbDataReader 的基礎行為所造成，請參閱 http://go.microsoft.com/fwlink/?LinkID=398589 以取得詳細資料。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ToString">
      <summary>傳回資料庫的字串表示法。</summary>
      <returns>資料庫的字串表示法。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.UseTransaction(System.Data.Common.DbTransaction)">
      <summary>讓使用者能夠傳入由 <see cref="T:System.Data.Entity.Database" /> 物件外建立的資料庫交易，以促使 Entity Framework 從該外部交易內執行命令。或者，傳入 null 可清除本架構對該項交易的認知。</summary>
      <param name="transaction">外部交易</param>
      <exception cref="T:System.InvalidOperationException">在交易已完成時擲回</exception>
      <exception cref="T:System.InvalidOperationException">如果與 <see cref="T:System.Data.Entity.Database" /> 物件相關聯的連接已經登記在 <see cref="T:System.Transactions.TransactionScope" /> 交易中，則擲回</exception>
      <exception cref="T:System.InvalidOperationException">如果與 <see cref="T:System.Data.Entity.Database" /> 物件相關聯的連接已經參與交易，則擲回</exception>
      <exception cref="T:System.InvalidOperationException">在該項交易其相關聯的連接與 Entity Framework 的連接不符時擲回</exception>
    </member>
    <member name="T:System.Data.Entity.DbConfiguration">
      <summary>此類別的衍生類別可與衍生自 <see cref="T:System.Data.Entity.DbContext" /> 的類別放入相同的組件中，用於定義應用程式的 Entity Framework 組態。組態設定方式是在衍生類型的建構函式中呼叫此類別受保護的方法並設定其受保護的屬性。所要使用的類型也可以登錄於應用程式的組態檔。如需 Entity Framework 組態的詳細資訊，請參閱 http://go.microsoft.com/fwlink/?LinkId=260883。</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.DbConfiguration" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddDefaultResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>將 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 執行個體加入至解析程式的責任鏈結，以解析 Entity Framework 所需的相依性。</summary>
      <param name="resolver">要加入的解析程式。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>將 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 執行個體加入至解析程式的責任鏈結，以解析 Entity Framework 所需的相依性。</summary>
      <param name="resolver">要加入的解析程式。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddInterceptor(System.Data.Entity.Infrastructure.Interception.IDbInterceptor)">
      <summary>在應用程式啟動時註冊 <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor" />。請注意，也可以隨時使用 <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> 來新增和移除攔截器。</summary>
      <param name="interceptor">要註冊的攔截器。</param>
    </member>
    <member name="P:System.Data.Entity.DbConfiguration.DependencyResolver">
      <summary>取得用於解析 Entity Framework 服務相依性的 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />。</summary>
      <returns>用於解析 Entity Framework 服務相依性的 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />。</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.Equals(System.Object)">
      <summary>指定此執行個體是否等於特定物件。</summary>
      <returns>如果這個執行個體與特定物件相等為 true，否則即為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.GetHashCode">
      <summary>取得與此執行個體相關聯的雜湊碼。</summary>
      <returns>與此執行個體相關聯的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Reflection.Assembly)">
      <summary>嘗試從指定的組件探索及載入 <see cref="T:System.Data.Entity.DbConfiguration" />。此方法是要由工具所使用，以確保正確的組態會載入應用程式定義域。在存取 <see cref="P:System.Data.Entity.DbConfiguration.DependencyResolver" /> 屬性之前，工具應該使用此方法。如果工具知道所使用的 <see cref="T:System.Data.Entity.DbContext" /> 類型，則應該使用 <see cref="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Type)" /> 方法，因為這樣會提高找到正確組態的機會。</summary>
      <param name="assemblyHint">要用於探索組態的 <see cref="T:System.Reflection.Assembly" />。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Type)">
      <summary>嘗試探索及載入與給定 <see cref="T:System.Data.Entity.DbContext" /> 相關聯的 <see cref="T:System.Data.Entity.DbConfiguration" />。此方法是要由工具所使用，以確保正確的組態會載入應用程式定義域。在存取 <see cref="P:System.Data.Entity.DbConfiguration.DependencyResolver" /> 屬性之前，工具應該使用此方法。</summary>
      <param name="contextType">要用於探索組態的 <see cref="T:System.Data.Entity.DbContext" /> 類型。</param>
    </member>
    <member name="E:System.Data.Entity.DbConfiguration.Loaded">
      <summary>於 EF 初始化期間，在 DbConfiguration 已建構之後而仍待鎖定以供使用之前發生。</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.MemberwiseClone">
      <summary>建立目前 <see cref="T:System.Object" /> 的淺層複本 (Shallow Copy)。</summary>
      <returns>目前 <see cref="T:System.Object" /> 的淺層複本。</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetConfiguration(System.Data.Entity.DbConfiguration)">
      <summary>此應用程式定義域之 <see cref="T:System.Data.Entity.DbConfiguration" /> 的單一執行個體。這可在應用程式啟動而仍未使用任何 Entity Framework 功能之前設定，隨後即應一律當成唯讀項目看待。</summary>
      <param name="configuration">
        <see cref="T:System.Data.Entity.DbConfiguration" /> 的執行個體。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetContextFactory``1(System.Func{``0})">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法可設定 Factory 允許 <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> 建立沒有公用且無參數之建構函式的內容執行個體。</summary>
      <param name="factory">用來建立內容執行個體的委派。</param>
      <typeparam name="TContext">應該使用此 Factory 的內容類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetContextFactory(System.Type,System.Func{System.Data.Entity.DbContext})">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法可設定 Factory 允許 <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> 建立沒有公用且無參數之建構函式的內容執行個體。</summary>
      <param name="contextType">應該使用此 Factory 的內容類型。</param>
      <param name="factory">用來建立內容執行個體的委派。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDatabaseInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法，以設定要用於給定內容類型的資料庫初始設定式。初次使用給定的 <see cref="T:System.Data.Entity.DbContext" /> 類型存取資料庫時，便會呼叫資料庫初始設定式。Code First 內容的預設策略是 <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" /> 的執行個體。</summary>
      <param name="initializer">要使用的初始設定式，如為 null 則會停用給定內容類型的初始化。</param>
      <typeparam name="TContext">內容的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDatabaseLogFormatter(System.Func{System.Data.Entity.DbContext,System.Action{System.String},System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter})">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法可針對 <see cref="T:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter" /> 的類型將 Factory 設定為搭配 <see cref="P:System.Data.Entity.Database.Log" /> 一起使用。</summary>
      <param name="logFormatterFactory">將建立格式子執行個體的委派。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultConnectionFactory(System.Data.Entity.Infrastructure.IDbConnectionFactory)">
      <summary>當 <see cref="T:System.Data.Entity.DbContext" /> 未獲提供或找不到其他連接字串或連接時，設定用於依照慣例建立連接的 <see cref="T:System.Data.Entity.Infrastructure.IDbConnectionFactory" />。請注意，只要安裝了 EntityFramework NuGet 封裝，就會在 app.config 或 web.config 檔案中設定預設連接工廠。如同所有的組態檔設定，組態檔中的預設連接工廠設定會優先於以此方法進行的任何設定。因此，您必須先從組態檔移除該項設定，呼叫此方法才會發生效用。從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法，以變更所使用的預設連接工廠。</summary>
      <param name="connectionFactory">連接工廠。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultHistoryContext(System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法，以設定將用於針對任何 <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" /> 建立預設 <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> 的 <see cref="T:System.Func`3" /> 委派。如果未在 <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" /> 中明確設定任何 Factory 而且並未使用 <see cref="M:System.Data.Entity.DbConfiguration.SetHistoryContext(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" /> 方法針對使用中的提供者註冊任何 Factory，則只會使用此預設 Factory。</summary>
      <param name="factory">用以針對給定的 <see cref="T:System.Data.Common.DbConnection" /> 建立 <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> 執行個體的 Factory，其中 <see cref="T:System.String" /> 表示預設結構描述。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultSpatialServices(System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法可設定 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 的全域執行個體，每當需要空間提供者而且找不到提供者特定的空間提供者時，將會使用此執行個體。通常，提供者特定的空間提供者是取自 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> 實作，接著藉由為 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 解析服務 (傳遞提供者非變異名稱當做索引鍵) 加以傳回。不過，這對於 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 和 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 獨立執行個體無效，因為不可能知道要使用的空間提供者。因此，在建立 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 和 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 的獨立執行個體時，永遠都會使用全域空間提供者。</summary>
      <param name="spatialProvider">空間提供者。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法可註冊 <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" />。</summary>
      <param name="transactionHandlerFactory">會傳回交易處理常式之新執行個體的函式。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetExecutionStrategy(System.String,System.Func{System.Data.Entity.Infrastructure.IDbExecutionStrategy})">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法，以註冊要與給定的非變異名稱所表示的提供者搭配使用的 <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />。</summary>
      <param name="providerInvariantName">ADO.NET 提供者非變異名稱，表示使用此執行策略時所經 ADO.NET 連接的類型。</param>
      <param name="getExecutionStrategy">會傳回執行策略新執行個體的函式。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetExecutionStrategy(System.String,System.Func{System.Data.Entity.Infrastructure.IDbExecutionStrategy},System.String)">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法，以註冊要與給定的非變異名稱連同給定的伺服器名稱所表示的提供者搭配使用的 <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />。</summary>
      <param name="providerInvariantName">ADO.NET 提供者非變異名稱，表示使用此執行策略時所經 ADO.NET 連接的類型。</param>
      <param name="getExecutionStrategy">會傳回執行策略新執行個體的函式。</param>
      <param name="serverName">要與連接字串中的伺服器名稱進行比對的字串。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetHistoryContext(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法，以設定能夠針對任何未設定明確 Factory 的 <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" /> 建立自訂 <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> 的 <see cref="T:System.Func`3" /> 委派。</summary>
      <param name="providerInvariantName">此產生器應搭配使用的 ADO.NET 提供者的非變異名稱。</param>
      <param name="factory">用以針對給定的 <see cref="T:System.Data.Common.DbConnection" /> 建立 <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> 執行個體的 Factory，其中 <see cref="T:System.String" /> 表示預設結構描述。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetManifestTokenResolver(System.Data.Entity.Infrastructure.IManifestTokenResolver)">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法以設定 <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver" /> 的實作，讓您不一定要開啟連接就能夠從連接取得提供者資訊清單語彙基元。</summary>
      <param name="resolver">資訊清單語彙基元解析程式。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetMetadataAnnotationSerializer(System.String,System.Func{System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer})">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法可為 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 的實作設定 Factory，這樣可讓 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> 執行個體所表示的自訂註釋序列化成 EDMX XML 以及從 EDMX XML 序列化。</summary>
      <param name="annotationName">將由此序列化程式處理的自訂註釋名稱。</param>
      <param name="serializerFactory">將用來建立序列化程式執行個體的委派。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetMigrationSqlGenerator(System.String,System.Func{System.Data.Entity.Migrations.Sql.MigrationSqlGenerator})">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法，以註冊要與給定的非變異名稱所表示的提供者搭配使用的 <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" />。</summary>
      <param name="providerInvariantName">此產生器應搭配使用的 ADO.NET 提供者的非變異名稱。</param>
      <param name="sqlGenerator">每次呼叫都將傳回 SQL 產生器新執行個體的委派。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetModelCacheKey(System.Func{System.Data.Entity.DbContext,System.Data.Entity.Infrastructure.IDbModelCacheKey})">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法可將 <see cref="T:System.Func`2" /> 設定為模型快取索引鍵 Factory，這樣可讓用來快取 <see cref="T:System.Data.Entity.DbContext" /> 背後模型的索引鍵得以變更。</summary>
      <param name="keyFactory">索引鍵處理站。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetPluralizationService(System.Data.Entity.Infrastructure.Pluralization.IPluralizationService)">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法以設定複數表示服務。</summary>
      <param name="pluralizationService">要使用的複數表示服務。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderFactory(System.String,System.Data.Common.DbProviderFactory)">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法以登錄 ADO.NET 提供者。</summary>
      <param name="providerInvariantName">ADO.NET 提供者非變異名稱，表示使用此提供者時所經 ADO.NET 連接的類型。</param>
      <param name="providerFactory">提供者執行個體。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderFactoryResolver(System.Data.Entity.Infrastructure.IDbProviderFactoryResolver)">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法以設定 <see cref="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver" /> 的實作，讓您能夠在預設實作未臻完善的情況下從 <see cref="T:System.Data.Common.DbConnection" /> 取得 <see cref="T:System.Data.Common.DbProviderFactory" />。</summary>
      <param name="providerFactoryResolver">提供者處理站服務。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderServices(System.String,System.Data.Entity.Core.Common.DbProviderServices)">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法以登錄 Entity Framework 提供者。</summary>
      <param name="providerInvariantName">ADO.NET 提供者非變異名稱，表示使用此提供者時所經 ADO.NET 連接的類型。</param>
      <param name="provider">提供者執行個體。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo,System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法可設定 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 的實作，此實作會用於特定提供者和提供者資訊清單語彙基元。</summary>
      <param name="key">
        <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />，表示使用此空間提供者時所經 ADO.NET 連接的類型。</param>
      <param name="spatialProvider">空間提供者。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.String,System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法可設定 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 的實作，此實作會用於具有任何資訊清單語彙基元的特定提供者。</summary>
      <param name="providerInvariantName">ADO.NET 提供者非變異名稱，表示使用此空間提供者時所經 ADO.NET 連接的類型。</param>
      <param name="spatialProvider">空間提供者。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetTableExistenceChecker(System.String,System.Data.Entity.Infrastructure.TableExistenceChecker)">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫這個方法，以登錄給定提供者的資料庫資料表存在檢查程式。</summary>
      <param name="providerInvariantName">ADO.NET 提供者非變異名稱，表示使用此提供者時所經 ADO.NET 連接的類型。</param>
      <param name="tableExistenceChecker">要使用的資料表存在檢查程式。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler})">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法，以註冊要與給定的非變異名稱所表示的提供者搭配使用的 <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" />。</summary>
      <param name="providerInvariantName">ADO.NET 提供者非變異名稱，表示使用此交易處理常式時所經 ADO.NET 連接的類型。</param>
      <param name="transactionHandlerFactory">會傳回交易處理常式之新執行個體的函式。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String)">
      <summary>從衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 之類別的建構函式呼叫此方法，以註冊要與給定的非變異名稱連同給定的伺服器名稱所表示的提供者搭配使用的 <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" />。</summary>
      <param name="providerInvariantName">ADO.NET 提供者非變異名稱，表示使用此交易處理常式時所經 ADO.NET 連接的類型。</param>
      <param name="transactionHandlerFactory">會傳回交易處理常式之新執行個體的函式。</param>
      <param name="serverName">要與連接字串中的伺服器名稱進行比對的字串。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.ToString">
      <summary>傳回此執行個體的字串表示。</summary>
      <returns>此執行個體的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.DbConfigurationTypeAttribute">
      <summary>此屬性可置於 <see cref="T:System.Data.Entity.DbContext" /> 的子類別，用於表示 <see cref="T:System.Data.Entity.DbConfiguration" /> 的子類別 (其代表應用程式以程式碼為基礎的組態) 與內容類型位在不同的組件中。</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfigurationTypeAttribute.#ctor(System.String)">
      <summary>表示此應用程式應該使用由指定的組件限定名稱所表示的 <see cref="T:System.Data.Entity.DbConfiguration" /> 的子類別當做以程式碼為基礎的組態。</summary>
      <param name="configurationTypeName">要使用的 <see cref="T:System.Data.Entity.DbConfiguration" /> 類型。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfigurationTypeAttribute.#ctor(System.Type)">
      <summary>表示此應用程式應該使用 <see cref="T:System.Data.Entity.DbConfiguration" /> 的給定子類別當做以程式碼為基礎的組態。</summary>
      <param name="configurationType">要使用的 <see cref="T:System.Data.Entity.DbConfiguration" /> 類型。</param>
    </member>
    <member name="P:System.Data.Entity.DbConfigurationTypeAttribute.ConfigurationType">
      <summary>取得應用於此應用程式以程式碼為基礎的組態之 <see cref="T:System.Data.Entity.DbConfiguration" /> 的子類別。</summary>
      <returns>應用於此應用程式以程式碼為基礎的組態之 <see cref="T:System.Data.Entity.DbConfiguration" /> 的子類別。</returns>
    </member>
    <member name="T:System.Data.Entity.DbContext">
      <summary>一個 DbContext 執行個體，表示工作單位和儲存機制模式的組合，使其可用來從資料庫查詢並將變更群組在一起，然後這些變更會當做一個單位寫回存放區。DbContext 在概念上類似於 ObjectContext。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor">
      <summary>使用慣例建構新的內容執行個體，以建立將建立連接的資料庫名稱。根據慣例建立的名稱為衍生內容類別的完整名稱 (命名空間 + 類別名稱)。如需使用此方式建立連接的詳細資訊，請參閱類別註解。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
      <summary>使用現有的連接來連接資料庫，以建構新的內容執行個體。如果 <paramref name="contextOwnsConnection" /> 為 false，當處置此內容時，將不會處置此連接。</summary>
      <param name="existingConnection">要用於新內容的現有連接。</param>
      <param name="contextOwnsConnection">如果設定為 true，則處置內容時也會處置此連接，否則呼叫端必須處置此連接。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
      <summary>使用現有的連接連接資料庫來建構新的內容執行個體，並從給定的模型將它初始化。如果 <paramref name="contextOwnsConnection" /> 為 false，當處置此內容時，將不會處置此連接。</summary>
      <param name="existingConnection">要用於新內容的現有連接。</param>
      <param name="model">將會支援此內容的模型。</param>
      <param name="contextOwnsConnection">如果設定為 true，則處置內容時也會處置此連接，否則呼叫端必須處置此連接。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Core.Objects.ObjectContext,System.Boolean)">
      <summary>根據現有的 ObjectContext 建構新的內容執行個體。</summary>
      <param name="objectContext">要使用新內容包裝的現有 ObjectContext。</param>
      <param name="dbContextOwnsObjectContext">如果設定為 true，則處置 DbContext 時也會處置 ObjectContext，否則呼叫端必須處置此連接。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>使用慣例建構新的內容執行個體，以建立將建立連接的資料庫名稱，並從給定的模型將它初始化。根據慣例建立的名稱為衍生內容類別的完整名稱 (命名空間 + 類別名稱)。如需使用此方式建立連接的詳細資訊，請參閱類別註解。</summary>
      <param name="model">將會支援此內容的模型。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String)">
      <summary>使用給定字串當做資料庫的名稱或連接字串來建構新的內容執行個體 (這是將會建立連接的資料庫)。如需使用此方式建立連接的詳細資訊，請參閱類別註解。</summary>
      <param name="nameOrConnectionString">資料庫名稱或連接字串。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>使用給定字串當做資料庫的名稱或連接字串來建構新的內容執行個體 (這是將會建立連接的資料庫)，並從給定的模型將它初始化。如需使用此方式建立連接的詳細資訊，請參閱類別註解。</summary>
      <param name="nameOrConnectionString">資料庫名稱或連接字串。</param>
      <param name="model">將會支援此內容的模型。</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.ChangeTracker">
      <summary>針對處理實體變更追蹤的內容功能提供存取權。</summary>
      <returns>用來存取功能的物件 (這些功能會處理變更追蹤)。</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Configuration">
      <summary>為內容的組態選項提供存取權。</summary>
      <returns>用來存取組態選項的物件。</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Database">
      <summary>為此內容建立 Database 執行個體，允許針對基礎資料庫執行建立、刪除或存在檢查。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose">
      <summary>呼叫受保護的 Dispose 方法。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose(System.Boolean)">
      <summary>處置內容。如果基礎 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 是由此內容所建立，或者當建立此內容時將擁有權傳給此內容，則也會處置它。如果資料庫的連接 (<see cref="T:System.Data.Common.DbConnection" /> 物件) 是由此內容所建立，或者當建立此內容時將擁有權傳給此內容，則也會處置此連接。</summary>
      <param name="disposing">true 表示會同時釋放 Managed 和 Unmanaged 資源，false 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry(System.Object)">
      <summary>取得給定實體的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 物件，以便提供有關此實體之資訊的存取權以及針對此實體執行動作的能力。</summary>
      <returns>實體的項目。</returns>
      <param name="entity">實體。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry``1(``0)">
      <summary>取得給定實體的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 物件，以便提供有關此實體之資訊的存取權以及針對此實體執行動作的能力。</summary>
      <returns>實體的項目。</returns>
      <param name="entity">實體。</param>
      <typeparam name="TEntity">實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Equals(System.Object)">
      <summary>判斷指定的 DbContext 是否等於目前的 DbContext。</summary>
      <returns>如果指定的 DbContext 等於目前的 DbContext，則為 true，否則為 false。</returns>
      <param name="obj">要與目前 DbContext 比較的 DbContext。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetHashCode">
      <summary>傳回此 DBContext 的雜湊函數。</summary>
      <returns>此 DbContext 的雜湊函數。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetType">
      <summary>傳回目前 DbContext 的類型。</summary>
      <returns>目前 DbContext 的類型。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetValidationErrors">
      <summary>驗證追蹤的實體，並傳回包含驗證結果的 <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" /> 集合。</summary>
      <returns>無效實體的驗證結果集合。此集合絕對不會是 null 而且不得包含 null 值或是有效實體的結果。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>此方法的呼叫時機是在初始化衍生內容的模型時，但在鎖定此模型及使用此模型初始化內容之前。此方法的預設實作不會做任何事，但是可以在衍生類別中覆寫它，以便可以進一步設定此模型然後再將它鎖定。</summary>
      <param name="modelBuilder">針對建立的內容定義模型的產生器。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChanges">
      <summary>將此內容中所做的所有變更儲存到基礎資料庫。</summary>
      <returns>寫入基礎資料庫的物件數目。</returns>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">傳送更新至資料庫時發生錯誤。</exception>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">資料庫命令未影響預期的列數。這通常表示開放式並行存取違規，亦即，在查詢資料庫中的某列後，該列已變更。</exception>
      <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">因為驗證實體屬性值失敗，儲存已中止。</exception>
      <exception cref="T:System.NotSupportedException">已嘗試使用不受支援的行為，例如在相同的內容執行個體上同時執行多個非同步命令。</exception>
      <exception cref="T:System.ObjectDisposedException">內容或連接已被處置。</exception>
      <exception cref="T:System.InvalidOperationException">在傳送命令至資料庫之前或之後，嘗試在內容中處理實體時發生錯誤。</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChangesAsync">
      <summary>將此內容中所做的所有變更非同步儲存到基礎資料庫。</summary>
      <returns>表示非同步儲存作業的工作。工作結果包含寫入基礎資料庫的物件數目。</returns>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">傳送更新至資料庫時發生錯誤。</exception>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">資料庫命令未影響預期的列數。這通常表示開放式並行存取違規，亦即，在查詢資料庫中的某列後，該列已變更。</exception>
      <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">因為驗證實體屬性值失敗，儲存已中止。</exception>
      <exception cref="T:System.NotSupportedException">已嘗試使用不受支援的行為，例如在相同的內容執行個體上同時執行多個非同步命令。</exception>
      <exception cref="T:System.ObjectDisposedException">內容或連接已被處置。</exception>
      <exception cref="T:System.InvalidOperationException">在傳送命令至資料庫之前或之後，嘗試在內容中處理實體時發生錯誤。</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChangesAsync(System.Threading.CancellationToken)">
      <summary>將此內容中所做的所有變更非同步儲存到基礎資料庫。</summary>
      <returns>表示非同步儲存作業的工作。工作結果包含寫入基礎資料庫的物件數目。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">當內容已經過處置時擲回。</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set``1">
      <summary>傳回 <see cref="T:System.Data.Entity.DbSet`1" /> 執行個體來存取內容中給定類型的實體和基礎存放區。</summary>
      <returns>給定實體類型的集合。</returns>
      <typeparam name="TEntity">應該傳回集合的類型實體。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set(System.Type)">
      <summary>傳回非泛型 <see cref="T:System.Data.Entity.DbSet" /> 執行個體來存取內容中給定類型的實體和基礎存放區。</summary>
      <returns>給定實體類型的集合。</returns>
      <param name="entityType">應該傳回集合的實體類型。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>可讓使用者覆寫只驗證 Added 和 Modified 實體之預設行為的擴充點。</summary>
      <returns>true 表示繼續驗證，否則為 false。</returns>
      <param name="entityEntry">應該要驗證的 DbEntityEntry 執行個體。</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>傳回在此內容底層的 Entity Framework ObjectContext。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.ToString">
      <summary>傳回 DbContext 的字串表示法。</summary>
      <returns>DbContext 的字串表示。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>可讓使用者自訂實體驗證或篩選出驗證結果的擴充點。由 <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" /> 呼叫。</summary>
      <returns>實體驗證結果。已覆寫時可能為 null。</returns>
      <param name="entityEntry">要驗證的 DbEntityEntry 執行個體。</param>
      <param name="items">包含自訂驗證之其他資訊的使用者定義字典。此字典將會傳遞給 <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> 而且會公開為 <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items" />。此參數是選擇性而且可以是 null。</param>
    </member>
    <member name="T:System.Data.Entity.DbContextTransaction">
      <summary>包裝基礎存放區連接的交易物件的存取，並確保 Entity Framework 會對該交易內容中的資料庫執行命令。經由呼叫 <see cref="T:System.Data.Entity.DbContext" /><see cref="T:System.Data.Entity.Database" /> 物件的 BeginTransaction() 可擷取此類別的執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Commit">
      <summary>認可基礎存放區交易。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Dispose">
      <summary>清除此交易物件並確保 Entity Framework 不再使用該交易。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Dispose(System.Boolean)">
      <summary>釋放此交易物件所使用的資源。</summary>
      <param name="disposing">true 表示同時釋放 Managed 和 Unmanaged 資源，false 表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Equals(System.Object)">
      <summary>判斷此執行個體是否等於指定的物件。</summary>
      <returns>若此執行個體等於指定的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.GetHashCode">
      <summary>傳回目前執行個體的雜湊碼。</summary>
      <returns>目前執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.GetType">
      <summary>取得與此執行個體相關聯的基礎類型。</summary>
      <returns>與此執行個體相關聯的基礎類型。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Rollback">
      <summary>回復基礎存放區交易。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.ToString">
      <summary>傳回此執行個體的字串表示。</summary>
      <returns>此執行個體的字串表示。</returns>
    </member>
    <member name="P:System.Data.Entity.DbContextTransaction.UnderlyingTransaction">
      <summary>取得此內容交易底層的資料庫 (存放區) 交易。</summary>
      <returns>此內容交易底層的資料庫 (存放區) 交易。</returns>
    </member>
    <member name="T:System.Data.Entity.DbFunctionAttribute">
      <summary>表示指定的方法是 EDM 函式的 Proxy。</summary>
    </member>
    <member name="M:System.Data.Entity.DbFunctionAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.DbFunctionAttribute" /> 類別的新執行個體。</summary>
      <param name="namespaceName">mapped-to 函式的命名空間。</param>
      <param name="functionName">mapped-to 函式的名稱。</param>
    </member>
    <member name="P:System.Data.Entity.DbFunctionAttribute.FunctionName">
      <summary>mapped-to 函式的名稱。</summary>
      <returns>mapped-to 函式的名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.DbFunctionAttribute.NamespaceName">
      <summary>mapped-to 函式的命名空間。</summary>
      <returns>mapped-to 函式的命名空間。</returns>
    </member>
    <member name="T:System.Data.Entity.DbFunctions">
      <summary>提供公開 (Expose) EDM 標準函式以用於 <see cref="T:System.Data.Entity.DbContext" /> 或 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> LINQ to Entities 查詢的 Common Language Runtime (CLR) 方法。</summary>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddDays 將指定的天數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="dateValue">輸入日期/時間。</param>
      <param name="addValue">要加入的天數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddDays 將指定的天數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="dateValue">輸入日期/時間。</param>
      <param name="addValue">要加入的天數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddHours 將指定的時數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的時數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddHours 將指定的時數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的時數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddHours 將指定的時數加入至時間範圍。</summary>
      <returns>產生的時間範圍。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的時數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMicroseconds 將指定的微秒數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的微秒數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMicroseconds 將指定的微秒數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的微秒數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMicroseconds 將指定的微秒數加入至時間範圍。</summary>
      <returns>產生的時間範圍。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的微秒數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMilliseconds 將指定的毫秒數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的毫秒數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMilliseconds 將指定的毫秒數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的毫秒數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMilliseconds 將指定的毫秒數加入至時間範圍。</summary>
      <returns>產生的時間範圍。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的毫秒數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMinutes 將指定的分鐘數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的分鐘數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMinutes 將指定的分鐘數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的分鐘數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMinutes 將指定的分鐘數加入至時間範圍。</summary>
      <returns>產生的時間範圍。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的分鐘數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMonths 將指定的月數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="dateValue">輸入日期/時間。</param>
      <param name="addValue">要加入的月數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMonths 將指定的月數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="dateValue">輸入日期/時間。</param>
      <param name="addValue">要加入的月數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddNanoseconds 將指定的奈秒數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的奈秒數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddNanoseconds 將指定的奈秒數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的奈秒數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddNanoseconds 將指定的奈秒數加入至時間範圍。</summary>
      <returns>產生的時間範圍。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的奈秒數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddSeconds 將指定的秒數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的秒數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddSeconds 將指定的秒數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的秒數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddSeconds 將指定的秒數加入至時間範圍。</summary>
      <returns>產生的時間範圍。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的秒數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddYears 將指定的年數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="dateValue">輸入日期/時間。</param>
      <param name="addValue">要加入的年數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddYears 將指定的年數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="dateValue">輸入日期/時間。</param>
      <param name="addValue">要加入的年數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AsNonUnicode(System.String)">
      <summary>用於 LINQ to Entities 查詢時，此方法會當做運算子，藉此確保將輸入視為非 Unicode 字串。</summary>
      <returns>視為非 Unicode 字串的輸入字串。</returns>
      <param name="value">輸入字串。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AsUnicode(System.String)">
      <summary>用於 LINQ to Entities 查詢時，此方法會當做運算子，藉此確保將輸入視為 Unicode 字串。</summary>
      <returns>視為 Unicode 字串的輸入字串。</returns>
      <param name="value">輸入字串。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 CreateDateTime 以建立新的 <see cref="T:System.DateTime" /> 物件。</summary>
      <returns>新的日期/時間。</returns>
      <param name="year">年。</param>
      <param name="month">月 (以 1 起始)。</param>
      <param name="day">日 (以 1 起始)。</param>
      <param name="hour">小時。</param>
      <param name="minute">分鐘。</param>
      <param name="second">秒鐘，必要時可包括秒值的小數部分。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 CreateDateTimeOffset 以建立新的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>新的日期/時間。</returns>
      <param name="year">年。</param>
      <param name="month">月 (以 1 起始)。</param>
      <param name="day">日 (以 1 起始)。</param>
      <param name="hour">小時。</param>
      <param name="minute">分鐘。</param>
      <param name="second">秒鐘，必要時可包括秒值的小數部分。</param>
      <param name="timeZoneOffset">新日期的時區位移部分。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 CreateTime 以建立新的 <see cref="T:System.TimeSpan" /> 物件。</summary>
      <returns>新的時間範圍。</returns>
      <param name="hour">小時。</param>
      <param name="minute">分鐘。</param>
      <param name="second">秒鐘，必要時可包括秒值的小數部分。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffDays 以計算兩個日期/時間的相距天數。</summary>
      <returns>第一個和第二個日期/時間的相距天數。</returns>
      <param name="dateValue1">第一個日期/時間。</param>
      <param name="dateValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffDays 以計算兩個日期/時間的相距天數。</summary>
      <returns>第一個和第二個日期/時間的相距天數。</returns>
      <param name="dateValue1">第一個日期/時間。</param>
      <param name="dateValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffHours 以計算兩個日期/時間的相距時數。</summary>
      <returns>第一個和第二個日期/時間的相距時數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffHours 以計算兩個日期/時間的相距時數。</summary>
      <returns>第一個和第二個日期/時間的相距時數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffHours 以計算兩個時間範圍的相距時數。</summary>
      <returns>第一個和第二個時間範圍的相距時數。</returns>
      <param name="timeValue1">第一個時間範圍。</param>
      <param name="timeValue2">第二個時間範圍。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMicroseconds 以計算兩個日期/時間的相距微秒數。</summary>
      <returns>第一個和第二個日期/時間的相距微秒數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMicroseconds 以計算兩個日期/時間的相距微秒數。</summary>
      <returns>第一個和第二個日期/時間的相距微秒數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMicroseconds 以計算兩個時間範圍的相距微秒數。</summary>
      <returns>第一個和第二個時間範圍的相距微秒數。</returns>
      <param name="timeValue1">第一個時間範圍。</param>
      <param name="timeValue2">第二個時間範圍。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMilliseconds 以計算兩個日期/時間的相距毫秒數。</summary>
      <returns>第一個和第二個日期/時間的相距毫秒數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMilliseconds 以計算兩個日期/時間的相距毫秒數。</summary>
      <returns>第一個和第二個日期/時間的相距毫秒數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMilliseconds 以計算兩個時間範圍的相距毫秒數。</summary>
      <returns>第一個和第二個時間範圍的相距毫秒數。</returns>
      <param name="timeValue1">第一個時間範圍。</param>
      <param name="timeValue2">第二個時間範圍。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMinutes 以計算兩個日期/時間的相距分鐘數。</summary>
      <returns>第一個和第二個日期/時間的相距分鐘數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMinutes 以計算兩個日期/時間的相距分鐘數。</summary>
      <returns>第一個和第二個日期/時間的相距分鐘數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMinutes 以計算兩個時間範圍的相距分鐘數。</summary>
      <returns>第一個和第二個時間範圍的相距分鐘數。</returns>
      <param name="timeValue1">第一個時間範圍。</param>
      <param name="timeValue2">第二個時間範圍。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMonths 以計算兩個日期/時間的相距月數。</summary>
      <returns>第一個和第二個日期/時間的相距月數。</returns>
      <param name="dateValue1">第一個日期/時間。</param>
      <param name="dateValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMonths 以計算兩個日期/時間的相距月數。</summary>
      <returns>第一個和第二個日期/時間的相距月數。</returns>
      <param name="dateValue1">第一個日期/時間。</param>
      <param name="dateValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffNanoseconds 以計算兩個日期/時間的相距奈秒數。</summary>
      <returns>第一個和第二個日期/時間的相距奈秒數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffNanoseconds 以計算兩個日期/時間的相距奈秒數。</summary>
      <returns>第一個和第二個日期/時間的相距奈秒數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffNanoseconds 以計算兩個時間範圍的相距奈秒數。</summary>
      <returns>第一個和第二個時間範圍的相距奈秒數。</returns>
      <param name="timeValue1">第一個時間範圍。</param>
      <param name="timeValue2">第二個時間範圍。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffSeconds 以計算兩個日期/時間的相距秒數。</summary>
      <returns>第一個和第二個日期/時間的相距秒數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffSeconds 以計算兩個日期/時間的相距秒數。</summary>
      <returns>第一個和第二個日期/時間的相距秒數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffSeconds 以計算兩個時間範圍的相距秒數。</summary>
      <returns>第一個和第二個時間範圍的相距秒數。</returns>
      <param name="timeValue1">第一個時間範圍。</param>
      <param name="timeValue2">第二個時間範圍。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffYears 以計算兩個日期/時間的相距年數。</summary>
      <returns>第一個和第二個日期/時間的相距年數。</returns>
      <param name="dateValue1">第一個日期/時間。</param>
      <param name="dateValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffYears 以計算兩個日期/時間的相距年數。</summary>
      <returns>第一個和第二個日期/時間的相距年數。</returns>
      <param name="dateValue1">第一個日期/時間。</param>
      <param name="dateValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 GetTotalOffsetMinutes 以傳回指定的日期/時間與 UTC 相差的分鐘數。此值通常介於 +780 到 -780 之間 (+ 或 - 13 小時)。</summary>
      <returns>輸入與 UTC 之間的位移。</returns>
      <param name="dateTimeOffsetArgument">要使用的日期/時間值。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Left 以傳回某字串最左邊指定之數目的字元。</summary>
      <returns>包含從輸入字串左邊算起，長度達指定之字元數的字串。</returns>
      <param name="stringArgument">輸入字串。</param>
      <param name="length">要傳回的字元數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Reverse(System.String)">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Reverse 以反向字元的順序傳回指定的字串。</summary>
      <returns>具有反向字元順序的輸入字串。</returns>
      <param name="stringArgument">輸入字串。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Right 以傳回某字串最右邊指定之數目的字元。</summary>
      <returns>包含從輸入字串右邊算起，長度達指定之字元數的字串。</returns>
      <param name="stringArgument">輸入字串。</param>
      <param name="length">要傳回的字元數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDev 以計算集合的標準差。</summary>
      <returns>標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDev 以計算集合的標準差。</summary>
      <returns>標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDev 以計算集合的標準差。</summary>
      <returns>標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDev 以計算集合的標準差。</summary>
      <returns>標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDev 以計算集合的標準差。</summary>
      <returns>標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDev 以計算集合的標準差。</summary>
      <returns>標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDev 以計算集合的標準差。</summary>
      <returns>標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDev 以計算集合的標準差。</summary>
      <returns>標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDevP 以計算母體擴展的標準差。</summary>
      <returns>母體擴展標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDevP 以計算母體擴展的標準差。</summary>
      <returns>母體擴展標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDevP 以計算母體擴展的標準差。</summary>
      <returns>母體擴展標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDevP 以計算母體擴展的標準差。</summary>
      <returns>母體擴展標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDevP 以計算母體擴展的標準差。</summary>
      <returns>母體擴展標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDevP 以計算母體擴展的標準差。</summary>
      <returns>母體擴展標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDevP 以計算母體擴展的標準差。</summary>
      <returns>母體擴展標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDevP 以計算母體擴展的標準差。</summary>
      <returns>母體擴展標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Truncate 將指定的值截斷至指定的位數。</summary>
      <returns>已截斷的值。</returns>
      <param name="value">要截斷的值。</param>
      <param name="digits">要保留的位數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Truncate 將指定的值截斷至指定的位數。</summary>
      <returns>已截斷的值。</returns>
      <param name="value">要截斷的值。</param>
      <param name="digits">要保留的位數。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 TruncateTime 以傳回指定的日期清除時間部分之後的結果。</summary>
      <returns>已清除時間部分的輸入日期。</returns>
      <param name="dateValue">要使用的日期/時間值。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 TruncateTime 以傳回指定的日期清除時間部分之後的結果。</summary>
      <returns>已清除時間部分的輸入日期。</returns>
      <param name="dateValue">要使用的日期/時間值。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Var 以計算集合的差異。</summary>
      <returns>差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Var 以計算集合的差異。</summary>
      <returns>差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Var 以計算集合的差異。</summary>
      <returns>差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Var 以計算集合的差異。</summary>
      <returns>差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Var 以計算集合的差異。</summary>
      <returns>差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Var 以計算集合的差異。</summary>
      <returns>差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Var 以計算集合的差異。</summary>
      <returns>差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Var 以計算集合的差異。</summary>
      <returns>差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 VarP 以計算母體擴展的差異。</summary>
      <returns>母體擴展差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 VarP 以計算母體擴展的差異。</summary>
      <returns>母體擴展差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 VarP 以計算母體擴展的差異。</summary>
      <returns>母體擴展差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 VarP 以計算母體擴展的差異。</summary>
      <returns>母體擴展差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 VarP 以計算母體擴展的差異。</summary>
      <returns>母體擴展差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 VarP 以計算母體擴展的差異。</summary>
      <returns>母體擴展差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 VarP 以計算母體擴展的差異。</summary>
      <returns>母體擴展差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 VarP 以計算母體擴展的差異。</summary>
      <returns>母體擴展差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilder">
      <summary>DbModelBuilder 是用來將 CLR 類別對應到資料庫結構描述。這種以程式碼為中心的建立實體資料模型 (EDM) 方式稱為 'Code First'。</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.DbModelBuilder" /> 類別的新執行個體。探索初始模型的程序將會使用電腦上安裝之最新版 Entity Framework 所隨附的慣例集合。</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>初始化 <see cref="T:System.Data.Entity.DbModelBuilder" /> 類別的新執行個體，其將會使用一組特定的慣例來探索初始模型。</summary>
      <param name="modelBuilderVersion">要使用的慣例版本。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Common.DbConnection)">
      <summary>根據使用此產生器所執行的組態建立 <see cref="T:System.Data.Entity.Infrastructure.DbModel" />。此連接是用來判斷當做此用途的資料庫提供者是否會影響產生之模型的資料庫層級。</summary>
      <returns>已建立的模型。</returns>
      <param name="providerConnection">用來判斷提供者資訊的連接。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>根據使用此產生器所執行的組態建立 <see cref="T:System.Data.Entity.Infrastructure.DbModel" />。必須指定提供者資訊，因為這會影響產生之模型的資料庫層級。如果是 SqlClient，非變異名稱為 'System.Data.SqlClient' 而且資訊清單語彙基元為版本年份 (例如 '2005'、'2008' 等)。</summary>
      <returns>已建立的模型。</returns>
      <param name="providerInfo">此模型將會搭配使用的資料庫提供者。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ComplexType``1">
      <summary>註冊類型當做模型中的複雜類型，並傳回可用來設定複雜類型的物件。可針對相同的類型多次呼叫此方法，以執行多行組態。</summary>
      <returns>指定之複雜類型的組態物件。</returns>
      <typeparam name="TComplexType">要登錄或設定的類型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Configurations">
      <summary>取得此 DbModelBuilder 的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" />。登錄器允許向此產生器登錄衍生的實體和複雜類型組態。</summary>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Conventions">
      <summary>針對處理慣例的此 DbModelBuilder 設定提供存取權。</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Entity``1">
      <summary>註冊實體類型當做模型的一部分，並傳回可用來設定實體的物件。可針對相同的實體多次呼叫此方法，以執行多行組態。</summary>
      <returns>指定之實體類型的組態物件。</returns>
      <typeparam name="TEntityType">要登錄或設定的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Equals(System.Object)">
      <summary>指定 <see cref="T:System.Data.Entity.DbModelBuilder" /> 是否與指定的物件相等。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.DbModelBuilder" /> 與指定的物件相等為 true，否則即為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetHashCode">
      <summary>傳回目前執行個體的雜湊碼。</summary>
      <returns>目前執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.HasDefaultSchema(System.String)">
      <summary>設定預設的資料庫結構描述名稱。此預設的資料庫結構描述名稱將供任何未明確設定結構描述名稱的資料庫物件使用。</summary>
      <returns>相同的 DbModelBuilder 執行個體，以便鏈結多個呼叫。</returns>
      <param name="schema">預設的資料庫結構描述名稱。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore``1">
      <summary>從模型中排除類型。這是用來將先前於初始模型探索期間由慣例所加入的類型從模型中移除。</summary>
      <returns>相同的 DbModelBuilder 執行個體，以便鏈結多個呼叫。</returns>
      <typeparam name="T">要排除的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>從模型中排除指定的類型。這是用來將先前於初始模型探索期間由慣例所加入的類型從模型中移除。</summary>
      <returns>相同的 DbModelBuilder 執行個體，以便鏈結多個呼叫。</returns>
      <param name="types">要從模型中排除的類型。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Properties">
      <summary>開始組態輕量型慣例以套用至模型中的所有屬性。</summary>
      <returns>慣例的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Properties``1">
      <summary>開始組態輕量型慣例以套用至模型中指定之類型的所有基本屬性。</summary>
      <returns>慣例的組態物件。</returns>
      <typeparam name="T">將要套用此慣例的屬性所屬類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.RegisterEntityType(System.Type)">
      <summary>將實體類型登錄為模型的一部分。</summary>
      <param name="entityType">要登錄的類型。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ToString">
      <summary>傳回 <see cref="T:System.Data.Entity.DbModelBuilder" /> 的字串表示法。</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbModelBuilder" />.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Types``1">
      <summary>開始組態輕量型慣例，以套用至模型中衍生自或實作泛型引數指定的所有實體和複雜類型。此方法不會將類型註冊為模型的一部分。</summary>
      <returns>慣例的組態物件。</returns>
      <typeparam name="T">將要套用此慣例的實體或複雜類型的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Types">
      <summary>開始組態輕量型慣例，以套用至模型中的所有實體和複雜類型。</summary>
      <returns>慣例的組態物件。</returns>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersion">
      <summary>此列舉中的值可以直接提供給 <see cref="T:System.Data.Entity.DbModelBuilder" /> 類別，或者可以在套用至從 <see cref="T:System.Data.Entity.DbContext" /> 衍生之類別的 <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" /> 中使用。使用的值會定義從程式碼建立模型 (又稱為 "Code First" 建立方式) 時，應該使用哪一個版本的 DbContext 和 DbModelBuilder 慣例。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.Latest">
      <summary>     表示應該使用最新版本的 <see cref="T:System.Data.Entity.DbModelBuilder" /> 和 <see cref="T:System.Data.Entity.DbContext" /> 慣例。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V4_1">
      <summary>     表示應該使用隨附在 Entity Framework v4.1 中的 <see cref="T:System.Data.Entity.DbModelBuilder" /> 和 <see cref="T:System.Data.Entity.DbContext" /> 慣例的版本。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0">
      <summary>     表示應該使用隨附在 Entity Framework v5.0 中的 <see cref="T:System.Data.Entity.DbModelBuilder" /> 和 <see cref="T:System.Data.Entity.DbContext" /> 慣例的版本。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0_Net4">
      <summary>表示將目標設為 .Net Framework 4 時，應該使用隨附在 Entity Framework v5.0 中的 <see cref="T:System.Data.Entity.DbModelBuilder" /> 和 <see cref="T:System.Data.Entity.DbContext" /> 慣例的版本。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V6_0">
      <summary>     表示應該使用隨附在 Entity Framework v6.0 中的 <see cref="T:System.Data.Entity.DbModelBuilder" /> 和 <see cref="T:System.Data.Entity.DbContext" /> 慣例的版本。</summary>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersionAttribute">
      <summary>此屬性可以套用至衍生自 <see cref="T:System.Data.Entity.DbContext" /> 的類別，以便設定從程式碼建立模型 (又稱為 "Code First" 建立方式) 時，應該使用哪一個版本的 DbContext 和 <see cref="T:System.Data.Entity.DbModelBuilder" /> 慣例。如需 DbModelBuilder 版本的詳細資訊，請參閱 <see cref="T:System.Data.Entity.DbModelBuilderVersion" /> 列舉。</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilderVersionAttribute.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>初始化 <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" /> 類別的新執行個體。</summary>
      <param name="version">要使用的 <see cref="T:System.Data.Entity.DbModelBuilder" /> 慣例版本。</param>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilderVersionAttribute.Version">
      <summary>取得 <see cref="T:System.Data.Entity.DbModelBuilder" /> 慣例版本。</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 慣例版本。</returns>
    </member>
    <member name="T:System.Data.Entity.DbSet">
      <summary>非泛型版本的 <see cref="T:System.Data.Entity.DbSet`1" />，在建置時不知道實體的類型時可以使用。</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.#ctor">
      <summary>從將要做為 DbSet 的測試複本使用之衍生類型的建構函式呼叫時，建立 <see cref="T:System.Data.Entity.DbSet" /> 的執行個體。供測試複本使用的方法和屬性必須由測試複本實作，預設實作不執行任何作業 Include 的 AsNoTracking、AsStreaming 除外。</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.Add(System.Object)">
      <summary>將給定的實體加入至 Added 狀態集合的基礎內容中，好讓呼叫 SaveChanges 時可將它插入資料庫中。</summary>
      <returns>實體。</returns>
      <param name="entity">要加入的實體。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.AddRange(System.Collections.IEnumerable)">
      <summary>將給定的實體集合加入至要置於 Added 狀態之每個實體的集合基礎內容中，好讓呼叫 SaveChanges 時可將它插入資料庫中。</summary>
      <returns>實體的集合。</returns>
      <param name="entities">要加入之實體的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Attach(System.Object)">
      <summary>將給定的實體附加至集合基礎內容中。也就是說，此實體會放在 Unchanged 狀態的內容中，就像是已經從資料庫讀取一樣。</summary>
      <returns>實體。</returns>
      <param name="entity">要附加的實體。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Cast``1">
      <summary>傳回相等的泛型 <see cref="T:System.Data.Entity.DbSet`1" /> 物件。</summary>
      <returns>泛型集合物件。</returns>
      <typeparam name="TEntity">建立此集合所針對的實體類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create">
      <summary>針對此集合的類型建立實體的新執行個體。請注意，此執行個體不會加入或附加至集合中。如果設定基礎內容建立 Proxy 而且實體類型符合建立 Proxy 的需求，則傳回的執行個體將會是 Proxy。</summary>
      <returns>實體執行個體，可能是 Proxy。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create(System.Type)">
      <summary>針對此集合的類型或是衍生自此集合之類型的類型，建立實體的新執行個體。請注意，此執行個體不會加入或附加至集合中。如果設定基礎內容建立 Proxy 而且實體類型符合建立 Proxy 的需求，則傳回的執行個體將會是 Proxy。</summary>
      <returns>實體執行個體，可能是 Proxy。</returns>
      <param name="derivedEntityType">要建立之實體的類型。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Equals(System.Object)">
      <summary>傳回指定的集合是否等於目前的集合。</summary>
      <returns>如果指定的物件等於目前的集合，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件比較的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Find(System.Object[])">
      <summary>尋找具有給定主索引鍵值的實體。如果具有給定主索引鍵值的實體存在於內容中，則會立刻傳回此實體，而不會對存放區發出要求。同樣地，如果是具有給定主索引鍵值的實體，則會對存放區發出要求，而且如果找到此實體，則會將它附加至內容中並傳回。如果內容或存放區中找不到任何實體，則會傳回 null。</summary>
      <returns>找到的實體或 null。</returns>
      <param name="keyValues">要尋找之實體的主索引鍵值。</param>
      <exception cref="T:System.InvalidOperationException">如果內容中存在多個具有給定主索引鍵值的實體，就會擲回。</exception>
      <exception cref="T:System.InvalidOperationException">如果實體的類型不是此內容的資料模型的一部分，就會擲回。</exception>
      <exception cref="T:System.InvalidOperationException">如果索引鍵值的類型不符合要找到之實體類型的索引鍵值類型，就會擲回。</exception>
      <exception cref="T:System.InvalidOperationException">當內容已經過處置時擲回。</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.FindAsync(System.Object[])">
      <summary>非同步尋找具有給定主索引鍵值的實體。如果具有給定主索引鍵值的實體存在於內容中，則會立刻傳回此實體，而不會對存放區發出要求。同樣地，如果是具有給定主索引鍵值的實體，則會對存放區發出要求，而且如果找到此實體，則會將它附加至內容中並傳回。如果內容或存放區中找不到任何實體，則會傳回 null。</summary>
      <returns>表示非同步尋找作業的工作。工作結果包含找到的實體，或 null。</returns>
      <param name="keyValues">要尋找之實體的主索引鍵值。</param>
      <exception cref="T:System.InvalidOperationException">如果內容中存在多個具有給定主索引鍵值的實體，就會擲回。</exception>
      <exception cref="T:System.InvalidOperationException">如果實體的類型不是此內容的資料模型的一部分，就會擲回。</exception>
      <exception cref="T:System.InvalidOperationException">如果索引鍵值的類型不符合要找到之實體類型的索引鍵值類型，就會擲回。</exception>
      <exception cref="T:System.InvalidOperationException">當內容已經過處置時擲回。</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.FindAsync(System.Threading.CancellationToken,System.Object[])">
      <summary>非同步尋找具有給定主索引鍵值的實體。如果具有給定主索引鍵值的實體存在於內容中，則會立刻傳回此實體，而不會對存放區發出要求。同樣地，如果是具有給定主索引鍵值的實體，則會對存放區發出要求，而且如果找到此實體，則會將它附加至內容中並傳回。如果內容或存放區中找不到任何實體，則會傳回 null。</summary>
      <returns>表示非同步尋找作業的工作。工作結果包含找到的實體，或 null。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="keyValues">要尋找之實體的主索引鍵值。</param>
      <exception cref="T:System.InvalidOperationException">如果內容中存在多個具有給定主索引鍵值的實體，就會擲回。</exception>
      <exception cref="T:System.InvalidOperationException">如果實體的類型不是此內容的資料模型的一部分，就會擲回。</exception>
      <exception cref="T:System.InvalidOperationException">如果索引鍵值的類型不符合要找到之實體類型的索引鍵值類型，就會擲回。</exception>
      <exception cref="T:System.InvalidOperationException">當內容已經過處置時擲回。</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetHashCode">
      <summary>傳回指定之集合的雜湊函式。</summary>
      <returns>集合的雜湊函數。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetType">
      <summary>取得目前集合的類型。</summary>
      <returns>目前集合的類型。</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet.Local">
      <summary>取得 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />，代表此集合中所有 Added、Unchanged 和 Modified 實體的本機檢視。當從內容中加入或移除實體時，此本機檢視會維持同步的狀態。同樣地，從本機檢視加入或移除的實體將會自動加入至內容中或是從內容中移除。</summary>
      <returns>本機檢視。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Remove(System.Object)">
      <summary>將給定的實體標記為 Deleted，好讓呼叫 SaveChanges 時可從資料庫中將它刪除。請注意，此實體必須存在於某個其他狀態的內容中，然後才會呼叫此方法。</summary>
      <returns>實體。</returns>
      <param name="entity">要移除的實體。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.RemoveRange(System.Collections.IEnumerable)">
      <summary>從要置於 Added 狀態之每個實體的集合基礎內容中中移除給定的實體集，讓呼叫 SaveChanges 時可將它從資料庫中刪除。</summary>
      <returns>實體的集合。</returns>
      <param name="entities">要刪除之實體的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])">
      <summary>建立原始 SQL 查詢，此查詢將會傳回此集合中的實體。根據預設，傳回的實體會由內容所追蹤，這可藉由在傳回的 <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" /> 上呼叫 AsNoTracking 來變更。請注意，傳回的實體一定會具有此集合的類型，而且絕對不會具有衍生類型。如果查詢的資料表可能包含其他實體類型的資料，則必須適當地撰寫 SQL 查詢，以確保只會傳回正確類型的實體。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.Set(typeof(Blog)).SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor)。或者，您也可以建構 DbParameter 再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.Set(typeof(Blog)).SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>將在列舉時執行查詢的 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> 物件。</returns>
      <param name="sql">SQL 查詢字串。</param>
      <param name="parameters">要套用至 SQL 查詢字串的參數。如果使用了輸出參數，在完全讀取結果之前，這些參數的值將無法使用。這是由於 DbDataReader 的基礎行為所造成，請參閱 http://go.microsoft.com/fwlink/?LinkID=398589 以取得詳細資料。</param>
    </member>
    <member name="T:System.Data.Entity.DbSet`1">
      <summary>DbSet 表示內容中所有實體的集合，或者可以從資料庫查詢具有給定類型的集合。DbSet 物件是使用 DbContext.Set 方法從 DbContext 所建立。</summary>
      <typeparam name="TEntity">定義集合的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.#ctor">
      <summary>從將要做為 DbSet 的測試複本使用之衍生類型的建構函式呼叫時，建立 <see cref="T:System.Data.Entity.DbSet`1" /> 的執行個體。供測試複本使用的方法和屬性必須由測試複本實作，預設實作不執行任何作業 Include 的 AsNoTracking、AsStreaming 除外。</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Add(`0)">
      <summary>將給定的實體加入至 Added 狀態集合的基礎內容中，好讓呼叫 SaveChanges 時可將它插入資料庫中。</summary>
      <param name="entity">要加入的實體。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>將給定的實體集合加入至要置於 Added 狀態之每個實體的集合基礎內容中，好讓呼叫 SaveChanges 時可將它插入資料庫中。</summary>
      <returns>實體的集合。</returns>
      <param name="entities">要加入之實體的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Attach(`0)">
      <summary>將給定的實體附加至集合基礎內容中。也就是說，此實體會放在 Unchanged 狀態的內容中，就像是已經從資料庫讀取一樣。</summary>
      <param name="entity">要附加的實體。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create">
      <summary>針對此集合的類型建立實體的新執行個體。請注意，此執行個體不會加入或附加至集合中。如果設定基礎內容建立 Proxy 而且實體類型符合建立 Proxy 的需求，則傳回的執行個體將會是 Proxy。</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create``1">
      <summary>針對此集合的類型或是衍生自此集合之類型的類型，建立實體的新執行個體。請注意，此執行個體不會加入或附加至集合中。如果設定基礎內容建立 Proxy 而且實體類型符合建立 Proxy 的需求，則傳回的執行個體將會是 Proxy。</summary>
      <typeparam name="TDerivedEntity">要建立之實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Equals(System.Object)">
      <summary>判斷指定的 DbSet 是否等於目前的 DbSet。</summary>
      <returns>如果指定的 DbSet 等於目前的 DbSet，則為 true，否則為 false。</returns>
      <param name="obj">要與目前 DbSet 進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Find(System.Object[])">
      <summary>尋找具有給定主索引鍵值的實體。如果具有給定主索引鍵值的實體存在於內容中，則會立刻傳回此實體，而不會對存放區發出要求。同樣地，如果是具有給定主索引鍵值的實體，則會對存放區發出要求，而且如果找到此實體，則會將它附加至內容中並傳回。如果內容或存放區中找不到任何實體，則會傳回 null。</summary>
      <returns>找到的實體或 null。</returns>
      <param name="keyValues">要尋找之實體的主索引鍵值。</param>
      <exception cref="T:System.InvalidOperationException">如果內容中存在多個具有給定主索引鍵值的實體，就會擲回。</exception>
      <exception cref="T:System.InvalidOperationException">如果實體的類型不是此內容的資料模型的一部分，就會擲回。</exception>
      <exception cref="T:System.InvalidOperationException">如果索引鍵值的類型不符合要找到之實體類型的索引鍵值類型，就會擲回。</exception>
      <exception cref="T:System.InvalidOperationException">當內容已經過處置時擲回。</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.FindAsync(System.Object[])">
      <summary>非同步尋找具有給定主索引鍵值的實體。如果具有給定主索引鍵值的實體存在於內容中，則會立刻傳回此實體，而不會對存放區發出要求。同樣地，如果是具有給定主索引鍵值的實體，則會對存放區發出要求，而且如果找到此實體，則會將它附加至內容中並傳回。如果內容或存放區中找不到任何實體，則會傳回 null。</summary>
      <returns>表示非同步尋找作業的工作。工作結果包含找到的實體，或 null。</returns>
      <param name="keyValues">要尋找之實體的主索引鍵值。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.FindAsync(System.Threading.CancellationToken,System.Object[])">
      <summary>非同步尋找具有給定主索引鍵值的實體。如果具有給定主索引鍵值的實體存在於內容中，則會立刻傳回此實體，而不會對存放區發出要求。同樣地，如果是具有給定主索引鍵值的實體，則會對存放區發出要求，而且如果找到此實體，則會將它附加至內容中並傳回。如果內容或存放區中找不到任何實體，則會傳回 null。</summary>
      <returns>表示非同步尋找作業的工作。工作結果包含找到的實體，或 null。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="keyValues">要尋找之實體的主索引鍵值。</param>
      <exception cref="T:System.InvalidOperationException">如果內容中存在多個具有給定主索引鍵值的實體，就會擲回。</exception>
      <exception cref="T:System.InvalidOperationException">如果實體的類型不是此內容的資料模型的一部分，就會擲回。</exception>
      <exception cref="T:System.InvalidOperationException">如果索引鍵值的類型不符合要找到之實體類型的索引鍵值類型，就會擲回。</exception>
      <exception cref="T:System.InvalidOperationException">當內容已經過處置時擲回。</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetHashCode">
      <summary>傳回此 DbSet 的雜湊函數。</summary>
      <returns>此 DbSet 的雜湊函數。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetType">
      <summary>傳回目前 DbSet 的類型。</summary>
      <returns>目前 DbSet 的類型。</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet`1.Local">
      <summary>取得 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />，代表此集合中所有 Added、Unchanged 和 Modified 實體的本機檢視。當從內容中加入或移除實體時，此本機檢視會維持同步的狀態。同樣地，從本機檢視加入或移除的實體將會自動加入至內容中或是從內容中移除。</summary>
      <returns>本機檢視。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.DbSet">
      <summary>傳回相等的非泛型 <see cref="T:System.Data.Entity.DbSet" /> 物件。</summary>
      <returns>非泛型集合物件。</returns>
      <param name="entry">泛型集合物件。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Remove(`0)">
      <summary>將給定的實體標記為 Deleted，好讓呼叫 SaveChanges 時可從資料庫中將它刪除。請注意，此實體必須存在於某個其他狀態的內容中，然後才會呼叫此方法。</summary>
      <param name="entity">要移除的實體。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>從要置於 Added 狀態之每個實體的集合基礎內容中中移除給定的實體集，讓呼叫 SaveChanges 時可將它從資料庫中刪除。</summary>
      <returns>實體的集合。</returns>
      <param name="entities">要刪除之實體的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])">
      <summary>建立原始 SQL 查詢，此查詢將會傳回此集合中的實體。根據預設，傳回的實體會由內容所追蹤，這可藉由在傳回的 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> 上呼叫 AsNoTracking 來變更。請注意，傳回的實體一定會具有此集合的類型，而且絕對不會具有衍生類型。如果查詢的資料表可能包含其他實體類型的資料，則必須適當地撰寫 SQL 查詢，以確保只會傳回正確類型的實體。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.Blogs.SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor)。或者，您也可以建構 DbParameter 再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.Blogs.SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>將在列舉時執行查詢的 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> 物件。</returns>
      <param name="sql">SQL 查詢字串。</param>
      <param name="parameters">要套用至 SQL 查詢字串的參數。如果使用了輸出參數，在完全讀取結果之前，這些參數的值將無法使用。這是由於 DbDataReader 的基礎行為所造成，請參閱 http://go.microsoft.com/fwlink/?LinkID=398589 以取得詳細資料。</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseAlways`1">
      <summary>IDatabaseInitializer 的實作，只要是初次在應用程式定義域中使用內容，就一定會重新建立資料庫，並選擇性地重新植入資料庫。若要植入資料庫，請建立衍生類別並覆寫 Seed 方法。</summary>
      <typeparam name="TContext">內容的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.InitializeDatabase(`0)">
      <summary>執行為給定內容初始化資料庫的策略。</summary>
      <param name="context">內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.Seed(`0)">
      <summary>應該覆寫的方法，以便實際將資料加入內容中進行植入。預設實作不做任何動作。</summary>
      <param name="context">要植入的內容。</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1">
      <summary>IDatabaseInitializer 的實作，它只會在模型於資料庫建立後已變更時刪除及重新建立資料庫，並選擇性地重新植入資料庫。</summary>
      <typeparam name="TContext">內容的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(`0)">
      <summary>執行為給定內容初始化資料庫的策略。</summary>
      <param name="context">內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.Seed(`0)">
      <summary>應該覆寫的方法，以便實際將資料加入內容中進行植入。預設實作不做任何動作。</summary>
      <param name="context">要植入的內容。</param>
    </member>
    <member name="T:System.Data.Entity.EntityState">
      <summary>     描述實體的狀態。</summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Added">
      <summary>     此實體受到內容追蹤，但尚未存在於資料庫中。</summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Deleted">
      <summary>     此實體受到內容追蹤並存在於資料庫中，但已加上刪除標記，會在下次呼叫 SaveChanges 時從資料庫中將它刪除。</summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Detached">
      <summary>實體未受到內容追蹤。使用此新運算子建立實體或使用其中一種 <see cref="T:System.Data.Entity.DbSet" /> Create 方法建立實體之後，該實體會立即處於此狀態。</summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Modified">
      <summary>     此實體受到內容追蹤並存在於資料庫中，而且其部分或所有屬性值已經修改過。 </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Unchanged">
      <summary>     此實體受到內容追蹤並存在於資料庫中，而且其屬性值並未變更自資料庫中的值。</summary>
    </member>
    <member name="T:System.Data.Entity.IDatabaseInitializer`1">
      <summary>此介面的實作是在初次使用 <see cref="T:System.Data.Entity.DbContext" /> 衍生類別的執行個體時用來初始化基礎資料庫。這項初始化作業可依條件建立資料庫及/或使用資料植入資料庫。其採用的策略是使用 <see cref="T:System.Data.Entity.Database" /> 類別的靜態 InitializationStrategy 屬性所設定。提供的實作如下：<see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" />、<see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" />、<see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />。</summary>
      <typeparam name="TContext">這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。 如需共變數與反變數的詳細資訊，請參閱。</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>     執行為給定內容初始化資料庫的策略。</summary>
      <param name="context"> 內容。 </param>
    </member>
    <member name="T:System.Data.Entity.IDbSet`1">
      <summary>
        <see cref="T:System.Data.Entity.IDbSet`1" /> 表示內容中所有實體的集合，或者可以從資料庫查詢具有給定類型的集合。<see cref="T:System.Data.Entity.DbSet`1" /> 是 IDbSet 的具象實作。</summary>
      <typeparam name="TEntity">定義集合的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Add(`0)">
      <summary>將給定的實體加入至 Added 狀態集合的基礎內容中，好讓呼叫 SaveChanges 時可將它插入資料庫中。</summary>
      <returns>實體。</returns>
      <param name="entity">要加入的實體。</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Attach(`0)">
      <summary>將給定的實體附加至集合基礎內容中。也就是說，此實體會放在 Unchanged 狀態的內容中，就像是已經從資料庫讀取一樣。</summary>
      <returns>實體。</returns>
      <param name="entity">要附加的實體。</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create">
      <summary>針對此集合的類型建立實體的新執行個體。請注意，此執行個體不會加入或附加至集合中。如果設定基礎內容建立 Proxy 而且實體類型符合建立 Proxy 的需求，則傳回的執行個體將會是 Proxy。</summary>
      <returns>實體執行個體，可能是 Proxy。</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create``1">
      <summary>針對此集合的類型或是衍生自此集合之類型的類型，建立實體的新執行個體。請注意，此執行個體不會加入或附加至集合中。如果設定基礎內容建立 Proxy 而且實體類型符合建立 Proxy 的需求，則傳回的執行個體將會是 Proxy。</summary>
      <returns>實體執行個體，可能是 Proxy。</returns>
      <typeparam name="TDerivedEntity">要建立之實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Find(System.Object[])">
      <summary>尋找具有給定主索引鍵值的實體。如果具有給定主索引鍵值的實體存在於內容中，則會立刻傳回此實體，而不會對存放區發出要求。同樣地，如果是具有給定主索引鍵值的實體，則會對存放區發出要求，而且如果找到此實體，則會將它附加至內容中並傳回。如果內容或存放區中找不到任何實體，則會傳回 null。</summary>
      <returns>找到的實體或 null。</returns>
      <param name="keyValues">要尋找之實體的主索引鍵值。</param>
    </member>
    <member name="P:System.Data.Entity.IDbSet`1.Local">
      <summary>取得 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />，代表此集合中所有 Added、Unchanged 和 Modified 實體的本機檢視。當從內容中加入或移除實體時，此本機檢視會維持同步的狀態。同樣地，從本機檢視加入或移除的實體將會自動加入至內容中或是從內容中移除。</summary>
      <returns>本機檢視。</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Remove(`0)">
      <summary>將給定的實體標記為 Deleted，好讓呼叫 SaveChanges 時可從資料庫中將它刪除。請注意，此實體必須存在於某個其他狀態的內容中，然後才會呼叫此方法。</summary>
      <returns>實體。</returns>
      <param name="entity">要移除的實體。</param>
    </member>
    <member name="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2">
      <summary>使用 Code First 移轉以將資料庫更新至最新版本之 <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> 的實作。</summary>
      <typeparam name="TContext">內容的類型。</typeparam>
      <typeparam name="TMigrationsConfiguration">初始化期間要使用的移轉組態類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor">
      <summary>初始化 MigrateDatabaseToLatestVersion 類別的新執行個體，此執行個體會使用來自使用預設建構函式或註冊的 Factory 建構 (如適用) 之內容的連接資訊</summary>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.Boolean)">
      <summary>初始化 MigrateDatabaseToLatestVersion 類別的新執行個體，此執行個體會指定是否使用來自觸發初始化以執行移轉之內容的連接資訊。</summary>
      <param name="useSuppliedContext">如果設定為 true，初始設定式會使用來自觸發初始化之內容的連接資訊來執行。否則會取用來自使用預設建構函式或註冊的 Factory 建構 (如適用) 之內容的連接資訊。</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.Boolean,`1)">
      <summary>初始化 MigrateDatabaseToLatestVersion 類別的新執行個體，此執行個體會指定是否使用來自觸發初始化以執行移轉之內容的連接資訊。同時也可指定初始化期間所要使用的移轉組態。</summary>
      <param name="useSuppliedContext">如果設定為 true，初始設定式會使用來自觸發初始化之內容的連接資訊來執行。否則會取用來自使用預設建構函式或註冊的 Factory 建構 (如適用) 之內容的連接資訊。</param>
      <param name="configuration">初始化期間所要使用的移轉組態。</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.String)">
      <summary>初始化 MigrateDatabaseToLatestVersion 類別的新執行個體，此執行個體會使用組態檔中的特定連接字串來連接到資料庫，以便執行移轉。</summary>
      <param name="connectionStringName">要用於移轉之連接字串的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.InitializeDatabase(`0)">
      <summary>初始化給定內容的資料庫。</summary>
      <param name="context">內容。</param>
    </member>
    <member name="T:System.Data.Entity.NullDatabaseInitializer`1">
      <summary>
        <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> 無任何作用的實作。使用此初始設定式會停用給定內容類型的資料庫初始化。將此類別的執行個體傳遞至 <see cref="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})" /> 相當於傳遞 null。使用 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 解析初始設定式時，必須使用此類別的執行個體以停用初始化。</summary>
      <typeparam name="TContext">內容的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.NullDatabaseInitializer`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.NullDatabaseInitializer`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.NullDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>執行為給定內容初始化資料庫的策略。</summary>
      <param name="context">內容。</param>
    </member>
    <member name="T:System.Data.Entity.ObservableCollectionExtensions">
      <summary>
        <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> 的擴充方法。</summary>
    </member>
    <member name="M:System.Data.Entity.ObservableCollectionExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})">
      <summary>傳回 <see cref="T:System.ComponentModel.BindingList`1" /> 實作，它會維持與給定的 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> 同步。</summary>
      <returns>繫結清單。</returns>
      <param name="source">繫結清單將會持續同步的集合。</param>
      <typeparam name="T">元素類型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.QueryableExtensions">
      <summary>提供實用的擴充方法，與 Entity Framework LINQ 查詢搭配使用。</summary>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>非同步判斷序列的所有元素是否都符合條件。</summary>
      <returns>表示非同步作業的工作。若來源序列的每個元素都通過指定述詞中的測試，表示工作結果中包含 true；否則為 false。</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" />，要測試其元素是否符合條件。</param>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>非同步判斷序列的所有元素是否都符合條件。</summary>
      <returns>表示非同步作業的工作。若來源序列的每個元素都通過指定述詞中的測試，表示工作結果中包含 true；否則為 false。</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" />，要測試其元素是否符合條件。</param>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0})">
      <summary>非同步判斷序列是否包含任何元素。</summary>
      <returns>表示非同步作業的工作。如果來源序列包含任何元素，則表示工作結果包含 true；否則為 false。</returns>
      <param name="source">要檢查是否為空白的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>非同步判斷序列的任何元素是否符合條件。</summary>
      <returns>表示非同步作業的工作。如果來源序列中的任何元素通過指定之述詞中的測試，則表示工作結果包含 true；否則為 false。</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" />，要測試其元素是否符合條件。</param>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>非同步判斷序列的任何元素是否符合條件。</summary>
      <returns>表示非同步作業的工作。如果來源序列中的任何元素通過指定之述詞中的測試，則表示工作結果包含 true；否則為 false。</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" />，要測試其元素是否符合條件。</param>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>非同步判斷序列是否包含任何元素。</summary>
      <returns>表示非同步作業的工作。如果來源序列包含任何元素，則表示工作結果包含 true；否則為 false。</returns>
      <param name="source">要檢查是否為空白的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsNoTracking(System.Linq.IQueryable)">
      <summary>傳回新的查詢，其中傳回的實體將不會在 <see cref="T:System.Data.Entity.DbContext" /> 或 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 中快取。此方法的運作方式是藉由呼叫基礎查詢物件的 AsNoTracking 方法。如果基礎查詢物件沒有 AsNoTracking 方法，則呼叫此方法沒有任何作用。</summary>
      <returns>已套用 NoTracking 的新查詢，如果不支援 NoTracking 則為來源查詢。</returns>
      <param name="source">來源查詢。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
      <summary>傳回新的查詢，其中傳回的實體將不會在 <see cref="T:System.Data.Entity.DbContext" /> 或 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 中快取。此方法的運作方式是藉由呼叫基礎查詢物件的 AsNoTracking 方法。如果基礎查詢物件沒有 AsNoTracking 方法，則呼叫此方法沒有任何作用。</summary>
      <returns>已套用 NoTracking 的新查詢，如果不支援 NoTracking 則為來源查詢。</returns>
      <param name="source">來源查詢。</param>
      <typeparam name="T">元素類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsStreaming(System.Linq.IQueryable)">
      <summary>傳回會串流結果而非緩衝處理的新查詢。此方法的運作方式是藉由呼叫基礎查詢物件的 AsStreaming 方法。如果基礎查詢物件沒有 AsStreaming 方法，則呼叫此方法沒有任何作用。</summary>
      <returns>已套用 AsStreaming 的新查詢，如果不支援 AsStreaming 則為來源查詢。</returns>
      <param name="source">要套用 AsStreaming 的 <see cref="T:System.Linq.IQueryable" />。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsStreaming``1(System.Linq.IQueryable{``0})">
      <summary>傳回會串流結果而非緩衝處理的新查詢。此方法的運作方式是藉由呼叫基礎查詢物件的 AsStreaming 方法。如果基礎查詢物件沒有 AsStreaming 方法，則呼叫此方法沒有任何作用。</summary>
      <returns>已套用 AsStreaming 的新查詢，如果不支援 AsStreaming 則為來源查詢。</returns>
      <param name="source">要套用 AsStreaming 的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="T">
        <paramref name="source" /> 之元素的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal})">
      <summary>非同步計算 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
      <summary>非同步計算 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的 <see cref="T:System.Decimal" /> 值序列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double})">
      <summary>非同步計算 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
      <summary>非同步計算 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的 <see cref="T:System.Double" /> 值序列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32})">
      <summary>非同步計算 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
      <summary>非同步計算 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的 <see cref="T:System.Int32" /> 值序列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64})">
      <summary>非同步計算 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
      <summary>非同步計算 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的 <see cref="T:System.Int64" /> 值序列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>非同步計算可為 Null 之 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值之可為 Null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
      <summary>非同步計算可為 Null 之 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值之可為 Null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>非同步計算可為 Null 之 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值之可為 Null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
      <summary>非同步計算可為 Null 之 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值之可為 Null 的 <see cref="T:System.Double" /> 值序列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>非同步計算可為 Null 之 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值之可為 Null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
      <summary>非同步計算可為 Null 之 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值之可為 Null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>非同步計算可為 Null 之 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值之可為 Null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
      <summary>非同步計算可為 Null 之 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值之可為 Null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>非同步計算可為 Null 之 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值之可為 Null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
      <summary>非同步計算可為 Null 之 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值之可為 Null 的 <see cref="T:System.Single" /> 值序列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single})">
      <summary>非同步計算 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
      <summary>非同步計算 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的 <see cref="T:System.Single" /> 值序列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之可為 Null 之 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之可為 Null 之 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之可為 Null 之 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之可為 Null 之 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之可為 Null 之 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之可為 Null 之 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之可為 Null 之 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之可為 Null 之 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之可為 Null 之 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之可為 Null 之 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>表示非同步作業的工作。工作結果包含值序列的平均值。</returns>
      <param name="source">要計算平均值的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 沒有包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0)">
      <summary>使用預設的相等比較子 (Comparer) 來非同步判斷序列是否包含指定的元素。</summary>
      <returns>表示非同步作業的工作。如果輸入序列包含指定值，則表示工作結果包含 true；否則為 false。</returns>
      <param name="source">要傳回單一元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="item">要在序列中尋找的物件。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)">
      <summary>使用預設的相等比較子 (Comparer) 來非同步判斷序列是否包含指定的元素。</summary>
      <returns>表示非同步作業的工作。如果輸入序列包含指定值，則表示工作結果包含 true；否則為 false。</returns>
      <param name="source">要傳回單一元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="item">要在序列中尋找的物件。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0})">
      <summary>非同步傳回序列中的元素數。</summary>
      <returns>表示非同步作業的工作。工作結果包含輸入序列中的元素數。</returns>
      <param name="source">包含要計算之元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>非同步傳回序列中符合條件的元素數。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中符合述詞函式之條件的元素數。</returns>
      <param name="source">包含要計算之元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中符合述詞函式之條件的元素數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>非同步傳回序列中符合條件的元素數。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中符合述詞函式之條件的元素數。</returns>
      <param name="source">包含要計算之元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中符合述詞函式之條件的元素數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>非同步傳回序列中的元素數。</summary>
      <returns>表示非同步作業的工作。工作結果包含輸入序列中的元素數。</returns>
      <param name="source">包含要計算之元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0})">
      <summary>非同步傳回序列的第一個元素。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <paramref name="source" /> 中的第一個元素。</returns>
      <param name="source">要傳回第一個元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">來源序列為空白。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>非同步傳回序列中符合指定之條件的第一個元素。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <paramref name="source" /> 中通過 <paramref name="predicate" /> 內測試的第一個元素。</returns>
      <param name="source">要傳回第一個元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">沒有任何項目符合 <paramref name="predicate" /> 中的條件。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>非同步傳回序列中符合指定之條件的第一個元素。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <paramref name="source" /> 中通過 <paramref name="predicate" /> 內測試的第一個元素。</returns>
      <param name="source">要傳回第一個元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">沒有任何項目符合 <paramref name="predicate" /> 中的條件。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>非同步傳回序列的第一個元素。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <paramref name="source" /> 中的第一個元素。</returns>
      <param name="source">要傳回第一個元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">來源序列為空白。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0})">
      <summary>非同步傳回序列的第一個元素，如果序列未包含任何元素，則傳回預設值。</summary>
      <returns>表示非同步作業的工作。如果 <paramref name="source" /> 是空的，則工作結果包含 default (<paramref name="TSource" />)，否則為 <paramref name="source" /> 中的第一個元素。</returns>
      <param name="source">要傳回第一個元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>非同步傳回序列中符合指定之條件的第一個元素，如果找不到這類元素，則傳回預設值。</summary>
      <returns>表示非同步作業的工作。如果 <paramref name="source" /> 為空白，或是沒有任何元素通過 <paramref name="predicate" /> 所指定的測試，則表示工作結果包含 default (<paramref name="TSource" />)；否則會是 <paramref name="source" /> 中通過 <paramref name="predicate" /> 所指定之測試的第一個元素。</returns>
      <param name="source">要傳回第一個元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>非同步傳回序列中符合指定之條件的第一個元素，如果找不到這類元素，則傳回預設值。</summary>
      <returns>表示非同步作業的工作。如果 <paramref name="source" /> 為空白，或是沒有任何元素通過 <paramref name="predicate" /> 所指定的測試，則表示工作結果包含 default (<paramref name="TSource" />)；否則會是 <paramref name="source" /> 中通過 <paramref name="predicate" /> 所指定之測試的第一個元素。</returns>
      <param name="source">要傳回第一個元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 具有多個元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>非同步傳回序列的第一個元素，如果序列未包含任何元素，則傳回預設值。</summary>
      <returns>表示非同步作業的工作。如果 <paramref name="source" /> 是空的，則工作結果包含 default (<paramref name="TSource" />)，否則為 <paramref name="source" /> 中的第一個元素。</returns>
      <param name="source">要傳回第一個元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object})">
      <summary>非同步列舉查詢結果，並針對每個項目執行指定動作。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="source">要列舉的 <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="action">要在每一個項目上執行的動作。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object},System.Threading.CancellationToken)">
      <summary>非同步列舉查詢結果，並針對每個項目執行指定動作。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="source">要列舉的 <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="action">要在每一個項目上執行的動作。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0})">
      <summary>非同步列舉查詢結果，並針對每個項目執行指定動作。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="source">要列舉的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="action">要在每一個項目上執行的動作。</param>
      <typeparam name="T">
        <paramref name="source" /> 之元素的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)">
      <summary>非同步列舉查詢結果，並針對每個項目執行指定動作。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="source">要列舉的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="action">要在每一個項目上執行的動作。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="T">
        <paramref name="source" /> 之元素的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include(System.Linq.IQueryable,System.String)">
      <summary>指定要包含在查詢結果中的相關物件。</summary>
      <returns>含有已定義之查詢路徑的新 <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="source">呼叫 Include 所在的來源 <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="path">要在查詢結果中傳回的相關物件清單 (以點分隔)。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>指定要包含在查詢結果中的相關物件。</summary>
      <returns>新的 IQueryable&amp;lt;T&amp;gt;，包含定義的查詢路徑。</returns>
      <param name="source">呼叫 Include 所在的來源 IQueryable。</param>
      <param name="path">Lambda 運算式，表示要包含的路徑。</param>
      <typeparam name="T">正在查詢之實體的類型。</typeparam>
      <typeparam name="TProperty">所包含之導覽屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
      <summary>指定要包含在查詢結果中的相關物件。</summary>
      <returns>含有已定義之查詢路徑的新 <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">呼叫 Include 所在的來源 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="path">要在查詢結果中傳回的相關物件清單 (以點分隔)。</param>
      <typeparam name="T">正在查詢之實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Load(System.Linq.IQueryable)">
      <summary>列舉查詢，這樣一來，針對類似 <see cref="T:System.Data.Entity.DbSet`1" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 和其他的伺服器查詢而言，查詢結果將會載入相關聯的 <see cref="T:System.Data.Entity.DbContext" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 或用戶端的其他快取中。這相當於呼叫 ToList 然後捨棄此清單，而沒有實際建立此清單的負荷。</summary>
      <param name="source">來源查詢。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable)">
      <summary>非同步列舉查詢，這樣一來，針對類似 <see cref="T:System.Data.Entity.DbSet`1" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 和其他的伺服器查詢而言，查詢結果將會載入相關聯的 <see cref="T:System.Data.Entity.DbContext" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 或用戶端的其他快取中。這相當於呼叫 ToList 然後捨棄此清單，而沒有實際建立此清單的負荷。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="source">來源查詢。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
      <summary>非同步列舉查詢，這樣一來，針對類似 <see cref="T:System.Data.Entity.DbSet`1" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 和其他的伺服器查詢而言，查詢結果將會載入相關聯的 <see cref="T:System.Data.Entity.DbContext" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 或用戶端的其他快取中。這相當於呼叫 ToList 然後捨棄此清單，而沒有實際建立此清單的負荷。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="source">來源查詢。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0})">
      <summary>非同步傳回 <see cref="T:System.Int64" />，表示序列中的元素總數。</summary>
      <returns>表示非同步作業的工作。工作結果包含輸入序列中的元素數。</returns>
      <param name="source">包含要計算之元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>非同步傳回 <see cref="T:System.Int64" />，表示序列中符合條件的元素數。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中符合述詞函式之條件的元素數。</returns>
      <param name="source">包含要計算之元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中符合述詞函式之條件的元素數大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>非同步傳回 <see cref="T:System.Int64" />，表示序列中符合條件的元素數。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中符合述詞函式之條件的元素數。</returns>
      <param name="source">包含要計算之元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中符合述詞函式之條件的元素數大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>非同步傳回 <see cref="T:System.Int64" />，表示序列中的元素總數。</summary>
      <returns>表示非同步作業的工作。工作結果包含輸入序列中的元素數。</returns>
      <param name="source">包含要計算之元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0})">
      <summary>非同步傳回序列的最大值。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中的最大值。</returns>
      <param name="source">包含可判斷其最大值之元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>對序列的每個元素非同步叫用投影函式，並傳回最大的結果值。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中的最大值。</returns>
      <param name="source">包含可判斷其最大值之元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 表示之函式所傳回值的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
      <summary>對序列的每個元素非同步叫用投影函式，並傳回最大的結果值。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中的最大值。</returns>
      <param name="source">包含可判斷其最大值之元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 表示之函式所傳回值的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>非同步傳回序列的最大值。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中的最大值。</returns>
      <param name="source">包含可判斷其最大值之元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0})">
      <summary>非同步傳回序列的最小值。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中的最小值。</returns>
      <param name="source">包含可判斷其最小值之元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>對序列的每個元素非同步叫用投影函式，並傳回最小的結果值。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中的最小值。</returns>
      <param name="source">包含可判斷其最小值之元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 表示之函式所傳回值的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
      <summary>對序列的每個元素非同步叫用投影函式，並傳回最小的結果值。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中的最小值。</returns>
      <param name="source">包含可判斷其最小值之元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 表示之函式所傳回值的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>非同步傳回序列的最小值。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中的最小值。</returns>
      <param name="source">包含可判斷其最小值之元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0})">
      <summary>非同步傳回序列的唯一一個元素，如果序列中不是正好一個元素，則擲回例外狀況。</summary>
      <returns>表示非同步作業的工作。工作結果包含輸入序列的單一元素。</returns>
      <param name="source">要傳回單一元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">來源序列為空白。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>非同步傳回序列中符合指定條件的唯一一個元素，如果有一個以上這類元素，則擲回例外狀況。</summary>
      <returns>表示非同步作業的工作。工作結果包含輸入序列中符合 <paramref name="predicate" /> 中條件的單一元素。</returns>
      <param name="source">要傳回單一元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試元素是否符合某個條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">沒有任何項目符合 <paramref name="predicate" /> 中的條件。</exception>
      <exception cref="T:System.InvalidOperationException">超過一個項目符合 <paramref name="predicate" /> 中的條件。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>非同步傳回序列中符合指定條件的唯一一個元素，如果有一個以上這類元素，則擲回例外狀況。</summary>
      <returns>表示非同步作業的工作。工作結果包含輸入序列中符合 <paramref name="predicate" /> 中條件的單一元素。</returns>
      <param name="source">要傳回單一元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試元素是否符合某個條件的函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">沒有任何項目符合 <paramref name="predicate" /> 中的條件。</exception>
      <exception cref="T:System.InvalidOperationException">超過一個項目符合 <paramref name="predicate" /> 中的條件。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>非同步傳回序列的唯一一個元素，如果序列中不是正好一個元素，則擲回例外狀況。</summary>
      <returns>表示非同步作業的工作。工作結果包含輸入序列的單一元素。</returns>
      <param name="source">要傳回單一元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 具有多個元素。</exception>
      <exception cref="T:System.InvalidOperationException">來源序列為空白。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0})">
      <summary>非同步傳回序列的唯一一個項目，如果序列是空白，則為預設值，如果序列中有一個以上的項目，此方法就會擲回例外狀況。</summary>
      <returns>表示非同步作業的工作。工作結果包含輸入序列的單一元素，如果序列沒有包含任何元素，則為 default (<paramref name="TSource" />)。</returns>
      <param name="source">要傳回單一元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 具有多個元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>非同步傳回序列中符合指定之條件的唯一一個元素，如果沒有這類元素，則為預設值，如果有一個以上的元素符合條件，此方法就會擲回例外狀況。</summary>
      <returns>表示非同步作業的工作。工作結果包含輸入序列中滿足 <paramref name="predicate" /> 中條件的單一元素，如果找不到這類元素，則為 default (<paramref name="TSource" />)。</returns>
      <param name="source">要傳回單一元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試元素是否符合某個條件的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>非同步傳回序列中符合指定之條件的唯一一個元素，如果沒有這類元素，則為預設值，如果有一個以上的元素符合條件，此方法就會擲回例外狀況。</summary>
      <returns>表示非同步作業的工作。工作結果包含輸入序列中滿足 <paramref name="predicate" /> 中條件的單一元素，如果找不到這類元素，則為 default (<paramref name="TSource" />)。</returns>
      <param name="source">要傳回單一元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用來測試元素是否符合某個條件的函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>非同步傳回序列的唯一一個項目，如果序列是空白，則為預設值，如果序列中有一個以上的項目，此方法就會擲回例外狀況。</summary>
      <returns>表示非同步作業的工作。工作結果包含輸入序列的單一元素，如果序列沒有包含任何元素，則為 default (<paramref name="TSource" />)。</returns>
      <param name="source">要傳回單一元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 具有多個元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Skip``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
      <summary>略過序列中指定的元素數，然後傳回其餘元素。</summary>
      <returns>序列，其中包含出現在輸入序列中指定之索引處後面的元素。</returns>
      <param name="source">傳回元素的來源序列。</param>
      <param name="countAccessor">判斷值為要略過之元素數目的運算式。</param>
      <typeparam name="TSource">來源之元素的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal})">
      <summary>非同步計算 <see cref="T:System.Decimal" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中值的加總。</returns>
      <param name="source">要計算加總的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
      <summary>非同步計算 <see cref="T:System.Decimal" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中值的加總。</returns>
      <param name="source">要計算加總的 <see cref="T:System.Decimal" /> 值序列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double})">
      <summary>非同步計算 <see cref="T:System.Double" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中值的加總。</returns>
      <param name="source">要計算加總的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
      <summary>非同步計算 <see cref="T:System.Double" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中值的加總。</returns>
      <param name="source">要計算加總的 <see cref="T:System.Double" /> 值序列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32})">
      <summary>非同步計算 <see cref="T:System.Int32" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中值的加總。</returns>
      <param name="source">要計算加總的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
      <summary>非同步計算 <see cref="T:System.Int32" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中值的加總。</returns>
      <param name="source">要計算加總的 <see cref="T:System.Int32" /> 值序列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64})">
      <summary>非同步計算 <see cref="T:System.Int64" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中值的加總。</returns>
      <param name="source">要計算加總的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
      <summary>非同步計算 <see cref="T:System.Int64" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中值的加總。</returns>
      <param name="source">要計算加總的 <see cref="T:System.Int64" /> 值序列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>非同步計算可為 Null 之 <see cref="T:System.Decimal" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中值的加總。</returns>
      <param name="source">要計算加總之可為 Null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
      <summary>非同步計算可為 Null 之 <see cref="T:System.Decimal" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中值的加總。</returns>
      <param name="source">要計算加總之可為 Null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>非同步計算可為 Null 之 <see cref="T:System.Double" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中值的加總。</returns>
      <param name="source">要計算加總之可為 Null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
      <summary>非同步計算可為 Null 之 <see cref="T:System.Double" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中值的加總。</returns>
      <param name="source">要計算加總之可為 Null 的 <see cref="T:System.Double" /> 值序列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>非同步計算可為 Null 之 <see cref="T:System.Int32" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中值的加總。</returns>
      <param name="source">要計算加總之可為 Null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
      <summary>非同步計算可為 Null 之 <see cref="T:System.Int32" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中值的加總。</returns>
      <param name="source">要計算加總之可為 Null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>非同步計算可為 Null 之 <see cref="T:System.Int64" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中值的加總。</returns>
      <param name="source">要計算加總之可為 Null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
      <summary>非同步計算可為 Null 之 <see cref="T:System.Int64" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中值的加總。</returns>
      <param name="source">要計算加總之可為 Null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>非同步計算可為 Null 之 <see cref="T:System.Single" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中值的加總。</returns>
      <param name="source">要計算加總之可為 Null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
      <summary>非同步計算可為 Null 之 <see cref="T:System.Single" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中值的加總。</returns>
      <param name="source">要計算加總之可為 Null 的 <see cref="T:System.Single" /> 值序列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single})">
      <summary>非同步計算 <see cref="T:System.Single" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中值的加總。</returns>
      <param name="source">要計算加總的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
      <summary>非同步計算 <see cref="T:System.Single" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含序列中值的加總。</returns>
      <param name="source">要計算加總的 <see cref="T:System.Single" /> 值序列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Decimal" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含投影值的加總。</returns>
      <param name="source">類型 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Decimal" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含投影值的加總。</returns>
      <param name="source">類型 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Double" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含投影值的加總。</returns>
      <param name="source">類型 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Double" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含投影值的加總。</returns>
      <param name="source">類型 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Int32" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含投影值的加總。</returns>
      <param name="source">類型 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Int32" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含投影值的加總。</returns>
      <param name="source">類型 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Int64" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含投影值的加總。</returns>
      <param name="source">類型 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Int64" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含投影值的加總。</returns>
      <param name="source">類型 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之可為 Null 之 <see cref="T:System.Decimal" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含投影值的加總。</returns>
      <param name="source">類型 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之可為 Null 之 <see cref="T:System.Decimal" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含投影值的加總。</returns>
      <param name="source">類型 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之可為 Null 之 <see cref="T:System.Double" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含投影值的加總。</returns>
      <param name="source">類型 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之可為 Null 之 <see cref="T:System.Double" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含投影值的加總。</returns>
      <param name="source">類型 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之可為 Null 之 <see cref="T:System.Int32" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含投影值的加總。</returns>
      <param name="source">類型 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之可為 Null 之 <see cref="T:System.Int32" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含投影值的加總。</returns>
      <param name="source">類型 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之可為 Null 之 <see cref="T:System.Int64" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含投影值的加總。</returns>
      <param name="source">類型 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之可為 Null 之 <see cref="T:System.Int64" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含投影值的加總。</returns>
      <param name="source">類型 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素數目大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之可為 Null 之 <see cref="T:System.Single" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含投影值的加總。</returns>
      <param name="source">類型 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之可為 Null 之 <see cref="T:System.Single" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含投影值的加總。</returns>
      <param name="source">類型 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Single" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含投影值的加總。</returns>
      <param name="source">類型 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
      <summary>非同步計算在輸入序列中各元素上叫用投影函式後所取得之 <see cref="T:System.Single" /> 值序列的加總。</summary>
      <returns>表示非同步作業的工作。工作結果包含投影值的加總。</returns>
      <param name="source">類型 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要套用到每個元素的投影函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不會實作 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
      <summary>從序列開頭傳回指定的連續元素數。</summary>
      <returns>序列，其中包含輸入序列開頭處指定的元素數目。</returns>
      <param name="source">傳回元素的來源序列。</param>
      <param name="countAccessor">判斷值為要傳回之元素數目的運算式。</param>
      <typeparam name="TSource">來源之元素的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0})">
      <summary>透過以非同步方式列舉從 <see cref="T:System.Linq.IQueryable`1" /> 建立陣列。</summary>
      <returns>表示非同步作業的工作。工作結果會包含陣列，該陣列包含輸入序列中的項目。</returns>
      <param name="source">用來建立陣列的來源 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>透過以非同步方式列舉從 <see cref="T:System.Linq.IQueryable`1" /> 建立陣列。</summary>
      <returns>表示非同步作業的工作。工作結果會包含陣列，該陣列包含輸入序列中的項目。</returns>
      <param name="source">用來建立陣列的來源 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1})">
      <summary>根據指定的索引鍵選取器函式，透過以非同步方式列舉的方式從 <see cref="T:System.Linq.IQueryable`1" /> 建立 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <see cref="T:System.Collections.Generic.Dictionary`2" />，其包含選取的索引鍵和值。</returns>
      <param name="source">用來建立 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的來源 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用來從各個項目擷取索引鍵的函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 傳回之索引鍵的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根據指定的索引鍵選取器函式和比較子，透過以非同步方式列舉從 <see cref="T:System.Linq.IQueryable`1" /> 建立 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <see cref="T:System.Collections.Generic.Dictionary`2" />，其包含選取的索引鍵和值。</returns>
      <param name="source">用來建立 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的來源 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用來從各個項目擷取索引鍵的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 傳回之索引鍵的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
      <summary>根據指定的索引鍵選取器函式和比較子，透過以非同步方式列舉從 <see cref="T:System.Linq.IQueryable`1" /> 建立 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <see cref="T:System.Collections.Generic.Dictionary`2" />，其包含選取的索引鍵和值。</returns>
      <param name="source">用來建立 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的來源 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用來從各個項目擷取索引鍵的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 傳回之索引鍵的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>根據指定的索引鍵選取器以及元素選取器函式，透過以非同步方式列舉從 <see cref="T:System.Linq.IQueryable`1" /> 建立 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <see cref="T:System.Collections.Generic.Dictionary`2" />，其包含從輸入序列中選取的類型 <paramref name="TElement" /> 的值。</returns>
      <param name="source">用來建立 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的來源 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用來從各個項目擷取索引鍵的函式。</param>
      <param name="elementSelector">用來從每個項目產生結果項目值的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 傳回之索引鍵的類型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根據指定的索引鍵選取器函式、比較子和元素選取器函式，透過以非同步方式列舉從 <see cref="T:System.Linq.IQueryable`1" /> 建立 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <see cref="T:System.Collections.Generic.Dictionary`2" />，其包含從輸入序列中選取的類型 <paramref name="TElement" /> 的值。</returns>
      <param name="source">用來建立 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的來源 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用來從各個項目擷取索引鍵的函式。</param>
      <param name="elementSelector">用來從每個項目產生結果項目值的轉換函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 傳回之索引鍵的類型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
      <summary>根據指定的索引鍵選取器函式、比較子和元素選取器函式，透過以非同步方式列舉從 <see cref="T:System.Linq.IQueryable`1" /> 建立 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <see cref="T:System.Collections.Generic.Dictionary`2" />，其包含從輸入序列中選取的類型 <paramref name="TElement" /> 的值。</returns>
      <param name="source">用來建立 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的來源 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用來從各個項目擷取索引鍵的函式。</param>
      <param name="elementSelector">用來從每個項目產生結果項目值的轉換函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 傳回之索引鍵的類型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
      <summary>根據指定的索引鍵選取器以及元素選取器函式，透過以非同步方式列舉從 <see cref="T:System.Linq.IQueryable`1" /> 建立 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <see cref="T:System.Collections.Generic.Dictionary`2" />，其包含從輸入序列中選取的類型 <paramref name="TElement" /> 的值。</returns>
      <param name="source">用來建立 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的來源 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用來從各個項目擷取索引鍵的函式。</param>
      <param name="elementSelector">用來從每個項目產生結果項目值的轉換函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 傳回之索引鍵的類型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
      <summary>根據指定的索引鍵選取器函式，透過以非同步方式列舉的方式從 <see cref="T:System.Linq.IQueryable`1" /> 建立 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <see cref="T:System.Collections.Generic.Dictionary`2" />，其包含選取的索引鍵和值。</returns>
      <param name="source">用來建立 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的來源 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用來從各個項目擷取索引鍵的函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 傳回之索引鍵的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable)">
      <summary>透過以非同步方式列舉從 <see cref="T:System.Linq.IQueryable" /> 建立 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>表示非同步作業的工作。工作結果會包含 <see cref="T:System.Collections.Generic.List`1" />，其包含輸入序列中的項目。</returns>
      <param name="source">用來建立 <see cref="T:System.Collections.Generic.List`1" /> 的來源 <see cref="T:System.Linq.IQueryable" />。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
      <summary>透過以非同步方式列舉從 <see cref="T:System.Linq.IQueryable" /> 建立 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>表示非同步作業的工作。工作結果會包含 <see cref="T:System.Collections.Generic.List`1" />，其包含輸入序列中的項目。</returns>
      <param name="source">用來建立 <see cref="T:System.Collections.Generic.List`1" /> 的來源 <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0})">
      <summary>透過以非同步方式列舉從 <see cref="T:System.Linq.IQueryable`1" /> 建立 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>表示非同步作業的工作。工作結果會包含 <see cref="T:System.Collections.Generic.List`1" />，其包含輸入序列中的項目。</returns>
      <param name="source">用來建立 <see cref="T:System.Collections.Generic.List`1" /> 的來源 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>透過以非同步方式列舉從 <see cref="T:System.Linq.IQueryable`1" /> 建立 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>表示非同步作業的工作。工作結果會包含 <see cref="T:System.Collections.Generic.List`1" />，其包含輸入序列中的項目。</returns>
      <param name="source">用來建立清單的來源 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 之元素的類型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.TransactionalBehavior">
      <summary>控制在執行資料庫命令或查詢時的交易建立行為。</summary>
    </member>
    <member name="F:System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction">
      <summary>如果出現現有的交易，便會使用它，否則會在沒有交易的情況下執行命令或查詢。</summary>
    </member>
    <member name="F:System.Data.Entity.TransactionalBehavior.EnsureTransaction">
      <summary>如果未出現交易，則會將新的交易用於作業。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntityCommandCompilationException">
      <summary>表示嘗試準備或執行 CommandCompilation 時失敗了。此例外狀況的用意在於提供可讓人攔截的通用例外狀況，以便在使用 EntityCommand 執行陳述式時保存提供者例外狀況 (SqlException、OracleException)。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" /> 的新執行個體 (無訊息，也無內部例外狀況)。可能不應該存在，不過，FxCop 可能需要它。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" /> 的新執行個體 (有訊息，但無內部例外狀況)。可能不應該存在，不過，FxCop 可能需要它。</summary>
      <param name="message">訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" /> 的新執行個體 (附有訊息以及內部例外狀況執行個體)。</summary>
      <param name="message">訊息。</param>
      <param name="innerException">內部例外狀況。</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityCommandExecutionException">
      <summary>表示嘗試準備或執行 CommandExecution 時失敗了。此例外狀況的用意在於提供可讓人攔截的通用例外狀況，以便在使用 EntityCommand 執行陳述式時保存提供者例外狀況 (SqlException、OracleException)。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor">
      <summary>初始化 EntityCommandExecutionException 的新執行個體 (無訊息，也無內部例外狀況)。可能不應該存在，不過，FxCop 可能需要它。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor(System.String)">
      <summary>初始化 EntityCommandExecutionException 的新執行個體 (有訊息，但無內部例外狀況)。可能不應該存在，不過，FxCop 可能需要它。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor(System.String,System.Exception)">
      <summary>初始化 EntityCommandExecutionException 的新執行個體 (附有訊息以及內部例外狀況執行個體)。</summary>
      <param name="message">描述錯誤的訊息。</param>
      <param name="innerException">造成此目前例外狀況的內部例外狀況。</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityException">
      <summary>提供實體用戶端所使用的例外狀況。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor">
      <summary>使用預設值，初始化 <see cref="T:System.Data.Entity.Core.EntityException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.EntityException" /> 類別的新執行個體。</summary>
      <param name="info">序列化資訊。</param>
      <param name="context">資料流內容。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.EntityException" /> 類別的新執行個體，其可接受預先格式化的訊息。</summary>
      <param name="message">當地語系化的錯誤訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.EntityException" /> 類別的新執行個體，其可接受預先格式化的訊息和內部例外狀況。</summary>
      <param name="message">當地語系化的錯誤訊息。</param>
      <param name="innerException">內部例外狀況。</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityKey">
      <summary>表示實體的識別項。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.EntityKey" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>使用給定的索引鍵值，初始化 <see cref="T:System.Data.Entity.Core.EntityKey" /> 類別的新執行個體。</summary>
      <param name="qualifiedEntitySetName">由 EntityContainer 名稱限定的實體 EntitySet 名稱。</param>
      <param name="entityKeyValues">可識別實體的索引鍵值組。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.EntityKeyMember})">
      <summary>使用給定的索引鍵值，初始化 <see cref="T:System.Data.Entity.Core.EntityKey" /> 類別的新執行個體。</summary>
      <param name="qualifiedEntitySetName">由 EntityContainer 名稱限定的實體 EntitySet 名稱。</param>
      <param name="entityKeyValues">可識別實體的索引鍵值組。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.String,System.Object)">
      <summary>使用給定的單一索引鍵名稱和值，初始化 <see cref="T:System.Data.Entity.Core.EntityKey" /> 類別的新執行個體。</summary>
      <param name="qualifiedEntitySetName">由 EntityContainer 名稱限定的實體 EntitySet 名稱。</param>
      <param name="keyName">識別此實體的索引鍵名稱。</param>
      <param name="keyValue">識別此實體的索引鍵值。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityContainerName">
      <summary>取得或設定 EntityContainer 名稱，識別包含實體的實體容器。</summary>
      <returns>EntityContainer 名稱，用於識別包含實體的實體容器。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityKeyValues">
      <summary>取得或設定可識別實體的索引鍵值。</summary>
      <returns>可識別實體的索引鍵值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityNotValidKey">
      <summary>取得單一 <see cref="T:System.Data.Entity.Core.EntityKey" />，識別失敗 TREAT 所產生的實體。</summary>
      <returns>單一 <see cref="T:System.Data.Entity.Core.EntityKey" />，可用於識別失敗 TREAT 所產生的實體。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntitySetName">
      <summary>取得或設定 EntitySet 名稱，識別包含實體的實體集。</summary>
      <returns>EntitySet 名稱，用於識別包含實體的實體集。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.Equals(System.Data.Entity.Core.EntityKey)">
      <summary>表示一個值，指出此執行個體是否與指定的索引鍵相等。</summary>
      <returns>如果此執行個體等於指定的索引鍵則為 true，否則為 false。</returns>
      <param name="other">要和此執行個體相比較的索引鍵。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.Equals(System.Object)">
      <summary>表示一個值，指出此執行個體是否與指定的索引鍵相等。</summary>
      <returns>如果此執行個體等於指定的索引鍵則為 true，否則為 false。</returns>
      <param name="obj">要和此執行個體相比較的索引鍵。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.GetEntitySet(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>從指定的中繼資料工作空間取得此實體索引鍵的實體集 (藉由實體容器名稱和實體集名稱)。</summary>
      <returns>此實體索引鍵的實體集 (取自指定的工作空間)。</returns>
      <param name="metadataWorkspace">要在其中查詢實體集的工作空間。</param>
      <exception cref="T:System.ArgumentException">在此工作空間中找不到此實體集。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.GetHashCode">
      <summary>傳回以值為基礎的雜湊碼，以允許在雜湊資料表中使用 EntityKey。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的雜湊值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.IsTemporary">
      <summary>取得值，表示此索引鍵是否為暫存索引鍵。</summary>
      <returns>如果此索引鍵是暫存索引鍵，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.NoEntitySetKey">
      <summary>取得單一 <see cref="T:System.Data.Entity.Core.EntityKey" />，可用於識別唯讀實體。</summary>
      <returns>單一 <see cref="T:System.Data.Entity.Core.EntityKey" />，可用於識別唯讀實體。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>在此 <see cref="T:System.Data.Entity.Core.EntityKey" /> 還原序列化之後呼叫。</summary>
      <param name="context">序列化的內容。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
      <summary>在此 <see cref="T:System.Data.Entity.Core.EntityKey" /> 還原序列化之後呼叫。</summary>
      <param name="context">序列化的內容。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.op_Equality(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.EntityKey)">
      <summary>表示一個值，指出兩個索引鍵是否相等。</summary>
      <returns>如果兩個索引鍵相等，則為 true，否則為 false。</returns>
      <param name="key1">要比較的索引鍵。</param>
      <param name="key2">要比較的索引鍵。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.op_Inequality(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.EntityKey)">
      <summary>表示一個值，指出兩個索引鍵是否不相等。</summary>
      <returns>如果兩個索引鍵不相等，則為 true，否則為 false。</returns>
      <param name="key1">要比較的索引鍵。</param>
      <param name="key2">要比較的索引鍵。</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityKeyMember">
      <summary>屬於 EntityKey 一部分之索引鍵的相關資訊。索引鍵成員包含索引鍵名稱和值。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.#ctor">
      <summary>建立空的 EntityKeyMember。序列化 (Serialization) 會使用此建構函式。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.#ctor(System.String,System.Object)">
      <summary>     使用指定的索引鍵名稱和值，建立新的 EntityKeyMember。</summary>
      <param name="keyName"> 索引鍵名稱</param>
      <param name="keyValue"> 索引鍵值</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKeyMember.Key">
      <summary>     索引鍵名稱</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.ToString">
      <summary>     傳回 EntityKeyMember 的字串表示</summary>
      <returns> EntityKeyMember 的字串表示法 </returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKeyMember.Value">
      <summary>     索引鍵值</summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntitySqlException">
      <summary>表示 eSQL 查詢編譯例外狀況。可能會引發此例外狀況的例外條件類別主要是：1) 語法錯誤：在查詢文字剖析期間，以及當給定查詢不符合 eSQL 正式文法時便會引發；     2) 語意錯誤：不符合 eSQL 語言的語意規則時 (例如中繼資料或結構描述資訊不正確或不存在、類型驗證錯誤、範圍設定規則違規、未定義變數的使用者等等) 便會引發。如需詳細資訊，請參閱 eSQL 語言規格。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor">
      <summary>使用泛型錯誤訊息，初始化 <see cref="T:System.Data.Entity.Core.EntitySqlException" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor(System.String)">
      <summary>使用指定的訊息初始化 <see cref="T:System.Data.Entity.Core.EntitySqlException" /> 的新執行個體。</summary>
      <param name="message">錯誤訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor(System.String,System.Exception)">
      <summary>使用指定的訊息和 innerException 執行個體初始化 <see cref="T:System.Data.Entity.Core.EntitySqlException" /> 的新執行個體。</summary>
      <param name="message">錯誤訊息。</param>
      <param name="innerException">內部例外狀況。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.Column">
      <summary>取得發生錯誤的大約資料行編號。</summary>
      <returns>發生錯誤的大約資料行編號。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.ErrorContext">
      <summary>取得發生錯誤的大約內容 (如果有的話)。</summary>
      <returns>發生錯誤的大約內容 (如果有的話)。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.ErrorDescription">
      <summary>取得錯誤描述，說明造成無法接受查詢或空白 String.Empty 的原因</summary>
      <returns>錯誤描述，說明造成無法接受查詢或空白 String.Empty 的原因。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.Line">
      <summary>取得發生錯誤的大約行號</summary>
      <returns>發生錯誤的大約行號。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.IExtendedDataRecord">
      <summary>提供支援結構化類型和豐富中繼資料資訊的 DataRecord 介面。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.IExtendedDataRecord.DataRecordInfo">
      <summary>取得描述記錄內容的 DataRecordInfo 屬性。</summary>
      <returns>描述記錄內容的 DataRecordInfo 屬性。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.IExtendedDataRecord.GetDataReader(System.Int32)">
      <summary>傳回巢狀讀取器做為 DbDataReader 物件。</summary>
      <returns>巢狀讀取器做為 DbDataReader 物件。</returns>
      <param name="i">資料行的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.IExtendedDataRecord.GetDataRecord(System.Int32)">
      <summary>取得具有指定索引的 DbDataRecord 物件。</summary>
      <returns>DbDataRecord 物件。</returns>
      <param name="i">資料列的索引。</param>
    </member>
    <member name="T:System.Data.Entity.Core.InvalidCommandTreeException">
      <summary>     擲回以表示命令樹無效。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor">
      <summary>     使用預設訊息建構新的 InvalidCommandTreeException。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor(System.String)">
      <summary>     使用指定的訊息建構新的 InvalidCommandTreeException。</summary>
      <param name="message"> 例外狀況訊息</param>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor(System.String,System.Exception)">
      <summary>     使用指定的訊息和內部例外狀況建構新的 InvalidCommandTreeException。</summary>
      <param name="message"> 例外狀況訊息。</param>
      <param name="innerException"> 造成此 InvalidCommandTreeException 的例外狀況。 </param>
    </member>
    <member name="T:System.Data.Entity.Core.MappingException">
      <summary>對應例外狀況類別。請注意，此類別有狀態，所以如果您甚至變更其內部項目時，這可能是中斷變更</summary>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor">
      <summary>     使用預設訊息的建構函式</summary>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor(System.String)">
      <summary>     預設建構函式</summary>
      <param name="message"> 當地語系化的錯誤訊息</param>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor(System.String,System.Exception)">
      <summary>     建構函式</summary>
      <param name="message"> 當地語系化的錯誤訊息</param>
      <param name="innerException"> 內部例外狀況 </param>
    </member>
    <member name="T:System.Data.Entity.Core.MetadataException">
      <summary>     中繼資料例外狀況類別</summary>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor">
      <summary>     使用預設訊息的建構函式</summary>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor(System.String)">
      <summary>     預設建構函式</summary>
      <param name="message"> 當地語系化的錯誤訊息</param>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor(System.String,System.Exception)">
      <summary>     建構函式</summary>
      <param name="message"> 當地語系化的錯誤訊息</param>
      <param name="innerException"> 內部例外狀況 </param>
    </member>
    <member name="T:System.Data.Entity.Core.ObjectNotFoundException">
      <summary>在存放區中找不到要求的物件時，就會擲回此例外狀況。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">當地語系化的錯誤訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" /> 類別的新執行個體以及採用訊息和內部例外狀況的建構函式。</summary>
      <param name="message">當地語系化的錯誤訊息。</param>
      <param name="innerException">內部例外狀況。</param>
    </member>
    <member name="T:System.Data.Entity.Core.OptimisticConcurrencyException">
      <summary>當更新作業違反並行條件約束時，就會擲回此例外狀況。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor">
      <summary>使用預設值，初始化 <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String)">
      <summary>使用指定的訊息，初始化 <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> 類別的新執行個體。</summary>
      <param name="message">與例外狀況關聯的訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>使用指定的訊息和內部例外狀況，初始化 <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> 類別的新執行個體。</summary>
      <param name="message">與例外狀況關聯的訊息。</param>
      <param name="innerException">導致例外狀況的錯誤。</param>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Objects.ObjectStateEntry})">
      <summary>使用指定的訊息和內部例外狀況，初始化 <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> 類別的新執行個體。</summary>
      <param name="message">訊息。</param>
      <param name="innerException">導致例外狀況的錯誤。</param>
      <param name="stateEntries">狀態項目。</param>
    </member>
    <member name="T:System.Data.Entity.Core.PropertyConstraintException">
      <summary>表示屬性條件約束例外狀況類別。請注意，此類別有狀態，所以如果您甚至變更其內部項目時，這可能是中斷變更。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> 類別的新執行個體。</summary>
      <param name="message">當地語系化的錯誤訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.Exception)">
      <summary>使用所提供的訊息和內部例外狀況，初始化 <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> 類別的新執行個體</summary>
      <param name="message">當地語系化的錯誤訊息。</param>
      <param name="innerException">內部例外狀況。</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> 類別的新執行個體。</summary>
      <param name="message">當地語系化的錯誤訊息。</param>
      <param name="propertyName">屬性名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> 類別的新執行個體。</summary>
      <param name="message">當地語系化的錯誤訊息。</param>
      <param name="propertyName">屬性名稱。</param>
      <param name="innerException">內部例外狀況。</param>
    </member>
    <member name="P:System.Data.Entity.Core.PropertyConstraintException.PropertyName">
      <summary>取得違反條件約束之屬性的名稱。</summary>
      <returns>違反條件約束之屬性的名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.ProviderIncompatibleException">
      <summary>當存放區提供者出現不相容於實體用戶端提供者的行為時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" /> 類別的新執行個體。</summary>
      <param name="message">描述例外狀況的錯誤訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和內部例外狀況，初始化 <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" /> 類別的新執行個體。</summary>
      <param name="message">描述例外狀況的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的內部例外狀況。</param>
    </member>
    <member name="T:System.Data.Entity.Core.UpdateException">
      <summary>無法更新將變更儲存至存放區期間所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor">
      <summary>使用預設值，初始化 <see cref="T:System.Data.Entity.Core.UpdateException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Data.Entity.Core.UpdateException" /> 類別的新執行個體。</summary>
      <param name="info">保存有關例外狀況之序列化資訊的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.UpdateException" /> 類別的新執行個體 (有錯誤訊息)。</summary>
      <param name="message">描述例外狀況的錯誤訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.UpdateException" /> 類別的新執行個體 (有錯誤訊息和內部例外狀況)。</summary>
      <param name="message">描述例外狀況的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的內部例外狀況。</param>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Objects.ObjectStateEntry})">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.UpdateException" /> 類別的新執行個體 (有錯誤訊息、內部例外狀況和狀態項目)。</summary>
      <param name="message">描述例外狀況的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的內部例外狀況。</param>
      <param name="stateEntries">錯誤中牽涉的狀態項目。</param>
    </member>
    <member name="P:System.Data.Entity.Core.UpdateException.StateEntries">
      <summary>錯誤中牽涉的狀態項目。</summary>
      <returns>錯誤中牽涉的狀態項目。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DataRecordInfo">
      <summary>DataRecordInfo 類別，提供簡單的方式存取類型資訊和資料行資訊。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DataRecordInfo.#ctor(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember})">
      <summary>針對具有可列舉資料欄位集合的特定類型，初始化一個新 <see cref="T:System.Data.Common.DbDataRecord" /> 物件。</summary>
      <param name="metadata">此物件所表示類型的中繼資料，由 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 提供。</param>
      <param name="memberInfo">表示資料行資訊之 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" /> 物件的可列舉集合。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DataRecordInfo.FieldMetadata">
      <summary>取得此 <see cref="P:System.Data.Entity.Core.IExtendedDataRecord.DataRecordInfo" /> 物件的 <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> 物件。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DataRecordInfo.RecordType">
      <summary>取得此物件的類型資訊當做 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbCommandDefinition">
      <summary>表示備製命令定義，可以快取並重複使用以避免重新備製命令。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinition" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.#ctor(System.Data.Common.DbCommand,System.Func{System.Data.Common.DbCommand,System.Data.Common.DbCommand})">
      <summary>使用提供的 <see cref="T:System.Data.Common.DbCommand" />，初始化 <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinition" /> 類別的新執行個體。</summary>
      <param name="prototype">提供的 <see cref="T:System.Data.Common.DbCommand" />。</param>
      <param name="cloneMethod">用於複製 <see cref="T:System.Data.Common.DbCommand" /> 的方法</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.CreateCommand">
      <summary>建立並傳回可執行的 DbCommand 物件。</summary>
      <returns>資料庫的命令。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbProviderManifest">
      <summary>所有 CLR 類型的中繼資料介面</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.DbProviderManifest" /> 類別的新執行個體。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.CollationFacetName">
      <summary>Collation Facet 的名稱</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinition">
      <summary>值，要傳遞至 GetInformation 以取得 ConceptualSchemaDefinition</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinitionVersion3">
      <summary>值，要傳遞至 GetInformation 以取得 ConceptualSchemaDefinitionVersion3</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.DefaultValueFacetName">
      <summary>DefaultValue Facet 的名稱</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.EscapeLikeArgument(System.String)">
      <summary>提供者寫入器應該覆寫此方法，以傳回包含逸出之萬用字元和逸出字元的引數。只有當 SupportsEscapingLikeArgument 傳回 true，才能使用此方法。</summary>
      <returns>包含逸出之萬用字元和逸出字元的引數。</returns>
      <param name="argument">要逸出的引數。</param>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.FixedLengthFacetName">
      <summary>FixedLength Facet 的名稱</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetDbInformation(System.String)">
      <summary>在衍生類別中覆寫時，此方法會傳回提供者特定資訊。</summary>
      <returns>XmlReader 物件，表示與基礎資料存放區目錄的對應。</returns>
      <param name="informationType">要傳回的資訊類型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetEdmType(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>在衍生類別中覆寫時，此方法會將指定的儲存區類型和該類型的一組 Facet 對應到 EDM 類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 執行個體，描述 EDM 類型和該類型的一組 Facet。</returns>
      <param name="storeType">TypeUsage 執行個體，描述要對應到 EDM 類型的儲存區類型和該類型的一組 Facet。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetFacetDescriptions(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>傳回特定類型的 FacetDescription 物件。</summary>
      <returns>指定的 EDM 類型的 FacetDescription 物件。</returns>
      <param name="edmType">要傳回 Facet 描述的 EDM 類型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetInformation(System.String)">
      <summary>取得提供者特定資訊。</summary>
      <returns>提供者特定資訊。</returns>
      <param name="informationType">要傳回的資訊類型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreFunctions">
      <summary>在衍生類別中覆寫時，傳回由提供者資訊清單支援的 EDM 函式集合。</summary>
      <returns>EDM 函式的集合。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreType(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>在衍生類別中覆寫時，此方法會將指定的 EDM 類型和該類型的一組 Facet 對應到儲存區類型。</summary>
      <returns>TypeUsage 執行個體，描述儲存區類型和該類型的一組 Facet。</returns>
      <param name="edmType">TypeUsage 執行個體，描述要對應到儲存區類型的 EDM 類型和該類型的一組 Facet。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreTypes">
      <summary>在衍生類別中覆寫時，傳回資料來源所支援的一組基本類型。</summary>
      <returns>資料來源支援的一組類型。</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.IsStrictFacetName">
      <summary>IsStrict Facet 的名稱</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.MaxLengthFacetName">
      <summary>MaxLength Facet 的名稱</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbProviderManifest.NamespaceName">
      <summary>取得此提供者資訊清單使用的命名空間。</summary>
      <returns>此提供者資訊清單使用的命名空間。</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.NullableFacetName">
      <summary>Nullable Facet 的名稱</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.PrecisionFacetName">
      <summary>Precision Facet 的名稱</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ScaleFacetName">
      <summary>Scale Facet 的名稱</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.SridFacetName">
      <summary>SRID Facet 的名稱</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinition">
      <summary>值，要傳遞至 GetInformation 以取得 StoreSchemaDefinition</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinitionVersion3">
      <summary>值，要傳遞至 GetInformation 以取得 StoreSchemaDefinitionVersion3</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMapping">
      <summary>值，要傳遞至 GetInformation 以取得 StoreSchemaMapping</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMappingVersion3">
      <summary>值，要傳遞至 GetInformation 以取得 StoreSchemaMappingVersion3</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)">
      <summary>指出提供者是否支援將逸出字串做為 Like 運算式中的模式使用。</summary>
      <returns>如果此提供者支援將逸出字串做為 Like 運算式中的模式使用則傳回 True，否則傳回 false。</returns>
      <param name="escapeCharacter">如果提供者支援逸出，則該字元會做為逸出字元使用。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsInExpression">
      <summary>傳回布林值，此值指定提供者是否可以處理包含 DbInExpression 執行個體的運算式樹狀架構。預設實作為了回溯相容性而傳回 false。衍生類別可以覆寫此方法。</summary>
      <returns>false</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.UnicodeFacetName">
      <summary>Unicode Facet 的名稱</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbProviderServices">
      <summary>用於建置命令定義的 Factory；使用此物件的類型做為提供者 Factory 的 IServiceProvider.GetService 方法的引數</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>加入 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />，以便於使用應用程式組態檔中的項目或透過 <see cref="T:System.Data.Entity.DbConfiguration" /> 以程式碼為基礎的註冊，將衍生類型註冊為 EF 提供者時，用來解析額外的預設提供者服務。</summary>
      <param name="resolver">要加入的解析程式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CloneDbCommand(System.Data.Common.DbCommand)">
      <summary>請參閱問題 2390 - 複製 DbCommand 的 DesignTimeVisible 屬性可能會導致死結。因此這裡允許覆寫子類別。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> 的複本</returns>
      <param name="fromDbCommand">要複製的 <see cref="T:System.Data.Common.DbCommand" /> 物件</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.DbCommand)">
      <summary>依據原型命令，建立預設 DbCommandDefinition 物件。此方法專供提供者寫入器從命令建立預設命令定義。注意：這會複製原型</summary>
      <returns>可執行的命令定義物件</returns>
      <param name="prototype">原型命令</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>從給定的命令樹，建立命令定義物件。</summary>
      <returns>可執行的命令定義物件</returns>
      <param name="commandTree">陳述式的命令樹</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>從指定的資訊清單和命令樹建立命令定義。</summary>
      <returns>建立的命令定義。</returns>
      <param name="providerManifest">資訊清單。</param>
      <param name="commandTree">命令樹。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>建立連接所表示的資料庫，並根據 storeItemCollection 的內容建立結構描述物件 (資料表、主索引鍵、外部索引鍵)。</summary>
      <param name="connection">與不存在之資料庫的連接，需要建立此資料庫並在其中填入以 storeItemCollection 參數表示的存放區物件。</param>
      <param name="commandTimeout">建立資料庫時所需之任何命令的執行逾時時間。</param>
      <param name="storeItemCollection">建立指令碼時所應根據之所有存放區項目的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>產生用於建立結構描述物件 (資料表、主索引鍵、外部索引鍵) 的資料定義語言 (DDL) 指令碼，此指令碼所建立的結構描述物件會以 StoreItemCollection 參數內容為根據，並以對應至提供者資訊清單語彙基元的資料庫版本為目標。</summary>
      <returns>DDL 指令碼，該指令碼會根據 StoreItemCollection 參數的內容建立結構描述物件，並以對應提供者資訊清單語彙基元的資料庫版本做為物件的目標。</returns>
      <param name="providerManifestToken">提供者資訊清單語彙基元，可識別目標版本。</param>
      <param name="storeItemCollection">資料庫的結構。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDbCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>建立指定之提供者資訊清單和命令樹的命令定義物件。</summary>
      <returns>可執行的命令定義物件。</returns>
      <param name="providerManifest">先前從存放區提供者擷取的提供者資訊清單。</param>
      <param name="commandTree">陳述式的命令樹。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>傳回值，指出給定的資料庫是否存在伺服器上。</summary>
      <returns>如果提供者只能根據連接推算資料庫，則為 true。</returns>
      <param name="connection">與資料庫的連接，此方法會檢查資料庫是否存在。</param>
      <param name="commandTimeout">判斷資料庫存在與否所需之任何命令的執行逾時時間。</param>
      <param name="storeItemCollection">模型中所有存放區項目的集合。此參數不再用來判斷資料庫是否存在。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Lazy{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection})">
      <summary>傳回值，指出給定的資料庫是否存在伺服器上。</summary>
      <returns>如果提供者只能根據連接推算資料庫，則為 true。</returns>
      <param name="connection">與資料庫的連接，此方法會檢查資料庫是否存在。</param>
      <param name="commandTimeout">判斷資料庫存在與否所需之任何命令的執行逾時時間。</param>
      <param name="storeItemCollection">模型中所有存放區項目的集合。此參數不再用來判斷資料庫是否存在。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbCreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>建立連接所表示的資料庫，並根據 StoreItemCollection 的內容建立結構描述物件 (資料表、主索引鍵、外部索引鍵)。</summary>
      <param name="connection">與不存在之資料庫的連接，需要建立此資料庫並在其中填入以 storeItemCollection 參數表示的存放區物件。</param>
      <param name="commandTimeout">建立資料庫時所需之任何命令的執行逾時時間。</param>
      <param name="storeItemCollection">建立指令碼時所應根據之所有存放區項目的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbCreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>產生用於建立結構描述物件 (資料表、主索引鍵、外部索引鍵) 的資料定義語言 (DDL) 指令碼，此指令碼所建立的結構描述物件會以 StoreItemCollection 參數內容為根據，並以對應至提供者資訊清單語彙基元的資料庫版本為目標。</summary>
      <returns>DDL 指令碼，該指令碼會根據 StoreItemCollection 參數的內容建立結構描述物件，並以對應提供者資訊清單語彙基元的資料庫版本做為物件的目標。</returns>
      <param name="providerManifestToken">提供者資訊清單語彙基元，可識別目標版本。</param>
      <param name="storeItemCollection">資料庫的結構。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>傳回值，指出給定的資料庫是否存在伺服器上。</summary>
      <returns>如果提供者只能根據連接推算資料庫，則為 true。</returns>
      <param name="connection">與資料庫的連接，此方法會檢查資料庫是否存在。</param>
      <param name="commandTimeout">判斷資料庫存在與否所需之任何命令的執行逾時時間。</param>
      <param name="storeItemCollection">模型中所有存放區項目的集合。此參數不再用來判斷資料庫是否存在。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Lazy{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection})">
      <summary>傳回值，指出給定的資料庫是否存在伺服器上。</summary>
      <returns>如果提供者只能根據連接推算資料庫，則為 true。</returns>
      <param name="connection">與資料庫的連接，此方法會檢查資料庫是否存在。</param>
      <param name="commandTimeout">判斷資料庫存在與否所需之任何命令的執行逾時時間。</param>
      <param name="storeItemCollection">模型中所有存放區項目的集合。此參數不再用來判斷資料庫是否存在。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>刪除指定的資料庫。</summary>
      <param name="connection">需要刪除之現有資料庫的連接。</param>
      <param name="commandTimeout">刪除資料庫時所需之任何命令的執行逾時時間。</param>
      <param name="storeItemCollection">模型中所有存放區項目的集合。此參數不再用來刪除資料庫。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbGetSpatialServices(System.String)">
      <summary>取得 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> 的空間服務。</summary>
      <returns>空間服務。</returns>
      <param name="manifestToken">與提供者資訊清單相關聯的語彙基元資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>刪除指定的資料庫。</summary>
      <param name="connection">需要刪除之現有資料庫的連接。</param>
      <param name="commandTimeout">刪除資料庫時所需之任何命令的執行逾時時間。</param>
      <param name="storeItemCollection">模型中所有存放區項目的集合。此參數不再用來刪除資料庫。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.ExpandDataDirectory(System.String)">
      <summary>如果特定路徑開頭為 |DataDirectory|，展開特定路徑中的 |DataDirectory|，如果開頭不是 |DataDirectory|，則傳回特定字串。</summary>
      <returns>展開的路徑。</returns>
      <param name="path">要展開的路徑。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetConceptualSchemaDefinition(System.String)">
      <summary>傳回表示 CSDL 描述的 XML 讀取器</summary>
      <returns>表示 CSDL 描述的 XmlReader</returns>
      <param name="csdlName">CSDL 描述的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbProviderManifest(System.String)">
      <summary>在衍生類別中覆寫時，傳回衍生自 DbProviderManifest 之類別的執行個體。</summary>
      <returns>表示提供者資訊清單的 DbProviderManifest 物件。</returns>
      <param name="manifestToken">與提供者資訊清單相關聯的語彙基元資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>傳回給定之連接的提供者資訊清單語彙基元。</summary>
      <returns>所指定連接的提供者資訊清單語彙基元。</returns>
      <param name="connection">要在其中尋找資訊清單語彙基元的連接。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>取得 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> 的空間資料讀取器。</summary>
      <returns>空間資料讀取器。</returns>
      <param name="fromReader">空間資料的來源讀取器。</param>
      <param name="manifestToken">與提供者資訊清單相關聯的語彙基元資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetExecutionStrategy(System.Data.Common.DbConnection)">
      <summary>取得 <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />，用於執行使用指定連接的方法。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> 的新執行個體</returns>
      <param name="connection">資料庫連接</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetExecutionStrategy(System.Data.Common.DbConnection,System.String)">
      <summary>取得 <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />，用於執行使用指定連接的方法。此多載應由衍生的類別所使用，以獲得與包裝提供者的相容性。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> 的新執行個體</returns>
      <param name="connection">資料庫連接</param>
      <param name="providerInvariantName">提供者非變異名稱</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderFactory(System.Data.Common.DbConnection)">
      <summary>擷取以指定的 DbConnection 為基礎的 DbProviderFactory。</summary>
      <returns>擷取的 DbProviderFactory。</returns>
      <param name="connection">要使用的連接。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifest(System.String)">
      <summary>使用指定的版本資訊傳回提供者資訊清單。</summary>
      <returns>使用指定之版本資訊的提供者資訊清單。</returns>
      <param name="manifestToken">與提供者資訊清單相關聯的語彙基元資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>在提供連接的情況下傳回提供者資訊清單語彙基元。</summary>
      <returns>提供者資訊清單語彙基元。</returns>
      <param name="connection">提供者的連接。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderServices(System.Data.Common.DbConnection)">
      <summary>在提供連接的情況下傳回提供者。</summary>
      <returns>以指定的連接為基礎的 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> 執行個體。</returns>
      <param name="connection">提供者的連接。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetService(System.Type,System.Object)">
      <summary>當使用應用程式組態檔中的項目或透過 <see cref="T:System.Data.Entity.DbConfiguration" /> 以程式碼為基礎的註冊，將衍生類型註冊為 EF 提供者時，呼叫用來解析額外的預設提供者服務。此類別中的此方法實作使用 AddDependencyResolver 方法所加入的解析程式來解析相依性。</summary>
      <returns>特定類型的執行個體，如果服務無法解析則為 null。</returns>
      <param name="type">要解析之服務的類型。</param>
      <param name="key">選擇性索引鍵，提供用來解析服務的其他資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetServices(System.Type,System.Object)">
      <summary>當使用應用程式組態檔中的項目或透過 <see cref="T:System.Data.Entity.DbConfiguration" /> 以程式碼為基礎的註冊，將衍生類型註冊為 EF 提供者時，呼叫用來解析額外的預設提供者服務。此類別中的此方法實作使用 AddDependencyResolver 方法所加入的解析程式來解析相依性。</summary>
      <returns>符合指定之類型與索引鍵的所有已註冊服務，若無相符者則為空的列舉。</returns>
      <param name="type">要解析之服務的類型。</param>
      <param name="key">選擇性索引鍵，提供用來解析服務的其他資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>取得 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> 的空間資料讀取器。</summary>
      <returns>空間資料讀取器。</returns>
      <param name="fromReader">空間資料的來源讀取器。</param>
      <param name="manifestToken">與提供者資訊清單相關聯的資訊清單語彙基元。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>取得 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> 的空間服務。</summary>
      <returns>空間服務。</returns>
      <param name="key">將使用空間服務之資料庫的相關資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialServices(System.String)">
      <summary>取得 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> 的空間服務。</summary>
      <returns>空間服務。</returns>
      <param name="manifestToken">與提供者資訊清單相關聯的語彙基元資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.RegisterInfoMessageHandler(System.Data.Common.DbConnection,System.Action{System.String})">
      <summary>註冊處理常式，以處理來自資料庫提供者的非錯誤訊息。</summary>
      <param name="connection">用來接收資訊的連接。</param>
      <param name="handler">處理訊息的處理常式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.SetDbParameterValue(System.Data.Common.DbParameter,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>針對給定的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 設定參數值和適當的 Facet。</summary>
      <param name="parameter">參數。</param>
      <param name="parameterType">參數的類型。</param>
      <param name="value">參數的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.SetParameterValue(System.Data.Common.DbParameter,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>針對給定的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 設定參數值和適當的 Facet。</summary>
      <param name="parameter">參數。</param>
      <param name="parameterType">參數的類型。</param>
      <param name="value">參數的值。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest">
      <summary>接受 XmlReader 之 ProviderManifest 的特製化</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.#ctor(System.Xml.XmlReader)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest" /> 類別的新執行個體。</summary>
      <param name="reader">提供存取提供者資訊清單檔案中 XML 資料的 <see cref="T:System.Xml.XmlReader" /> 物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>傳回所指定實體資料模型 (EDM) 類型的 Facet 描述清單。</summary>
      <returns>類型 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的集合，包含所指定 EDM 類型的 Facet 描述清單。</returns>
      <param name="edmType">要擷取 Facet 描述的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetStoreFunctions">
      <summary>傳回提供者支援的函式清單。</summary>
      <returns>類型 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的集合，包含提供者支援的函式清單。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetStoreTypes">
      <summary>傳回儲存區提供者支援的基本類型清單。</summary>
      <returns>類型 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的集合，包含儲存區提供者支援的基本類型清單。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.NamespaceName">
      <summary>取得此提供者資訊清單支援的命名空間名稱。</summary>
      <returns>此提供者資訊清單支援的命名空間名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType">
      <summary>取得所指定儲存類型名稱的最佳對應對等實體資料模型 (EDM) 類型。</summary>
      <returns>所指定儲存類型名稱的最佳對應對等 EDM 類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType">
      <summary>取得所指定儲存類型名稱的最佳對應對等儲存基本類型。</summary>
      <returns>所指定儲存類型名稱的最佳對應對等儲存基本類型。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntityRecordInfo">
      <summary>EntityRecordInfo 類別，提供簡單的方式存取類型資訊和資料行資訊。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntityRecordInfo.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.Metadata.Edm.EntitySet)">
      <summary>使用可列舉的資料欄位集合以及特定的索引鍵和實體集資訊，初始化特定實體類型之 <see cref="T:System.Data.Entity.Core.Common.EntityRecordInfo" /> 類別的新執行個體。</summary>
      <param name="metadata">由此 <see cref="T:System.Data.Entity.Core.Common.EntityRecordInfo" /> 物件描述之 <see cref="T:System.Data.Common.DbDataRecord" /> 所表示之實體的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />。</param>
      <param name="memberInfo">表示資料行資訊之 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" /> 物件的可列舉集合。</param>
      <param name="entityKey">實體的索引鍵。</param>
      <param name="entitySet">實體所屬的實體集。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntityRecordInfo.EntityKey">
      <summary>取得實體的 <see cref="T:System.Data.Entity.Core.EntityKey" />。</summary>
      <returns>實體的索引鍵。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.FieldMetadata">
      <summary>FieldMetadata 類別，提供資料行序數和 MemberMetadata 之間的相互關聯。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.FieldMetadata.#ctor(System.Int32,System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>使用指定的序數值和欄位值，初始化一個新 <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> 物件。</summary>
      <param name="ordinal">指定此中繼資料位置的整數。</param>
      <param name="fieldType">欄位類型。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.FieldMetadata.FieldType">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> 物件的欄位類型。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> 物件的欄位類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.FieldMetadata.Ordinal">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> 物件的序數。</summary>
      <returns>表示序數值的整數。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor">
      <summary>表示實作衍生來源 IExpressionVisitor 介面之類型的抽象基底類型。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>實作命令樹的造訪者模式。</summary>
      <param name="commandTree">命令樹。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitDeleteCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree)">
      <summary>實作刪除命令樹的造訪者模式。</summary>
      <param name="deleteTree">刪除命令樹。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitFunctionCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree)">
      <summary>實作函式命令樹的造訪者模式。</summary>
      <param name="functionTree">函式命令樹。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitInsertCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree)">
      <summary>實作插入命令樹的造訪者模式。</summary>
      <param name="insertTree">插入命令樹。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitModificationClause(System.Data.Entity.Core.Common.CommandTrees.DbModificationClause)">
      <summary>實作修改子句的造訪者模式。</summary>
      <param name="modificationClause">修改子句。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitModificationClauses(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause})">
      <summary>實作修改子句集合的造訪者模式。</summary>
      <param name="modificationClauses">修改子句。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitQueryCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree)">
      <summary>實作查詢命令樹的造訪者模式。</summary>
      <param name="queryTree">查詢命令樹。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitSetClause(System.Data.Entity.Core.Common.CommandTrees.DbSetClause)">
      <summary>實作 set 子句的造訪者模式。</summary>
      <param name="setClause">set 子句。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitUpdateCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree)">
      <summary>實作更新命令樹的造訪者模式。</summary>
      <param name="updateTree">更新命令樹。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor">
      <summary>實作衍生來源 IExpressionVisitor 介面之類型的抽象基底類型。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbAndExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbApplyExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbArithmeticExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbCaseExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbCastExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbComparisonExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbConstantExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbCrossJoinExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DeRefExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbDistinctExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbElementExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbEntityRefExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbExceptExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>遇到其他無法辨識類型的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 時呼叫。</summary>
      <param name="expression">運算式</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
      <exception cref="T:System.NotSupportedException">如果呼叫此方法，則一律會擲回，因為它表示 <paramref name="expression" /> 為不支援的類型</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbFilterExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbFunctionExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbInExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbIntersectExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbIsEmptyExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbIsNullExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbIsOfExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbJoinExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbLambdaExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbLikeExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbLimitExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbNewInstanceExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbNotExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbNullExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbOfTypeExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbOrExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbParameterReferenceExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbProjectExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbPropertyExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbQuantifierExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbRefExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbRefKeyExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbRelationshipNavigationExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbScanExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbSkipExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbSortExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbTreatExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbUnionAllExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbVariableReferenceExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitAggregate(System.Data.Entity.Core.Common.CommandTrees.DbAggregate)">
      <summary>造訪指定之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> 的便利方法。</summary>
      <param name="aggregate">要造訪的彙總。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="aggregate" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitAggregateList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbAggregate})">
      <summary>如果清單是非 Null，則為造訪清單中的每個 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> 的便利方法。</summary>
      <param name="aggregates">要造訪的彙總清單。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="aggregates" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitBinaryExpression(System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression)">
      <summary>造訪指定之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression" /> 的便利方法。</summary>
      <param name="expression">要造訪的 DbBinaryExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpression(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>如果項目為非 Null，則為造訪指定之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 的便利方法。</summary>
      <param name="expression">要造訪的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionBindingPost(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>在已造訪 DbExpressionBinding 之後，後置處理的便利方法。</summary>
      <param name="binding">先前造訪的 DbExpressionBinding。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionBindingPre(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>造訪指定之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> 的便利方法。</summary>
      <param name="binding">要造訪的 DbExpressionBinding。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>如果清單是非 Null，則為造訪給定清單中的每個 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 的便利方法。</summary>
      <param name="expressionList">要造訪的運算式清單。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expressionList" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingMid(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>便利方法，指出已造訪 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> 的群組索引鍵，現在要造訪彙總。</summary>
      <param name="binding">DbGroupByExpression 的 DbGroupExpressionBinding</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingPost(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>在已造訪 DbGroupExpressionBinding 之後，後置處理的便利方法。</summary>
      <param name="binding">先前造訪的 DbGroupExpressionBinding。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingPre(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>造訪指定之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> 的便利方法。</summary>
      <param name="binding">要造訪的 DbGroupExpressionBinding。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitLambdaPost(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>在已造訪 DbLambda 之後，後置處理的便利方法。</summary>
      <param name="lambda">先前造訪的 DbLambda。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitLambdaPre(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>便利方法，表示現在要造訪 Lambda <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> 的主體。</summary>
      <param name="lambda">要造訪的 DbLambda</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> 為 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitUnaryExpression(System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression)">
      <summary>造訪指定之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression" /> 的便利方法。</summary>
      <param name="expression">要造訪的 DbUnaryExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 null</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate">
      <summary>彙總是虛擬運算式。其外觀及操作類似於運算式，但是它們可以出現的位置具有嚴格限制，只能出現在 GROUP BY 運算式的彙總子句中。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbAggregate.Arguments">
      <summary>     取得定義此彙總之引數的運算式清單。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbAggregate.ResultType">
      <summary>     取得此彙總的結果類型。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression">
      <summary>     表示兩個 Boolean 引數的邏輯 AND。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression">
      <summary>     表示套用作業，而這項作業就是指定之輸入集中每個項目的指定 functor 的引動過程。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Apply">
      <summary>     取得 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />，它會指定針對輸入集中每個項目所叫用的 functor。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Input">
      <summary>     取得指定輸入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression">
      <summary>     表示套用至兩個數值引數的算術運算 (加、減、乘、除、模數或否定)。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Arguments">
      <summary>     取得定義目前引數的運算式清單。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression">
      <summary>     接受兩個運算式運算元之運算式的抽象基底類型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression.Left">
      <summary>     取得定義左引數的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression.Right">
      <summary>     取得定義右引數的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression">
      <summary>     代表 Case When...Then...Else 邏輯作業。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Else">
      <summary>     取得此 DbCaseExpression 的 Else 子句。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Then">
      <summary>     取得此 DbCaseExpression 的 Then 子句。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.When">
      <summary>     取得此 DbCaseExpression 的 When 子句。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression">
      <summary>     表示套用至多型引數的轉換作業。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree">
      <summary>表示刪除、查詢、插入和更新 DbCommandTree 類型的抽象基底類型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.CommandTreeKind">
      <summary>取得此命令樹的類型。</summary>
      <returns>此命令樹的類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.DataSpace">
      <summary>取得此命令樹使用的中繼資料必須位於的資料空間。</summary>
      <returns>此命令樹使用的中繼資料必須位於的資料空間。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.MetadataWorkspace">
      <summary>取得此命令樹所使用的中繼資料工作空間。</summary>
      <returns>此命令樹所使用的中繼資料工作空間。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.Parameters">
      <summary>取得可在此命令樹內部參考之每個參數的名稱和對應類型。</summary>
      <returns>可在此命令樹內部參考之每個參數的名稱和對應類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.ToString">
      <summary>傳回 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> 的字串表示法。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> 的字串表示。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.UseDatabaseNullSemantics">
      <summary>取得命令樹是否針對資料庫使用 null 語意。</summary>
      <returns>命令樹針對資料庫使用 null 語意。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind">
      <summary>描述不同的資料庫命令。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Delete">
      <summary>指定刪除命令。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Function">
      <summary>指定函式命令。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Insert">
      <summary>指定插入命令。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Query">
      <summary>指定查詢命令。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Update">
      <summary>指定更新命令。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression">
      <summary>     表示套用至兩個引數的比較作業 (相等、大於、大於或等於、小於、小於或等於、不相等)。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression">
      <summary>     表示常數值。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Value">
      <summary>     取得常數值。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression">
      <summary>     表示給定集合引數之間的無條件聯結 (Join) 作業</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Inputs">
      <summary>     取得提供聯結之輸入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> 清單。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree">
      <summary>代表以標準命令樹表示的單一資料列刪除作業。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree" /> 類別的新執行個體。</summary>
      <param name="metadata">中繼資料工作空間。</param>
      <param name="dataSpace">資料空間。</param>
      <param name="target">資料庫運算式繫結。</param>
      <param name="predicate">資料庫運算式。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.CommandTreeKind">
      <summary>取得此命令樹的類型。</summary>
      <returns>此命令樹的類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.Predicate">
      <summary>取得 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它會指定用來判斷所應刪除之目標集合成員的述詞 (Predicate)。</summary>
      <returns>用來判斷所應刪除之目標集合成員的述詞。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression">
      <summary>     表示要使用指定的 Ref 擷取指定的實體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression">
      <summary>     表示從指定的集運算元中移除重複的項目。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression">
      <summary>表示將指定之集運算元轉換成單一子句的轉換。如果集合是空的，轉換會傳回 null，否則轉換會傳回集合中的一個元素。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression">
      <summary>     表示要擷取指定之實體的參考，做為 Ref。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression">
      <summary>     表示左右運算元之間的集合 (Set) 相減作業。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>表示所有運算式的基底類型。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>實作造訪者模式介面方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor">DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>實作造訪者模式介面方法，適用於產生特定類型的結果值之運算式造訪者。</summary>
      <returns>
        <paramref name="TResultType" /> 的執行個體。</returns>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 所產生的結果類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的 DbExpression 執行個體。</summary>
      <returns>如果指定的物件等於目前的 DbExpression 執行個體，則為 true，否則為 false。</returns>
      <param name="obj">要與目前 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 比較的物件。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ExpressionKind">
      <summary>取得運算式的類型，表示此運算式的作業。</summary>
      <returns>運算式的類型，表示此運算式的作業。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromBinary(System.Byte[])">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定的二進位值，該值可為 null。</summary>
      <returns>表示指定之二進位值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value"> 要做為所傳回運算式之基礎的二進位值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromBoolean(System.Nullable{System.Boolean})">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定之可為 Null 的布林值。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定的布林值。</returns>
      <param name="value">要做為所傳回運算式之基礎的布林值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromByte(System.Nullable{System.Byte})">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定之可為 null 的位元組值。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定的位元組值。</returns>
      <param name="value">要做為所傳回運算式之基礎的位元組值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDateTime(System.Nullable{System.DateTime})">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定之可為 null 的 <see cref="T:System.DateTime" /> 值。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定的 DateTime 值。</returns>
      <param name="value">要做為所傳回運算式之基礎的 DateTime 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDateTimeOffset(System.Nullable{System.DateTimeOffset})">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定之可為 null 的 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定的 DateTimeOffset 值。</returns>
      <param name="value">要做為所傳回運算式之基礎的 DateTimeOffset 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDecimal(System.Nullable{System.Decimal})">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定之可為 null 的十進位值。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定的十進位值。</returns>
      <param name="value">要做為所傳回運算式之基礎的十進位值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDouble(System.Nullable{System.Double})">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定之可為 null 的雙精確度浮點數值。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定的雙精確度浮點數值。</returns>
      <param name="value">要做為所傳回運算式之基礎的雙精確度浮點數值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGeography(System.Data.Entity.Spatial.DbGeography)">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，該值可為 null。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定的 DbGeography 值。</returns>
      <param name="value">要做為所傳回運算式之基礎的 DbGeography 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGeometry(System.Data.Entity.Spatial.DbGeometry)">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，該值可為 null。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定的 DbGeometry 值。</returns>
      <param name="value">要做為所傳回運算式之基礎的 DbGeometry 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGuid(System.Nullable{System.Guid})">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定之可為 null 的 <see cref="T:System.Guid" /> 值。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定的 GUID 值。</returns>
      <param name="value">要做為所傳回運算式之基礎的 GUID 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt16(System.Nullable{System.Int16})">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定之可為 null 的 Int16 值。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定的 Int16 值。</returns>
      <param name="value">要做為所傳回運算式之基礎的 Int16 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt32(System.Nullable{System.Int32})">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定之可為 null 的 Int32 值。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定的 Int32 值。</returns>
      <param name="value">要做為所傳回運算式之基礎的 Int32 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt64(System.Nullable{System.Int64})">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定之可為 null 的 Int64 值。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定的 Int64 值。</returns>
      <param name="value">要做為所傳回運算式之基礎的 Int64 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromSingle(System.Nullable{System.Single})">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定之可為 null 的單精確度浮點數值。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定的單精確度浮點數值。</returns>
      <param name="value">要做為所傳回運算式之基礎的單精確度浮點數值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromString(System.String)">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定的字串值。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示指定的字串值。</returns>
      <param name="value">要做為所傳回運算式之基礎的字串值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.GetHashCode">
      <summary>做為類型的雜湊函式。</summary>
      <returns>目前運算式的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Byte[])~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>將 8 位元不帶正負號的整數陣列轉換為 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示已轉換的 8 位元不帶正負號整數陣列。</returns>
      <param name="value">8 位元不帶正負號的整數陣列。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Entity.Spatial.DbGeography)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>將 DbGeography 物件轉換成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the converted DbGeography object.</returns>
      <param name="value">DbGeography 物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Entity.Spatial.DbGeometry)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>將 DBGeometry 物件轉換成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the converted DbGeography object.</returns>
      <param name="value">DbGeometry 物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Boolean})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>將可為 null 的布林值物件轉換為 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示已轉換的可為 null 布林值物件。</returns>
      <param name="value">可為 null 的布林值物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Byte})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>將可為 null 的 8 位元不帶正負號整數轉換為 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示已轉換的 8 位元不帶正負號整數。</returns>
      <param name="value">可為 null 的 8 位元不帶正負號整數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTime})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>將可為 null 的 <see cref="T:System.DateTime" /> 物件轉換成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示 <see cref="T:System.DateTime" /> 物件的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">可為 null 的 <see cref="T:System.DateTime" /> 物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTimeOffset})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>將可為 null 的 <see cref="T:System.DateTimeOffset" /> 物件轉換成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示可為 null 的 <see cref="T:System.DateTime" />。</returns>
      <param name="value">可為 null 的 <see cref="T:System.DateTime" /> 物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Decimal})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>將可為 null 的 Decimal 物件轉換為 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示已轉換的可為 null Decimal 物件。</returns>
      <param name="value">可為 null 的 Decimal 物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Double})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>將可為 null 的雙精度浮點數物件轉換為 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示已轉換的可為 null 雙精度浮點數物件。</returns>
      <param name="value">可為 null 的雙精度浮點數物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Guid})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>將可為 null 的 GUID 物件轉換為 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示可為 null 的 <see cref="T:System.Guid" /> 物件。</returns>
      <param name="value">可為 null 的 <see cref="T:System.Guid" /> 物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int16})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>將可為 null 的 16 位元不帶正負號整數轉換為 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示可為 null 的 16 位元不帶正負號整數。</returns>
      <param name="value">可為 null 的 16 位元不帶正負號整數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int32})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>將可為 null 的 32 位元不帶正負號整數轉換為 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示可為 null 的 32 位元不帶正負號整數。</returns>
      <param name="value">可為 null 的 32 位元不帶正負號整數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int64})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>將可為 null 的 64 位元不帶正負號整數轉換為 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示可為 null 的 64 位元不帶正負號整數。</returns>
      <param name="value">可為 null 的 64 位元不帶正負號整數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Single})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>將可為 null 的單精確度浮點數轉換成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示單精確度浮點數。</returns>
      <param name="value">單精確度浮點數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.String)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>將 Unicode 字元的循序集合轉換為 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示 Unicode 字元循序集合的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">Unicode 字元的循序集合。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ResultType">
      <summary>取得運算式結果類型的類型中繼資料 (Metadata)。</summary>
      <returns>運算式結果類型的類型中繼資料。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding">
      <summary>描述運算式的繫結。在概念上類似於 C# 的 Foreach 迴圈。DbExpression 屬性定義逐一查看的集合，Var 屬性則在反覆運算期間提供一個途徑來參考集合中的目前元素。DbExpressionBinding 用來描述 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />、<see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> 和 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> 等關聯運算式的集合引數。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Expression">
      <summary>     取得定義輸入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Variable">
      <summary>     取得參考項目變數的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.VariableName">
      <summary>     取得指派給項目變數的名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.VariableType">
      <summary>     取得項目變數的類型中繼資料 (Metadata)。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind">
      <summary>     描述不同「種類」(類別) 的運算式</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.All">
      <summary>     針對所有項目傳回 True。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.And">
      <summary>     邏輯 And。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Any">
      <summary>     針對任何項目傳回 True。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Case">
      <summary>     條件式 CASE 陳述式。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Cast">
      <summary>     多型類型轉換。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Constant">
      <summary>     常數值。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.CrossApply">
      <summary>     Cross Apply</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.CrossJoin">
      <summary>     交叉聯結</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Deref">
      <summary>     取值 (Dereference)。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Distinct">
      <summary>     重複項目移除。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Divide">
      <summary>     除法。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Element">
      <summary>     Set-to-singleton 轉換。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.EntityRef">
      <summary>     實體參考值擷取。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Equals">
      <summary>     相等</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Except">
      <summary>     集合 (Set) 相減</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Filter">
      <summary>     限制。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.FullOuterJoin">
      <summary>     完整外部聯結</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Function">
      <summary>     獨立函式的引動過程</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GreaterThan">
      <summary>     大於。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GreaterThanOrEquals">
      <summary>     大於或等於。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GroupBy">
      <summary>     群組。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.In">
      <summary>     內。 </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.InnerJoin">
      <summary>     內部聯結</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Intersect">
      <summary>     交集。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsEmpty">
      <summary>     空集合判斷。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsNull">
      <summary>     Null 判斷。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsOf">
      <summary>     類型比較 (指定的類型或子類型)。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsOfOnly">
      <summary>     類型比較 (只有指定的類型)。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Lambda">
      <summary>     Lambda 函式套用</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LeftOuterJoin">
      <summary>     左外部聯結</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LessThan">
      <summary>     小於。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LessThanOrEquals">
      <summary>     小於或等於。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Like">
      <summary>     字串比較。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Limit">
      <summary>     結果計數限制 (TOP n)。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Minus">
      <summary>     減法。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Modulo">
      <summary>     模數。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Multiply">
      <summary>     乘法。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.NewInstance">
      <summary>     執行個體、資料列和集合建構。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Not">
      <summary>     邏輯 Not。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.NotEquals">
      <summary>     不等於。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Null">
      <summary>     Null。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType">
      <summary>     依據類型 (或子類型) 設定成員。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly">
      <summary>     依據 (確切) 類型設定成員。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Or">
      <summary>     邏輯 OR。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OuterApply">
      <summary>     Outer Apply。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.ParameterReference">
      <summary>     參數的參考。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Plus">
      <summary>     加法。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Project">
      <summary>     投影。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Property">
      <summary>     靜態或執行個體屬性擷取。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Ref">
      <summary>     參考。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.RefKey">
      <summary>     參考索引鍵值擷取。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.RelationshipNavigation">
      <summary>     (組合或關聯) 關聯性的巡覽。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Scan">
      <summary>     實體或關聯性集合掃描。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Skip">
      <summary>     略過已排序集合的項目。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Sort">
      <summary>     排序。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Treat">
      <summary>     類型轉換。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.UnaryMinus">
      <summary>     否定。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.UnionAll">
      <summary>     聯集 (包含重複項目)。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.VariableReference">
      <summary>     變數的參考。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder">
      <summary>確定在給定運算式樹狀架構中的所有中繼資料都是來自指定的中繼資料工作空間，必要時可能重新繫結和重建運算式至適當的取代中繼資料。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder" /> 類別的新執行個體。</summary>
      <param name="targetWorkspace">目標工作空間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>實作造訪者模式，以擷取執行個體屬性。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">運算式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitEntitySet(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>實作實體集的造訪者模式。</summary>
      <returns>已實作的造訪者模式。</returns>
      <param name="entitySet">實體集。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitFunction(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>實作函式的造訪者模式。</summary>
      <returns>已實作的造訪者模式。</returns>
      <param name="functionMetadata">函式中繼資料。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitType(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>實作類型的造訪者模式。</summary>
      <returns>已實作的造訪者模式。</returns>
      <param name="type">類型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitTypeUsage(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>實作類型使用狀況的造訪者模式。</summary>
      <returns>已實作的造訪者模式。</returns>
      <param name="type">類型。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor">
      <summary>運算式造訪者模式抽象基底類別，應該由不傳回結果值的造訪者所實作。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>DbAndExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbAndExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>DbApplyExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbApplyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>DbArithmeticExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbArithmeticExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>DbCaseExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbCaseExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>DbCastExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbCastExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>DbComparisonExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbComparisonExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>DbConstantExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbConstantExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>DbCrossJoinExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbCrossJoinExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>DbDerefExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbDerefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>DbDistinctExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbDistinctExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>DbElementExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbElementExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>DbEntityRefExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbEntityRefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>DbExceptExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbExceptExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>遇到其他無法辨識類型的運算式時呼叫。</summary>
      <param name="expression">運算式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>DbFilterExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbFilterExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>DbFunctionExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbFunctionExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>DbGroupByExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbGroupByExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>DbInExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbInExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>DbIntersectExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbIntersectExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>DbIsEmptyExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbIsEmptyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>DbIsNullExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbIsNullExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>DbIsOfExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbIsOfExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>DbJoinExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbJoinExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>DbLambdaExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbLambdaExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>DbLikeExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbLikeExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>DbLimitExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbLimitExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>DbNewInstanceExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbNewInstanceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>DbNotExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbNotExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>DbNullExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbNullExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>DbOfTypeExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbOfTypeExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>DbOrExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbOrExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>DbParameterReferenceExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbParameterReferenceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>DbProjectExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbProjectExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>DbPropertyExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbPropertyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>DbQuantifierExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbQuantifierExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>DbRefExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbRefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>DbRefKeyExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbRefKeyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>DbRelationshipNavigationExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbRelationshipNavigationExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>DbScanExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbScanExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>DbSkipExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbSkipExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>DbSortExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbSortExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>DbTreatExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbTreatExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>DbUnionAllExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbUnionAllExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>DbVariableReferenceExpression 的造訪者模式方法。</summary>
      <param name="expression">所造訪的 DbVariableReferenceExpression。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1">
      <summary>     運算式造訪者模式抽象基底類別，應該由傳回特定類型之結果值的造訪者所實作。</summary>
      <typeparam name="TResultType"> 造訪者所產生之結果值的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>     DbAndExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbAndExpression。 </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>     DbApplyExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbApplyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>     DbArithmeticExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbArithmeticExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>     DbCaseExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbCaseExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>     DbCastExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbCastExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>     DbComparisonExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbComparisonExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>     DbConstantExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbConstantExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>     DbCrossJoinExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbCrossJoinExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>     DbDerefExpression 的造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbDerefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>     DbDistinctExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbDistinctExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>     DbElementExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbElementExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>     DbEntityRefExpression 的造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbEntityRefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>     DbExceptExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbExceptExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>     遇到其他無法辨識類型的運算式時呼叫。</summary>
      <param name="expression"> 運算式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>     DbFilterExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbFilterExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>     DbFunctionExpression 的造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbFunctionExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>     DbGroupByExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbGroupByExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>     DbInExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbInExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>     DbIntersectExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbIntersectExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>     DbIsEmptyExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbIsEmptyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>     DbIsNullExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbIsNullExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>     DbIsOfExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbIsOfExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>     DbJoinExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbJoinExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>     DbLambdaExpression 的造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbLambdaExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>     DbLikeExpression 的造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbLikeExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>     DbLimitExpression 的造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbLimitExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>     DbNewInstanceExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbNewInstanceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>     DbNotExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbNotExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>     DbNullExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbNullExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>     DbOfTypeExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbOfTypeExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>     DbOrExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbOrExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>     DbParameterReferenceExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbParameterReferenceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>     DbProjectExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbProjectExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>     DbPropertyExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbPropertyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>     DbQuantifierExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbQuantifierExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>     DbRefExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbRefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>     DbRefKeyExpression 的造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbRefKeyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>     DbRelationshipNavigationExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbRelationshipNavigationExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>     DbScanExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbScanExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>     DbSkipExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbSkipExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>     DbSortExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbSortExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>     DbTreatExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbTreatExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>     DbUnionAllExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbUnionAllExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>     DbVariableReferenceExpression 的具類型造訪者模式方法。</summary>
      <param name="expression"> 所造訪的 DbVariableReferenceExpression。 </param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression">
      <summary>     代表針對產生滿足述詞的元素集合，套用至輸入集的述詞。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Input">
      <summary>     取得指定輸入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Predicate">
      <summary>     取得 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，以指定用來篩選輸入集的述詞。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate">
      <summary>     彙總類型，會對應至彙總函式的引動過程。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate.Distinct">
      <summary>     取得值，指出彙總函式是否以不同方式套用</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate.Function">
      <summary>     取得指定要叫用 (Invoke) 之彙總函式的方法中繼資料 (Metadata)。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree">
      <summary>表示以標準命令樹表示的函式引動過程。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage}})">
      <summary>建構新的 DbFunctionCommandTree，此物件會使用指定的中繼資料工作空間、資料空間和函式中繼資料。</summary>
      <param name="metadata">命令樹應該使用的中繼資料工作空間。</param>
      <param name="dataSpace">用於此命令樹之運算式的中繼資料必須屬於的邏輯「空間」。</param>
      <param name="edmFunction">要叫用的 EDM 函式。</param>
      <param name="resultType">函式的結果類型。</param>
      <param name="parameters">與要叫用的函式相關聯的參數。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.CommandTreeKind">
      <summary>取得或設定命令樹類型。</summary>
      <returns>命令樹類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction">
      <summary>取得表示要叫用之函式的 <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction" />。</summary>
      <returns>表示要叫用之函式的 <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.ResultType">
      <summary>取得函式的結果類型，目前限制為 RowType 的集合。不同於一般 RowType 執行個體，只表示名稱/類型，不表示參數順序。</summary>
      <returns>函式的結果類型。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression">
      <summary>     表示函式的引動過程。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Arguments">
      <summary>     取得提供函式之引數的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 清單。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Function">
      <summary>     取得要叫用 (Invoke) 之函式的中繼資料 (Metadata)。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate">
      <summary>表示組成群組的項目集合。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression">
      <summary>     表示 Group By 作業，該作業是根據指定的索引鍵運算式分組輸入集中的項目，接著套用指定的彙總。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Aggregates">
      <summary>     取得可提供要套用之彙總的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> 清單。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Input">
      <summary>     取得 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />，它會指定輸入集並提供集合項目與群組項目變數的存取權。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Keys">
      <summary>     取得可提供群組索引鍵的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 清單。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding">
      <summary>針對 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> 的輸入集定義繫結。除了 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> 的屬性，DbGroupExpressionBinding 也透過 &lt;seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable" /&gt; 變數參考提供群組元素的存取權，以及透過 &lt;seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate" /&gt; 屬性提供群組彙總的存取權。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.Expression">
      <summary>     取得定義輸入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate">
      <summary>     取得 DbGroupAggregate，此彙總表示群組中項目的集合。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable">
      <summary>     取得參考群組項目變數的 DbVariableReferenceExpression。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableName">
      <summary>     取得指派給群組項目變數的名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableType">
      <summary>     取得群組項目變數的類型中繼資料 (Metadata)。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.Variable">
      <summary>     取得參考項目變數的 DbVariableReferenceExpression。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.VariableName">
      <summary>     取得指派給項目變數的名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.VariableType">
      <summary>     取得項目變數的類型中繼資料 (Metadata)。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression">
      <summary>     表示布林運算式，測試指定的項目是否符合清單中的任何元素。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Item">
      <summary>     取得 DbExpression，指定要符合的項目。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.List">
      <summary>     取得測試是否符合的 DbExpression 清單。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree">
      <summary>代表以標準命令樹表示的單一資料列插入作業。在 <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.Returning" /> 屬性設定後，命令會傳回讀取器 (Reader)，否則會傳回純量值以代表受影響的資料列數。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree" /> 類別的新執行個體。</summary>
      <param name="metadata">中繼資料。</param>
      <param name="dataSpace">資料空間。</param>
      <param name="target">資料庫目標。</param>
      <param name="setClauses">set 子句，判斷所插入之資料列中的資料行值。</param>
      <param name="returning">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它會根據修改的資料列指定要傳回的結果投影。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.CommandTreeKind">
      <summary>取得命令樹類型。</summary>
      <returns>命令樹類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.Returning">
      <summary>取得 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它會根據修改的資料列指定要傳回的結果投影。如果為 null，表示不應該從此命令傳回任何結果。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它會根據修改的資料列指定要傳回的結果投影。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.SetClauses">
      <summary>取得 SET 子句，判斷所插入之資料列中的資料行值。</summary>
      <returns>set 子句，判斷所插入之資料列中的資料行值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression">
      <summary>     表示左右運算元之間的交集作業。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression">
      <summary>     表示套用至單一集引數的空集合判斷。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression">
      <summary>     表示套用至單一引數的 null 判斷。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression">
      <summary>     表示針對指定之類型進行單一引數的類型比較。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.OfType">
      <summary>     取得應該比較之引數的類型中繼資料 (Metadata)。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression">
      <summary>     表示在指定的聯結條件 (Join Condition) 下，給定集合引數之間的內部聯結 (Inner Join)、左外部聯結 (Left Outer Join) 或完整外部聯結 (Full Outer Join) 作業。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.JoinCondition">
      <summary>     取得定義聯結條件套用的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Left">
      <summary>     取得提供左輸入的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Right">
      <summary>     取得提供右輸入的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression">
      <summary>     表示 Lambda 函式套用。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Arguments">
      <summary>     取得 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 清單，這份清單會提供必須套用 Lambda 函式的引數。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Lambda">
      <summary>     取得 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />，表示此運算式所套用的 Lambda 函式。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression">
      <summary>     表示針對指定的模式與選擇性逸出字串進行字串比較</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Argument">
      <summary>     取得運算式，此運算式會指定要針對給定模式進行比較的字串</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Escape">
      <summary>     取得運算式，此運算式會提供要用於比較的選擇性逸出字串</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Pattern">
      <summary>     取得運算式，此運算式會指定應該用來比較給定字串的模式</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression">
      <summary>     表示將 Argument 集合中的項目數限制為指定的限制值。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Argument">
      <summary>     取得指定輸入集合的運算式。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Limit">
      <summary>     取得運算式，指定從輸入集合所傳回項目數的限制。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.WithTies">
      <summary>     取得限制作業是否包含相等的結果，如果相等的結果存在，可能會產生比限制值所指定更多的結果。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbModificationClause">
      <summary>在插入或更新修改作業中指定單一子句，請參閱 <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.SetClauses" /> 和 <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.SetClauses" /></summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree">
      <summary>     表示以標準命令樹表示的 DML 作業</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree.Target">
      <summary>     取得 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />，以指定 DML 作業的目標資料表。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression">
      <summary>     表示指定類型的新執行個體 (Instance)，包括集合和記錄類型。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Arguments">
      <summary>     取得 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 清單，此清單為新執行個體提供屬性/資料行值或為其設定項目。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression">
      <summary>     表示單一 Boolean 引數的邏輯 NOT。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression">
      <summary>     表示 null。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression">
      <summary>     表示從指定的集引數所擷取的指定類型元素。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.OfType">
      <summary>     取得應該從集引數所擷取的項目類型中繼資料。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression">
      <summary>     表示兩個 Boolean 引數的邏輯 OR。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression">
      <summary>     表示在包含此運算式之命令樹上宣告的參數參考。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.ParameterName">
      <summary>     取得參考參數的名稱。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression">
      <summary>     表示指定之值集合在所指定輸入集上的投影。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Input">
      <summary>     取得指定輸入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Projection">
      <summary>     取得定義投影的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression">
      <summary>提供擷取執行個體 (Instance) 屬性的方法和屬性。此類別無法被繼承。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>針對不會產生結果值的運算式而實作訪客模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>針對產生特定類型之結果值的運算式而實作訪客模式。</summary>
      <returns>特定類型的結果值，由 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> 所產生。</returns>
      <param name="visitor">類型 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> 的執行個體，此執行個體會產生特定類型的結果值。</param>
      <typeparam name="TResultType">visitor 所產生之結果的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor 為 null。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Instance">
      <summary>取得可定義執行個體的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，應該從此執行個體中擷取屬性。</summary>
      <returns>可定義執行個體的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，應該從此執行個體中擷取屬性。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.op_Implicit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)~System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}">
      <summary>啟用 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的隱含轉型。</summary>
      <returns>轉換的值。</returns>
      <param name="value">要轉換的運算式。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Property">
      <summary>取得要擷取之屬性的屬性中繼資料。</summary>
      <returns>要擷取之屬性的屬性中繼資料。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.ToKeyValuePair">
      <summary>根據此屬性運算式建立新的索引鍵/值組。</summary>
      <returns>新的索引鍵/值組，具有衍生自 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> 的索引鍵和值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression">
      <summary>     表示指定種類 (Any, All) 在指定輸入集項目上的數量詞作業。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Input">
      <summary>     取得指定輸入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Predicate">
      <summary>     取得 Boolean 述詞，應針對輸入集中的每個項目評估此述詞。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree">
      <summary>表示以標準命令樹表示的查詢作業。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>使用指定的中繼資料工作空間，初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" /> 類別的新執行個體。</summary>
      <param name="metadata">命令樹應該使用的中繼資料工作空間。</param>
      <param name="dataSpace">用於此命令樹之運算式的中繼資料必須屬於的邏輯「空間」。</param>
      <param name="query">定義查詢邏輯的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadata" /> 或 <paramref name="query" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataSpace" /> 並非代表有效的資料空間。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Boolean)">
      <summary>使用指定的中繼資料工作空間，初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" /> 類別的新執行個體。</summary>
      <param name="metadata">命令樹應該使用的中繼資料工作空間。</param>
      <param name="dataSpace">用於此命令樹之運算式的中繼資料必須屬於的邏輯「空間」。</param>
      <param name="query">定義查詢邏輯的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="validate">true 表示驗證樹狀結構，否則為 false。當設為 false，樹狀結構的驗證會關閉。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadata" /> 或 <paramref name="query" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataSpace" /> 並非代表有效的資料空間。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" /> 類別的新執行個體。</summary>
      <param name="metadata">命令樹應該使用的中繼資料工作空間。</param>
      <param name="dataSpace">用於此命令樹之運算式的中繼資料必須屬於的邏輯「空間」。</param>
      <param name="query">定義查詢邏輯的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="validate">true 表示驗證樹狀結構，否則為 false。當設為 false，樹狀結構的驗證會關閉。</param>
      <param name="useDatabaseNullSemantics">true 表示使用資料庫 null 語意，否則為 false。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.CommandTreeKind">
      <summary>取得此命令樹的類型。</summary>
      <returns>此命令樹的類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.Query">
      <summary>取得定義查詢邏輯的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>定義查詢邏輯的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression">
      <summary>     表示給定實體集內特定執行個體的 (強類型) 參考。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.EntitySet">
      <summary>     取得包含執行個體之實體集的中繼資料。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression">
      <summary>     表示要擷取指定之參考的索引鍵值，做為資料列。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression">
      <summary>     已知「來源」角色、「目標」角色和來源角色執行個體，表示 (組合或關聯) 關聯性的巡覽</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom">
      <summary>     取得巡覽起點關聯性端點的中繼資料</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateTo">
      <summary>     取得巡覽終點關聯性端點的中繼資料</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigationSource">
      <summary>     取得 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，指定巡覽起點的「來源」關聯性端點的執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Relationship">
      <summary>     取得要在其上進行巡覽之關聯性的中繼資料</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression">
      <summary>     表示「掃描」給定實體集的所有元素。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Target">
      <summary>     取得所參考之實體集或關聯性集合的中繼資料。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSetClause">
      <summary>     在設定屬性值的修改作業中指定子句。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSetClause.Property">
      <summary>     取得<see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，以指定應更新的屬性。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSetClause.Value">
      <summary>     取得<see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，以指定用來更新屬性的新值。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression">
      <summary>     代表在特定排序索引鍵描述的排序作業之後，略過輸入集中指定之項目數的作業。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Count">
      <summary>     取得運算式，指定從輸入集合略過的項目數。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Input">
      <summary>     取得指定輸入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.SortOrder">
      <summary>     取得 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> 清單，此清單定義排序次序。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause">
      <summary>     指定排序索引鍵，以當做 DbSortExpression 中排序次序的一部分。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Ascending">
      <summary>     取得布林值，此值表示此排序索引鍵是否遞增排序。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Collation">
      <summary>     取得字串值，此值會指定此排序鍵的定序。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Expression">
      <summary>     取得 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，此實體會提供此排序索引鍵的值。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression">
      <summary>     表示根據指定排序鍵套用至指定輸入集項目的排序作業。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Input">
      <summary>     取得指定輸入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.SortOrder">
      <summary>     取得 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> 清單，此清單定義排序次序。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression">
      <summary>     表示將單一引數轉換成指定之類型的類型轉換。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression">
      <summary>     接受單一運算式運算元之運算式的抽象基底類型</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression.Argument">
      <summary>     取得定義引數的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression">
      <summary>     表示左右運算元之間的聯集 (不移除重複項目) 作業。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree">
      <summary>表示以命令樹表示的單一資料列更新作業。此類別無法被繼承。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree" /> 類別的新執行個體。</summary>
      <param name="metadata">此命令將採用的模型。</param>
      <param name="dataSpace">資料空間。</param>
      <param name="target">資料操作語言 (DML) 作業的目標資料表。</param>
      <param name="predicate">用來判斷所應更新之目標集合成員的述詞。</param>
      <param name="setClauses">定義更新作業的更新集子句清單。</param>
      <param name="returning">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它會根據修改的資料列指定要傳回的結果投影。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.CommandTreeKind">
      <summary>取得此命令樹的類型。</summary>
      <returns>此命令樹的類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Predicate">
      <summary>取得 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，以指定用來判斷所應更新之目標集合成員的述詞。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，會指定用來判斷所應更新之目標集合成員的述詞。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Returning">
      <summary>取得 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，以根據修改的資料列指定要傳回的結果投影。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它會根據修改的資料列指定要傳回的結果投影。null 表示不應該從此命令傳回任何結果。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.SetClauses">
      <summary>取得定義更新作業的更新集子句清單。</summary>
      <returns>定義更新作業的更新集子句清單。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression">
      <summary>     表示目前在範圍內之變數的參考。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     造訪者模式方法，適用於不產生結果值之運算式造訪者。</summary>
      <param name="visitor"> DbExpressionVisitor 的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     造訪者模式方法，適用於會產生特定類型的結果值之運算式造訪者。</summary>
      <param name="visitor"> 類型 DbExpressionVisitor 的執行個體，此執行個體會產生 TResultType 類型的結果值。</param>
      <typeparam name="TResultType">     visitor 所產生之結果的類型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.VariableName">
      <summary>     取得參考變數的名稱。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor">
      <summary>從指定的根運算式造訪運算式樹狀架構的每個項目。如果任何項目有所變更，樹狀結構會重建回根目錄，並傳回新的根運算式；否則會傳回原始的根運算式。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnEnterScope(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>表示以指定之範圍變數輸入運算式造訪者範圍的事件。</summary>
      <param name="scopeVariables">範圍變數的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnExitScope">
      <summary>結束運算式造訪者的範圍。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnExpressionReplaced(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>以運算式造訪者的新運算式取代舊運算式。</summary>
      <param name="oldExpression">舊運算式。</param>
      <param name="newExpression">新運算式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnVariableRebound(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>表示變數因為運算式造訪者而重新繫結的事件。</summary>
      <param name="fromVarRef">變數的位置。</param>
      <param name="toVarRef">變數重新繫結所在的參考。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>實作邏輯 AND 運算式的造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbAndExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>針對指定之輸入集中每個項目所指定函式的引動過程，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbApplyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>針對套用至數值引數的算術運算，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbArithmeticExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>實作 When、Then 和 Else 子句的造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbCaseExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>針對將單一引數轉換成指定之類型的類型轉換，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbCastExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>針對套用至兩個引數的比較作業，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbComparisonExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>針對不同種類的常數，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbConstantExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>針對給定集合引數之間的無條件聯結 (Join) 作業，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbCrossJoinExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>針對根據所指定參考擷取實體的運算式，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbDerefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>針對從指定的集合引數中移除的重複項目，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbDistinctExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>針對將指定的集合引數轉換成單一物件的過程，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbElementExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>針對從基礎實體執行個體中擷取參考的運算式，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbEntityRefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>針對左右運算元之間的集合相減作業，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbExceptExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>針對運算式類型所需的基本功能，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>針對用來篩選輸入集所套用的述詞，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbFilterExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>針對函式的引動過程，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbFunctionExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>依作業實作群組的造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbGroupByExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>實作 DbInExpression 的造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbInExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>針對左右運算元之間的集合交集作業，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbIntersectExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>針對套用至單一集合引數的空集合判斷，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbIsEmptyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>針對套用至單一引數的 null 判斷，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbIsNullExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>實作造訪者模式，對照所指定類型進行單一引數的類型比較。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbIsOfExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>針對在指定的聯結條件 (Join Condition) 下，於給定集合引數之間的內部聯結 (Inner Join)、左外部聯結 (Left Outer Join) 或完整外部聯結 (Full Outer Join) 作業，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbJoinExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>實作造訪者模式，將 Lambda 函式套用至 DbExpression 物件所表示的引數。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbLambdaExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>實作造訪者模式，對指定的模式與選擇性逸出字串進行字串比較。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbLikeExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>實作造訪者模式，將引數集合中的項目數目限制為指定的限制值。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbLimitExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>實作造訪者模式，以建構所指定類型 (包括集合和記錄類型) 的新執行個體。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbNewInstanceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>針對單一布林引數的邏輯 NOT，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbNotExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>實作造訪者模式，以參考具類型的 null 常值。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbNullExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>實作造訪者模式，以從給定集合引數擷取所指定類型的項目。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbOfTypeExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>針對兩個布林引數的邏輯 OR，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbOrExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>實作造訪者模式，以參考在包含此運算式之命令樹上所宣告的參數。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbParameterReferenceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>實作造訪者模式，以在指定的運算式上投影指定的輸入集。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbProjectExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>實作造訪者模式，以擷取執行個體屬性。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbPropertyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>針對在所指定輸入集的項目上所指定類型的數量詞作業，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbQuantifierExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>針對實體集內特定執行個體的強類型參考，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbRefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>實作造訪者模式，以從基礎參考值擷取索引鍵值。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbRefKeyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>實作造訪者模式以導覽關聯性。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbRelationshipNavigationExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>實作造訪者模式，以掃描實體集或關聯性集合 (如 Target 屬性所表示)。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbScanExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>實作略過運算式的造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbSkipExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>實作排序索引鍵的造訪者模式，該索引鍵可做為排序次序的一部分。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbSortExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>針對套用至多型引數的類型轉換作業，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbTreatExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>針對左右運算元之間的聯集作業，實作造訪者模式。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbUnionAllExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>實作造訪者模式，以參考目前範圍中的變數。</summary>
      <returns>實作的造訪者。</returns>
      <param name="expression">所造訪的 DbVariableReferenceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitAggregate(System.Data.Entity.Core.Common.CommandTrees.DbAggregate)">
      <summary>實作彙總的造訪者模式。</summary>
      <returns>已實作的造訪者模式。</returns>
      <param name="aggregate">要造訪的彙總。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitEntitySet(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>實作實體集的造訪者模式。</summary>
      <returns>已實作的造訪者模式。</returns>
      <param name="entitySet">實體集。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpression(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>實作運算式的造訪者模式。</summary>
      <returns>已實作的造訪者模式。</returns>
      <param name="expression">運算式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBinding(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>實作運算式繫結的造訪者模式。</summary>
      <returns>已實作的造訪者模式。</returns>
      <param name="binding">運算式繫結。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBindingList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})">
      <summary>實作運算式繫結清單的造訪者模式。</summary>
      <returns>已實作的造訪者模式。</returns>
      <param name="list">運算式繫結清單。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>實作運算式清單的造訪者模式。</summary>
      <returns>已實作的造訪者模式。</returns>
      <param name="list">運算式清單。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitFunction(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>實作函式的造訪者模式。</summary>
      <returns>已實作的造訪者模式。</returns>
      <param name="functionMetadata">函式中繼資料。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitFunctionAggregate(System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate)">
      <summary>實作函式彙總的造訪者模式。</summary>
      <returns>已實作的造訪者模式。</returns>
      <param name="aggregate">彙總。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate)">
      <summary>實作群組彙總的造訪者模式。</summary>
      <returns>已實作的造訪者模式。</returns>
      <param name="aggregate">彙總。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupExpressionBinding(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>實作群組運算式繫結的造訪者模式。</summary>
      <returns>已實作的造訪者模式。</returns>
      <param name="binding">繫結。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitLambda(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>實作 Lambda 函式的造訪者模式。</summary>
      <returns>已實作的造訪者模式。</returns>
      <param name="lambda">lambda 函式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitSortClause(System.Data.Entity.Core.Common.CommandTrees.DbSortClause)">
      <summary>實作 sort 子句的造訪者模式。</summary>
      <returns>已實作的造訪者模式。</returns>
      <param name="clause">sort 子句。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitSortOrder(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})">
      <summary>實作排序次序的造訪者模式。</summary>
      <returns>已實作的造訪者模式。</returns>
      <param name="sortOrder">排序次序。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitType(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>實作類型的造訪者模式。</summary>
      <returns>已實作的造訪者模式。</returns>
      <param name="type">類型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitTypeUsage(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>實作類型使用狀況的造訪者模式。</summary>
      <returns>已實作的造訪者模式。</returns>
      <param name="type">類型。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder">
      <summary>提供用於建構 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 的應用程式開發介面，並允許將該應用程式開發介面做為運算式類型本身的擴充方法加以存取。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" />。</summary>
      <returns>具有給定函式及引數之參考的新函式彙總。函式彙總的 Distinct 屬性會有 false 值。</returns>
      <param name="function">定義彙總作業的函式。</param>
      <param name="argument">應該計算其彙總函式的引數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 或 <paramref name="argument" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 不是彙總函數或具有超過一個引數，或者 <paramref name="argument" /> 的結果類型不等於或不可提升至 <paramref name="function" /> 的參數類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立以不同方式套用的新 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" />。</summary>
      <returns>具有指定函式及引數之參考的新函式彙總。函式彙總的 Distinct 屬性會有 true 值。</returns>
      <param name="function">定義彙總作業的函式。</param>
      <param name="argument">應該計算其彙總函式的引數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 或 <paramref name="argument" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 不是彙總函數或具有超過一個引數，或者 <paramref name="argument" /> 的結果類型不等於或不可提升至 <paramref name="function" /> 的參數類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />，此物件可判斷指定的述詞是否針對輸入集的所有項目執行作業。</summary>
      <returns>表示 All 運算的新 DbQuantifierExpression。</returns>
      <param name="source">指定輸入集的運算式。</param>
      <param name="predicate">方法，表示要針對輸入集中每個成員進行評估的述詞。此方法必須產生具有可提供述詞邏輯之布林結果類型的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 沒有集合結果類型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> 所產生的陳述式沒有布林值結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />，此物件可判斷指定的述詞是否針對輸入集的所有項目執行作業。</summary>
      <returns>表示 All 運算的新 DbQuantifierExpression。</returns>
      <param name="input">指定輸入集的運算式繫結。</param>
      <param name="predicate">運算式，表示要針對輸入集中每個成員進行評估的述詞。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> 所產生的陳述式沒有布林值結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" />，它會對左右引數執行邏輯 And 運算。</summary>
      <returns>具有指定引數的新 DbAndExpression。</returns>
      <param name="left">指定左引數的布林運算式。</param>
      <param name="right">指定右引數的布林運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 或 <paramref name="right" /> 沒有布林值結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，此運算式會判斷指定的集合引數是否為非空白。</summary>
      <returns>套用至具有指定引數之新 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> 的新 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />。</returns>
      <param name="source">指定輸入集的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 沒有集合結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />，此物件可判斷指定的述詞是否針對輸入集的任何項目執行作業。</summary>
      <returns> 表示 Any 運算的新 DbQuantifierExpression。</returns>
      <param name="source">指定輸入集的運算式。</param>
      <param name="predicate">方法，表示要針對輸入集中每個成員進行評估的述詞。此方法必須產生具有可提供述詞邏輯之布林結果類型的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 所產生的陳述式為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 沒有集合結果類型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> 所產生的陳述式沒有布林值結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />，此物件可判斷指定的述詞是否針對輸入集的任何項目執行作業。</summary>
      <returns>表示 Any 運算的新 DbQuantifierExpression。</returns>
      <param name="input">指定輸入集的運算式繫結。</param>
      <param name="predicate">運算式，表示要針對輸入集中每個成員進行評估的述詞。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> 沒有布林值結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbAggregate,System.String)">
      <summary>傳回指定的引數做為索引鍵/值組物件。</summary>
      <returns>索引鍵/值組物件。</returns>
      <param name="value">索引鍵/值組中的值。</param>
      <param name="alias">索引鍵/值組中的索引鍵。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>傳回指定的引數做為索引鍵/值組物件。</summary>
      <returns>索引鍵/值組物件。</returns>
      <param name="value">索引鍵/值組中的值。</param>
      <param name="alias">索引鍵/值組中的索引鍵。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />，它會使用產生的變數名稱繫結指定的運算式。</summary>
      <returns>具有指定運算式及產生之變數名稱的新運算式繫結。</returns>
      <param name="input">要繫結的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 沒有集合結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />，它會使用指定的變數名稱繫結指定的運算式。</summary>
      <returns>具有指定運算式及變數名稱的的新運算式繫結。</returns>
      <param name="input">要繫結的運算式。</param>
      <param name="varName">將用於繫結的變數名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="varName" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 沒有集合結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />。</summary>
      <returns>具有指定案例及預設結果的新 DbCaseExpression。</returns>
      <param name="whenExpressions">運算式清單，提供各種案例的條件。</param>
      <param name="thenExpressions">運算式清單，提供各種案例的結果。</param>
      <param name="elseExpression">運算式，定義在沒有符合任何案例時的結果。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="whenExpressions" /> 或 <paramref name="thenExpressions" /> 為 null 或包含 null，或是 <paramref name="elseExpression" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="whenExpressions" /> 或 <paramref name="thenExpressions" /> 是空的，或者 <paramref name="whenExpressions" /> 內含的運算式不是布林值結果類型，或是沒有 <paramref name="thenExpressions" /> 和 <paramref name="elseExpression" /> 中所有運算式的共同結果類型存在。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" />，它會將轉換運算套用至多型引數。</summary>
      <returns>具有指定引數及目標類型的新 DbCastExpression。</returns>
      <param name="argument">要套用轉換的引數。</param>
      <param name="toType">類型中繼資料，其指定要轉換到的類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="toType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">指定的轉型無效。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>使用給定的常數值，建立指定基本類型的新 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />。</summary>
      <returns>具有指定值且結果類型為 <paramref name="constantType" /> 的新 DbConstantExpression。</returns>
      <param name="constantType">常數值的類型。</param>
      <param name="value">要表示的常數值。</param>
      <exception cref="T:System.ArgumentNullException">valueconstantType</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是有效的常數類型之執行個體，<paramref name="constantType" /> 不表示基本的類型，且 <paramref name="value" /> 屬於不同的基本類型 (由 <paramref name="constantType" /> 表示)。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Object)">
      <summary>使用指定的常數值，建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />。</summary>
      <returns>具有指定值的新 DbConstantExpression。</returns>
      <param name="value">要表示的常數值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是有效常數類型的執行個體。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>建立會根據索引鍵值將特定實體參考編碼的新 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />。</summary>
      <returns>新的 DbRefExpression，參考在指定的實體集中具有指定的索引鍵值的項目。</returns>
      <param name="entitySet">參考之項目位在其中的實體集。</param>
      <param name="keyValues">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> s that provide the key values.這些運算式必須 (在數目、類型和順序方面) 符合參考之實體類型的索引鍵屬性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> 為 null，或是 <paramref name="keyValues" /> 為 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyValues" /> 不符合 <paramref name="entitySet" /> 之元素類型所宣告的索引鍵成員計數，或者 <paramref name="keyValues" /> 內含運算式的結果類型與對應之索引鍵成員的類型不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>建立會根據索引鍵值將特定實體參考編碼的新 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />。</summary>
      <returns>新的 DbRefExpression，參考在指定的實體集中具有指定的索引鍵值的項目。</returns>
      <param name="entitySet">參考之項目位在其中的實體集。</param>
      <param name="keyValues">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> s that provide the key values.這些運算式必須 (在數目、類型和順序方面) 符合參考之實體類型的索引鍵屬性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> 為 null，或是 <paramref name="keyValues" /> 為 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyValues" /> 計數與 <paramref name="entitySet" /> 之索引鍵成員的項目類型所宣告的索引鍵成員計數不相符，或是 <paramref name="keyValues" /> 包含具有與對應索引鍵成員類型不相容之結果類型的陳述式。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />，它會根據索引鍵值將給定類型的特定實體參考編碼。</summary>
      <returns>新的 DbRefExpression，參考在指定的實體集中具有指定的索引鍵值的項目。</returns>
      <param name="entitySet">參考之項目位在其中的實體集。</param>
      <param name="entityType">所參考實體的特定類型。此實體類型必須與實體集的元素類型來自相同階層。</param>
      <param name="keyValues">提供索引鍵值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 集合。這些運算式必須 (在數目、類型和順序方面) 符合參考之實體類型的索引鍵屬性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> 或 <paramref name="entityType" /> 為 null，或是 <paramref name="keyValues" /> 為 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> 不屬於 <paramref name="entitySet" /> 之元素類型的相同階層 (子類型、超類型或相同類型)。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyValues" /> 計數與 <paramref name="entitySet" /> 之索引鍵成員的項目類型所宣告的索引鍵成員計數不相符，或是 <paramref name="keyValues" /> 包含具有與對應索引鍵成員類型不相容之結果類型的陳述式。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />，它會根據索引鍵值將給定類型的特定實體參考編碼。</summary>
      <returns>新的 DbRefExpression，參考在指定的實體集中具有指定的索引鍵值的項目。</returns>
      <param name="entitySet">參考之項目位在其中的實體集。</param>
      <param name="entityType">所參考實體的特定類型。此實體類型必須與實體集的元素類型來自相同階層。</param>
      <param name="keyValues">提供索引鍵值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 集合。這些運算式必須 (在數目、類型和順序方面) 符合參考之實體類型的索引鍵屬性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> 或 <paramref name="entityType" /> 為 null，或是 <paramref name="keyValues" /> 為 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> 不屬於 <paramref name="entitySet" /> 之元素類型的相同類型階層 (子類型、超類型或相同類型)。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyValues" /> 計數與 <paramref name="entitySet" /> 之索引鍵成員的項目類型所宣告的索引鍵成員計數不相符，或是 <paramref name="keyValues" /> 包含具有與對應索引鍵成員類型不相容之結果類型的陳述式。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />，它會針對給定輸入集的每個項目評估給定的 <paramref name="apply" /> 運算式一次，以產生具有對應的輸入和套用資料行的資料列集合。其中不包含 <paramref name="apply" /> 評估為空集合的資料列。</summary>
      <returns>具有指定輸入及套用繫結與 CrossApply 之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的新 DbApplyExpression。</returns>
      <param name="source">指定輸入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="apply">方法，指定要針對輸入集中每個成員進行一次評估的邏輯。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="apply" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 沒有集合結果類型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="apply" /> 的結果包含為 null 的名稱或運算式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="apply" /> 的結果包含的名稱或運算式在運算式繫結中無效。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />，它會針對給定輸入集的每個項目評估給定的 <paramref name="apply" /> 運算式一次，以產生具有對應的輸入和套用資料行的資料列集合。其中不包含 <paramref name="apply" /> 評估為空集合的資料列。</summary>
      <returns>具有指定輸入及套用繫結與 CrossApply 之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的新 DbApplyExpression。</returns>
      <param name="input">指定輸入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="apply">指定要針對輸入集中每個成員進行一次評估之邏輯的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="apply" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" />，它會無條件聯結輸入運算式繫結清單所指定的集合。</summary>
      <returns>表示輸入集之無條件聯結且具有 CrossJoin 之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的新 DbCrossJoinExpression。</returns>
      <param name="inputs">指定輸入集的運算式繫結清單。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputs" /> 為 null 或是包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputs" /> 包含少於 2 個運算式繫結。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" />，它會以給定參考運算式擷取特定實體。</summary>
      <returns>擷取指定實體的新 DbDerefExpression。</returns>
      <param name="argument">提供參考的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。此運算式必須具有參考類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 為 null</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 沒有參考結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" />，它會從指定的集合引數中移除重複的項目。</summary>
      <returns>表示套用至指定集合引數之 Distinct 運算的新 DbDistinctExpression。</returns>
      <param name="argument">運算式，定義要對其執行 Distinct 運算的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 沒有參考結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />，此運算式會將左引數除以右引數。</summary>
      <returns>表示除法運算的新 DbArithmeticExpression。</returns>
      <param name="left">指定左引數的運算式。</param>
      <param name="right">指定右引數的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 及 <paramref name="right" /> 之間不存在一般數值結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" />，它會將集合轉換成單一子句。</summary>
      <returns>DbElementExpression，表示將集合引數轉換成單一子句。</returns>
      <param name="argument">指定輸入集的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 沒有參考結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />，此運算式會比較左引數和右引數是否相等。</summary>
      <returns>表示相等比較的新 DbComparisonExpression。</returns>
      <param name="left">指定左引數的運算式。</param>
      <param name="right">指定右引數的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 及 <paramref name="right" /> 之間不存在一般數值結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" />，此運算式會從左集合引數減去右集合引數。</summary>
      <returns>新的 DbExceptExpression，表示左引數與右引數的差異。</returns>
      <param name="left">定義左集合引數的運算式。</param>
      <param name="right">定義右集合引數的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> and <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，此運算式會判斷指定的集合引數是否為非空白。</summary>
      <returns>套用至具有指定引數之新 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> 的新 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />。</returns>
      <param name="argument">指定輸入集的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 沒有集合結果類型。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False">
      <summary>使用布林值 false 建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />。</summary>
      <returns>布林值為 false 的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />，它會使用指定的述詞篩選給定輸入集的項目。</summary>
      <returns>產生已篩選之集合的新 DbFilterExpression。</returns>
      <param name="input">指定輸入集的運算式繫結。</param>
      <param name="predicate">運算式，表示要針對輸入集中每個成員進行評估的述詞。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> 沒有布林值結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>使用 FullOuterJoin 做為 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />，建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />，它會聯結由左右運算式針對指定的聯結條件所指定的集合。</summary>
      <returns>具有 FullOuterJoin 之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的新 DbJoinExpression，表示套用至指定聯結條件下之左邊及右邊輸入集的完整外部聯結作業。</returns>
      <param name="left">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the left set argument.</param>
      <param name="right">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the right set argument.</param>
      <param name="joinCondition">方法，表示要聯結的條件。此方法所產生的運算式，必須具有可提供聯結條件邏輯的布林結果類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 或 <paramref name="right" /> 沒有集合結果類型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="joinCondition" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> does not have a Boolean result type.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>使用 FullOuterJoin 做為 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />，建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />，它會聯結由左右運算式繫結針對指定的聯結條件所指定的集合。</summary>
      <returns>具有 FullOuterJoin 之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的新 DbJoinExpression，表示套用至指定聯結條件下之左邊及右邊輸入集的完整外部聯結作業。</returns>
      <param name="left">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the left set argument.</param>
      <param name="right">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the right set argument.</param>
      <param name="joinCondition">運算式，指定要聯結的條件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> 沒有布林值結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" />，它會擷取結構化格式中指定實體的參考。</summary>
      <returns>擷取指定實體參考的新 DbEntityRefExpression。</returns>
      <param name="argument">提供實體的運算式。此運算式必須是實體結果類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 沒有實體結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" />，它會擷取結構化格式中指定參考的索引鍵值。</summary>
      <returns>擷取指定參考之索引鍵值的新 DbRefKeyExpression。</returns>
      <param name="argument">提供參考的運算式。此運算式必須是具有實體元素類型的參考類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 沒有實體結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />，此運算式會判斷左引數是否大於右引數。</summary>
      <returns>表示大於比較的新 DbComparisonExpression。</returns>
      <param name="left">指定左引數的運算式。</param>
      <param name="right">指定右引數的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> and <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />，此運算式會判斷左引數是否大於或等於右引數。</summary>
      <returns>表示大於或等於比較的新 DbComparisonExpression。</returns>
      <param name="left">指定左引數的運算式。</param>
      <param name="right">指定右引數的運算式。</param>
      <exception cref="T:System.ArgumentNullException">left 或 right 為 null。</exception>
      <exception cref="T:System.ArgumentException">left 和 right 之間沒有順序比較的結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>在指定的引數建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate" />。</summary>
      <returns>新群組彙總，表示特定引數所參考的群組元素。</returns>
      <param name="argument">要執行巢狀化作業的引數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的群組運算式繫結，此繫結會使用產生的變數和群組變數名稱，繫結給定的運算式。</summary>
      <returns>具有指定運算式及產生之變數名稱與群組變數名稱的新群組運算式繫結。</returns>
      <param name="input">要繫結的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 沒有集合結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String,System.String)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />，此繫結會使用指定的變數名稱和群組變數名稱，繫結給定的運算式。</summary>
      <returns>具有指定運算式、變數名稱和群組變數名稱的新群組運算式繫結。</returns>
      <param name="input">要繫結的運算式。</param>
      <param name="varName">將用於繫結的變數名稱。</param>
      <param name="groupVarName">變數名稱，在 group-by 運算式中使用新的群組運算式繫結時用於參考群組。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="varName" /> 或 <paramref name="groupVarName" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 沒有集合結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbAggregate}})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" />，它會根據指定的群組索引鍵分組輸入集項目，並套用指定的彙總。</summary>
      <returns>具有指定輸入集、群組索引鍵和彙總的新 DbGroupByExpression。</returns>
      <param name="input">指定輸入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />。</param>
      <param name="keys">字串-運算式組的清單，用於定義分組的資料行。</param>
      <param name="aggregates">指定要套用之彙總的運算式清單。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="keys" /> 或 <paramref name="aggregates" /> 為 null，<paramref name="keys" /> 包含 null 索引鍵資料行名稱或運算式，或者彙總包含 null 彙總資料行名稱或 <paramref name="aggregate" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keys" /> 和 <paramref name="aggregates" /> 都是空的，或是指定了無效或重複的資料行名稱。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.In(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression})">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression" />，用以比對指定運算式的結果與指定清單中常數運算式的結果。</summary>
      <returns>如果 DbConstantExpression 清單不是空的，則為具有指定引數的新 DbInExpression，否則為 false 常數運算式。</returns>
      <param name="expression">要比對的 DbExpression。</param>
      <param name="list">要測試是否相符的 DbConstantExpression 清單。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="list" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" /> 的結果類型與 <paramref name="list" /> 中運算式的結果類型不相同。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>使用 InnerJoin 做為 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />，建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />，它會聯結由左右運算式針對指定的聯結條件所指定的集合。</summary>
      <returns>具有 InnerJoin 之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的新 DbJoinExpression，表示套用至指定聯結條件下之左邊及右邊輸入集的內部聯結作業。</returns>
      <param name="left">指定左集合引數的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="right">指定右集合引數的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="joinCondition">方法，表示要聯結的條件。此方法所產生的運算式，必須具有可提供聯結條件邏輯的布林結果類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 或 <paramref name="right" /> 沒有集合結果類型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="joinCondition" /> 所產生的陳述式為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> 所產生的陳述式沒有布林值結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>使用 InnerJoin 做為 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />，建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />，它會聯結由左右運算式針對指定的聯結條件所指定的集合。</summary>
      <returns>具有 InnerJoin 之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的新 DbJoinExpression，表示套用至指定聯結條件下之左邊及右邊輸入集的內部聯結作業。</returns>
      <param name="left">指定左集合引數的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="right">指定右集合引數的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="joinCondition">運算式，指定要聯結的條件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> 沒有布林值結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" />，此運算式會計算左右集合引數的交集。</summary>
      <returns>新的 DbIntersectExpression，表示左右引數的交集。</returns>
      <param name="left">定義左集合引數的運算式。</param>
      <param name="right">定義右集合引數的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 right 為 <paramref name="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 及 <paramref name="right" /> 之間不存在一般數值結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />，表示要讓給定引數套用指定的 Lambda 函式。</summary>
      <returns>表示 Lambda 函式套用的新 DbLambdaExpression。</returns>
      <param name="lambda">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> 執行個體，表示要套用的 Lambda 函式。</param>
      <param name="arguments">提供引數的運算式清單。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> 為 null，或是 <paramref name="arguments" /> 為 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 不等於 <paramref name="lambda" /> 所宣告的變數數目，或 <paramref name="arguments" /> 包含結果類型不等於或不可提升至對應變數類型的陳述式。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />，表示要讓給定引數套用指定的 Lambda 函式。</summary>
      <returns>表示 Lambda 函式套用的新 DbLambdaExpression。</returns>
      <param name="lambda">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> 執行個體，表示要套用的 Lambda 函式。</param>
      <param name="arguments">提供引數的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> 為 null，或是 <paramref name="arguments" /> 為 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 不等於 <paramref name="lambda" /> 所宣告的變數數目，或 <paramref name="arguments" /> 包含結果類型不等於或不可提升至對應變數類型的陳述式。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，此運算式表示要使用給定的引數叫用指定的函式。</summary>
      <returns>表示函式引動過程的新 DbFunctionExpression。</returns>
      <param name="function">要叫用之函式的中繼資料。</param>
      <param name="arguments">提供引數給函式的運算式清單。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 為 null，或是 <paramref name="arguments" /> 為 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 不等於 <paramref name="function" /> 所宣告的變數數目，或 <paramref name="arguments" /> 包含結果類型不等於或不可提升至對應變數類型的陳述式。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，此運算式表示要使用給定的引數叫用指定的函式。</summary>
      <returns>表示函式引動過程的新 DbFunctionExpression。</returns>
      <param name="function">要叫用之函式的中繼資料。</param>
      <param name="arguments">提供引數給函式的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 為 null，或是 <paramref name="arguments" /> 為 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 不等於 <paramref name="function" /> 所宣告的變數數目，或 <paramref name="arguments" /> 包含結果類型不等於或不可提升至對應變數類型的陳述式。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />，此運算式會判斷指定的集合引數是否為空集合。</summary>
      <returns>具有指定引數的新 DbIsEmptyExpression。</returns>
      <param name="argument">指定輸入集的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 沒有集合結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" />，它會判斷指定的引數是否為 null。</summary>
      <returns>具有指定引數的新 DbIsNullExpression。</returns>
      <param name="argument">指定引數的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 有集合結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" />，此運算式會判斷給定的引數是否為指定類型或子類型。</summary>
      <returns>具有指定執行個體和類型以及 DbExpressionKind IsOf 的新 DbIsOfExpression。</returns>
      <param name="argument">指定執行個體的運算式。</param>
      <param name="type">類型中繼資料，指定要與執行個體結果類型比較的類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 與 <paramref name="argument" /> 的結果類型不在相同的類型階層中。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> 運算式，此運算式會判斷給定的引數是否為指定類型，而且只是該類型 (而非子類型)。</summary>
      <returns>具有指定執行個體和類型以及 DbExpressionKind IsOfOnly 的新 DbIsOfExpression。</returns>
      <param name="argument">指定執行個體的運算式。</param>
      <param name="type">類型中繼資料，指定要與執行個體結果類型比較的類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 與 <paramref name="argument" /> 的結果類型不在相同的類型階層中。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>使用 InnerJoin 做為 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />，建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />，它會依據指定內外部索引鍵間的相等條件，聯結由內外部運算式所指定的集合。</summary>
      <returns>具有 InnerJoin 之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的新 DbJoinExpression，表示套用至比較外部與內部索引鍵值是否相等的聯結條件下之左邊及右邊輸入集的內部聯結作業。</returns>
      <param name="outer">指定外部集合引數的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="inner">指定內部集合引數的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="outerKey">方法，指定外部索引鍵值要如何衍生自外部集合項目。</param>
      <param name="innerKey">方法，指定內部索引鍵值要如何衍生自內部集合項目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />、<paramref name="inner" />、<paramref name="outerKey" /> 或 <paramref name="innerKey" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outerKey" /> 或 <paramref name="innerKey" /> 沒有集合結果類型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outerKey" /> or <paramref name="innerKey" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outerKey" /> 或 <paramref name="innerKey" /> 所產生的運算式無法進行相等比較。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>使用 InnerJoin 做為 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />，建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />，它會將指定的選擇器投射在內外部運算式所指定的集合，這裡的內外部運算式是依據指定內外部索引鍵間的相等條件而聯結的。</summary>
      <returns>以指定選取器做為投影而以新 DbJoinExpression 做為其輸入的新 DbProjectExpression。輸入 DbJoinExpression 是以 InnerJoin 的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 建立而成，表示在比較外部與內部索引鍵值是否相等的聯結條件下套用至左方和右方輸入集合的內部聯結作業。</returns>
      <param name="outer">指定外部集合引數的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="inner">指定內部集合引數的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="outerKey">方法，指定外部索引鍵值要如何衍生自外部集合項目。</param>
      <param name="innerKey">方法，指定內部索引鍵值要如何衍生自內部集合項目。</param>
      <param name="selector">方法，指定結果集項目要如何衍生自內外部集合項目。此方法所產生的類型執行個體，必須與 Join 相容並且可以解析成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。<paramref name="TSelector" /> 的相容性需求已在備註中說明。</param>
      <typeparam name="TSelector">選擇器的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />、<paramref name="inner" />、<paramref name="outerKey" />、<paramref name="innerKey" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 沒有集合結果類型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outerKey" /> 或 <paramref name="innerKey" /> 所產生的陳述式為 null。</exception>
      <exception cref="T:System.ArgumentNullException">在轉換為 DbExpression 之後，<paramref name="selector" /> 的結果為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outerKey" /> 和 <paramref name="innerKey" /> 所產生的運算式不相容，無法進行相等比較。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="selector" /> 的結果與 SelectMany 不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>使用指定的內嵌 Lambda 函式實作和型式參數建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />。</summary>
      <returns>新 DbLambda，描述具有指定主體及型式參數之內嵌 Lambda 函式。</returns>
      <param name="body">定義 Lambda 函式邏輯的運算式。</param>
      <param name="variables">代表 Lambda 函數之型式參數的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> 集合。這些變數可在 <paramref name="body" /> 運算式中使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> 為 null 或包含 null，或是 <paramref name="body" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variables" /> 包含一個以上具有相同變數名稱的項目。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>使用指定的內嵌 Lambda 函式實作和型式參數建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />。</summary>
      <returns>新 DbLambda，描述具有指定主體及型式參數之內嵌 Lambda 函式。</returns>
      <param name="body">定義 Lambda 函式邏輯的運算式。</param>
      <param name="variables">代表 Lambda 函數之型式參數的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> 集合。這些變數可在 body 運算式中使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> 為 null 或包含 null，或是 <paramref name="body" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variables" /> 包含一個以上具有相同變數名稱的項目。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>使用 LeftOuterJoin 做為 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />，建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />，它會聯結由左右運算式針對指定的聯結條件所指定的集合。</summary>
      <returns>具有 LeftOuterJoin 之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的新 DbJoinExpression，表示套用至指定聯結條件下之左邊及右邊輸入集的左外部聯結作業。</returns>
      <param name="left">指定左集合引數的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="right">指定右集合引數的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="joinCondition">方法，表示要聯結的條件。此方法所產生的運算式，必須具有可提供聯結條件邏輯的布林結果類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 或 <paramref name="right" /> 沒有集合結果類型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="joinCondition" /> 所產生的陳述式為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> 所產生的陳述式沒有布林值結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>使用 LeftOuterJoin 做為 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />，建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />，它會聯結由左右運算式繫結針對指定的聯結條件所指定的集合。</summary>
      <returns>具有 LeftOuterJoin 之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的新 DbJoinExpression，表示套用至指定聯結條件下之左邊及右邊輸入集的左外部聯結作業。</returns>
      <param name="left">指定左集合引數的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="right">指定右集合引數的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="joinCondition">運算式，指定要聯結的條件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> 沒有布林值結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />，此運算式會判斷左引數是否小於右引數。</summary>
      <returns>表示小於比較的新 DbComparisonExpression。</returns>
      <param name="left">指定左引數的運算式。</param>
      <param name="right">指定右引數的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 及 <paramref name="right" /> 之間不存在一般可比較順序的結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />，此運算式會判斷左引數是否小於或等於右引數。</summary>
      <returns>表示小於或等於比較的新 DbComparisonExpression。</returns>
      <param name="left">指定左引數的運算式。</param>
      <param name="right">指定右引數的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 及 <paramref name="right" /> 之間不存在一般可比較順序的結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />，此運算式會比較指定的輸入字串與指定的模式。</summary>
      <returns>具有指定輸入、模式及 Null 逸出的新 DbLikeExpression。</returns>
      <param name="argument">指定輸入字串的運算式。</param>
      <param name="pattern">指定模式比對字串的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="pattern" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 或 <paramref name="pattern" /> 沒有字串結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />，它會藉由使用選擇性的逸出字串，比較指定的輸入字串與給定的模式。</summary>
      <returns>具有指定輸入、模式及逸出的新 DbLikeExpression。</returns>
      <param name="argument">指定輸入字串的運算式。</param>
      <param name="pattern">指定模式比對字串的運算式。</param>
      <param name="escape">指定逸出字串的選擇性運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />, <paramref name="pattern" /> 或逸出為 <paramref name="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />、<paramref name="pattern" /> 或逸出沒有字串結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />，它會將 Argument 集合中的項目數目限制為指定的計數限制值。輸出中不包含相等的結果。</summary>
      <returns>具有指定引數及計數限制值但不含相等結果的新 DbLimitExpression。</returns>
      <param name="argument">指定輸入集合的運算式。</param>
      <param name="count">指定限制值的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="count" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 沒有集合結果類型，或者 <paramref name="count" /> 沒有等於或可提升為 64 位元整數類型的結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />，此運算式會從左引數減去右引數。</summary>
      <returns>表示減法運算的新 DbArithmeticExpression。</returns>
      <param name="left">指定左引數的運算式。</param>
      <param name="right">指定右引數的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 及 <paramref name="right" /> 之間不存在一般可比較順序的結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />，此運算式會計算左引數除以右引數的餘數。</summary>
      <returns>表示模數運算的新 DbArithmeticExpression。</returns>
      <param name="left">指定左引數的運算式。</param>
      <param name="right">指定右引數的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 及 <paramref name="right" /> 之間不存在一般可比較順序的結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />，此運算式會將左引數乘以右引數。</summary>
      <returns>表示乘法運算的新 DbArithmeticExpression。</returns>
      <param name="left">指定左引數的運算式。</param>
      <param name="right">指定右引數的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 及 <paramref name="right" /> 之間不存在一般可比較順序的結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />，表示 (組合或關聯) 關聯性的導覽。</summary>
      <returns>新的 DbRelationshipNavigationExpression，表示與指定導覽來源執行個體間指定關聯類型的指定往返關聯性端點導覽。</returns>
      <param name="navigateFrom">運算式，指定導覽起點的執行個體。</param>
      <param name="fromEnd">屬性的中繼資料，代表導覽起點的關聯性端點。</param>
      <param name="toEnd">屬性的中繼資料，代表導覽目標的關聯性端點。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fromEnd" />、<paramref name="toEnd" /> 或 <paramref name="NavigateForm" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromEnd" /> 和 <paramref name="toEnd" /> 不是由相同的關聯性類型宣告，或者 <paramref name="navigateFrom" /> 的結果類型與 <paramref name="fromEnd" /> 的屬性類型不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.String,System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />，表示 (組合或關聯) 關聯性的導覽。</summary>
      <returns>新的 DbRelationshipNavigationExpression，表示與指定導覽來源執行個體間指定關聯類型的指定往返關聯性端點導覽。</returns>
      <param name="type">表示關聯性之關聯類型的中繼資料。</param>
      <param name="fromEndName">關聯類型的屬性名稱，代表導覽起點的關聯性端點。</param>
      <param name="toEndName">關聯類型的屬性名稱，代表導覽目標的關聯性端點。</param>
      <param name="navigateFrom">運算式，指定導覽起點的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />
        <paramref name="fromEndName" />、<paramref name="toEndName" /> 或 <paramref name="NavigateForm" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 未與此命令樹的中繼資料工作區相關聯，或者 <paramref name="navigateFrom" /> 與不同的命令樹相關聯，或是 <paramref name="type" /> 未宣告名稱為 <paramref name="toEndName" /> 或 <paramref name="fromEndName" /> 的關聯性端屬性，或者 <paramref name="navigateFrom" /> 的結果類型與 <paramref name="fromEndName" /> 不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />，此運算式會將引數值變成相反值。</summary>
      <returns>表示否定運算的新 DbArithmeticExpression。</returns>
      <param name="argument">指定引數的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />。如果類型引數是集合類型，則這些引數會用於指定集合的項目。否則，這些引數會用來做為新執行個體中的屬性或資料行值。</summary>
      <returns>具有指定類型及引數的新 DbNewInstanceExpression。</returns>
      <param name="instanceType">新執行個體的類型。</param>
      <param name="arguments">根據執行個體類型進行解譯以指定新執行個體值的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceType" /> 或 <paramref name="arguments" /> 為 null，或是 <paramref name="arguments" /> 包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 是空的，或內含的運算式的結果類型不符合 <paramref name="instanceType" /> 的需求 (如＜備註＞一節中所說明)。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />。如果類型引數是集合類型，則這些引數會用於指定集合的項目。否則，這些引數會用來做為新執行個體中的屬性或資料行值。</summary>
      <returns>具有指定類型及引數的新 DbNewInstanceExpression。</returns>
      <param name="instanceType">新執行個體的類型。</param>
      <param name="arguments">根據執行個體類型進行解譯以指定新執行個體值的運算式。</param>
      <exception cref="T:System.ArgumentNullException">instanceTypeargumentsarguments</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instanceType" /> 或 <paramref name="arguments" /> 為 null，或是 <paramref name="arguments" /> 包含 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />，它會建構包含指定項目的集合。集合的類型是以項目的共同類型為基礎。如果沒有共同的元素類型存在，就會擲回例外狀況。</summary>
      <returns>具有指定集合類型及引數的新 DbNewInstanceExpression。</returns>
      <param name="elements">提供集合項目的運算式清單。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> 為 null 或是包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elements" /> 是空的，或是包含的運算式沒有共同的結果類型存在。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />，它會建構包含指定項目的集合。集合的類型是以項目的共同類型為基礎。如果沒有共同的元素類型存在，就會擲回例外狀況。</summary>
      <returns>具有指定集合類型及引數的新 DbNewInstanceExpression。</returns>
      <param name="elements">提供集合項目的運算式清單。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> 為 null 或是包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elements" /> 是空的，或是包含的運算式沒有共同的結果類型存在。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />，此運算式會建構指定集合類型的空集合。</summary>
      <returns>具有指定集合類型及空白 Arguments 清單的新 DbNewInstanceExpression。</returns>
      <param name="collectionType">要建立之集合的類型中繼資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collectionType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionType" /> 不是集合類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />，此運算式會使用指定的具名資料行和給定值 (如運算式所指定) 產生資料列。</summary>
      <returns>表示資料列建構的新 DbNewInstanceExpression。</returns>
      <param name="columnValues">string-DbExpression 索引鍵值組清單，用於定義資料列的結構和值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="columnValues" /> 為 null 或包含擁有 null 資料行名稱或運算式的項目。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="columnValues" /> 是空的，或包含重複或無效的資料行名稱。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />，此運算式會執行給定引數的邏輯否定運算。</summary>
      <returns>具有指定引數的新 DbNotExpression。</returns>
      <param name="argument">指定引數的布林運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">argument 沒有布林值結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />，此運算式會比較左引數和右引數是否不相等。</summary>
      <returns>表示不等比較的新 DbComparisonExpression。</returns>
      <param name="left">指定左引數的運算式。</param>
      <param name="right">指定右引數的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 和 <paramref name="right" /> 之間沒有共同的相等比較結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" />，此運算式表示具類型的 null 值。</summary>
      <returns>DbNullExpression 的執行個體。</returns>
      <param name="nullType">null 值的類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullType" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" />，它會從指定輸入集，產生具有指定類型的項目集。</summary>
      <returns>具有指定集合引數和類型以及 <see cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType" /> 之 ExpressionKind 的新 DbOfTypeExpression。</returns>
      <param name="argument">指定輸入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="type">類型中繼資料，輸入集項目必須具有該類型，才能包含在結果集內。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 沒有集合結果 <paramref name="type" />，或者類型不是與 <paramref name="argument" /> 集合結果類型的元素類型位於相同類型階層中的類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" />，它會從指定輸入集，產生剛好具有指定類型的項目集。</summary>
      <returns>具有指定集合引數和類型以及 <see cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly" /> 之 ExpressionKind 的新 DbOfTypeExpression。</returns>
      <param name="argument">指定輸入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="type">類型中繼資料，輸入集項目必須完全符合該類型，才能包含在結果集內。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 沒有集合結果 <paramref name="type" />，或者類型不是與 <paramref name="argument" /> 集合結果類型的元素類型位於相同類型階層中的類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" />，它會對左右引數執行邏輯 Or 運算。</summary>
      <returns> 具有指定引數的新 DbOrExpression。</returns>
      <param name="left"> 指定左引數的布林運算式。</param>
      <param name="right"> 指定右引數的布林運算式。</param>
      <exception cref="T:System.ArgumentNullException">leftright</exception>
      <exception cref="T:System.ArgumentException">leftright</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />，它會依據指定的排序索引鍵，搭配遞增排序順序和預設定序 (Collation)，排序給定的輸入集。</summary>
      <returns>新 DbSortExpression，表示 order-by 作業。</returns>
      <param name="source">指定輸入集的運算式。</param>
      <param name="sortKey">方法，指定如何根據輸入集成員來衍生排序索引鍵運算式。此方法產生的運算式，必須具有提供排序索引鍵定義、可比較順序之結果類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="sortKey" /> 為 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" /> 所產生的陳述式為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 沒有集合結果類型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> 所產生的陳述式沒有可比較順序結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />，它會依據指定的排序索引鍵，搭配遞增排序順序和指定的定序 (Collation)，排序給定的輸入集。</summary>
      <returns>新 DbSortExpression，表示 order-by 作業。</returns>
      <param name="source">指定輸入集的運算式。</param>
      <param name="sortKey">方法，指定如何根據輸入集成員來衍生排序索引鍵運算式。此方法產生的運算式，必須具有提供排序索引鍵定義、可比較順序之結果類型。</param>
      <param name="collation">要做為排序依據的定序</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="sortKey" /> 或 <paramref name="collation" /> 為 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" /> 所產生的陳述式為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 沒有集合結果類型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> 沒有可相容排序字串結果類型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> 是空的或僅包含空白字元。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />，它會依據指定的排序索引鍵，搭配遞減排序順序和預設定序 (Collation)，排序給定的輸入集。</summary>
      <returns>新 DbSortExpression，表示 order-by 作業。</returns>
      <param name="source">指定輸入集的運算式。</param>
      <param name="sortKey">方法，指定如何根據輸入集成員來衍生排序索引鍵運算式。此方法產生的運算式，必須具有提供排序索引鍵定義、可比較順序之結果類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="sortKey" /> 為 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" /> 所產生的陳述式為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 沒有集合結果類型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> 所產生的陳述式沒有可相容排序字串結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />，它會依據指定的排序索引鍵，搭配遞減排序順序和預設定序 (Collation)，排序給定的輸入集。</summary>
      <returns>新 DbSortExpression，表示 order-by 作業。</returns>
      <param name="source">指定輸入集的運算式。</param>
      <param name="sortKey">方法，指定如何根據輸入集成員來衍生排序索引鍵運算式。此方法產生的運算式，必須具有提供排序索引鍵定義、可比較順序之結果類型。</param>
      <param name="collation">要做為排序依據的定序</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="sortKey" /> 或 <paramref name="collation" /> 為 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" /> 所產生的陳述式為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 沒有集合結果類型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> 所產生的陳述式沒有可相容排序字串結果類型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> 是空的或僅包含空白字元。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />，它會針對給定輸入集的每個項目評估給定的 <paramref name="apply" /> 運算式一次，以產生具有對應的輸入和套用資料行的資料列集合。<paramref name="apply" /> 評估為空集合的資料列具有套用資料行值 null。</summary>
      <returns>具有指定輸入及套用繫結與 OuterApply 之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的新 DbApplyExpression。</returns>
      <param name="source">指定輸入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="apply">方法，指定要針對輸入集中每個成員進行一次評估的邏輯。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="apply" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 沒有集合結果類型。</exception>
      <exception cref="T:System.ArgumentNullException">apply 的結果包含的名稱或運算式為 null。</exception>
      <exception cref="T:System.ArgumentException">apply 的結果包含的名稱或運算式在運算式繫結中無效。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />，它會針對給定輸入集的每個項目評估給定的 <paramref name="apply" /> 運算式一次，以產生具有對應的輸入和套用資料行的資料列集合。<paramref name="apply" /> 評估為空集合的資料列具有套用資。料行值 null。</summary>
      <returns>具有指定輸入及套用繫結與 OuterApply 之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的新 DbApplyExpression。</returns>
      <param name="input">指定輸入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="apply">指定要針對輸入集中每個成員進行一次評估之邏輯的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="apply" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />，此運算式會使用指定的名稱和類型來參考參數。</summary>
      <returns>DbParameterReferenceExpression，表示具有指定名稱及類型之參數的參考，運算式的結果類型與 <paramref name="type" /> 相同。</returns>
      <param name="type">參考參數的類型。</param>
      <param name="name">參考參數的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />，此運算式會將左引數加入右引數。</summary>
      <returns>表示加法運算的新 DbArithmeticExpression。</returns>
      <param name="left">指定左引數的運算式。</param>
      <param name="right">指定右引數的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">left 和 right 之間沒有一般數值結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />，此運算式會對給定的輸入集，投影指定的運算式。</summary>
      <returns>表示投影作業的新 DbProjectExpression。</returns>
      <param name="input">指定輸入集的運算式繫結。</param>
      <param name="projection">要對集合投影的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="projection" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />，表示要擷取指定的屬性。</summary>
      <returns>表示屬性擷取的新 DbPropertyExpression。</returns>
      <param name="instance">要從其中擷取屬性的執行個體。如果屬性為靜態，可能是 null。</param>
      <param name="propertyMetadata">要擷取之屬性的中繼資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyMetadata" /> 為 null 或 <paramref name="instance" /> 為 null，且屬性不是靜態的。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.NavigationProperty)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />，表示要擷取指定的導覽屬性。</summary>
      <returns>表示導覽屬性擷取的新 DbPropertyExpression。</returns>
      <param name="instance">要從其中擷取導覽屬性的執行個體。</param>
      <param name="navigationProperty">要擷取之導覽屬性的中繼資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigationProperty" /> 為 null 或 <paramref name="instance" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />，表示要擷取指定的關聯性端點成員。</summary>
      <returns>表示關聯性端點成員擷取的新 DbPropertyExpression。</returns>
      <param name="instance">要從其中擷取關聯性端點成員的執行個體。</param>
      <param name="relationshipEnd">要擷取之關聯性端點成員的中繼資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipEnd" /> 為 null 或 <paramref name="instance" /> 為 null，且屬性不是靜態的。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />，表示要從給定的執行個體中，擷取具有指定名稱的執行個體屬性。</summary>
      <returns>表示屬性擷取的新 DbPropertyExpression。</returns>
      <param name="instance">要從其中擷取屬性的執行個體。</param>
      <param name="propertyName">要擷取的屬性名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 為 null 或 <paramref name="instance" /> 為 null，且屬性不是靜態的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="instance" /> 的類型未宣告任何具有指定名稱的屬性。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會根據索引鍵值將特定實體參考編碼的新 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />。</summary>
      <returns>新的 DbRefExpression，參考在指定的實體集中具有指定的索引鍵值的項目。</returns>
      <param name="entitySet">參考之項目位在其中的實體集。</param>
      <param name="keyRow">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，其所建構之資料錄的資料行，必須 (在數目、類型和順序方面) 符合參考之實體類型的 Key 屬性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> 或 <paramref name="keyRow" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">keyRow</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>建立會根據索引鍵值將特定實體參考編碼的新 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />。</summary>
      <returns>新的 DbRefExpression，參考在指定的實體集中具有指定的索引鍵值的項目。</returns>
      <param name="entitySet">參考之項目位在其中的實體集。</param>
      <param name="keyRow">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，其所建構之資料錄的資料行，必須 (在數目、類型和順序方面) 符合參考之實體類型的 Key 屬性。</param>
      <param name="entityType">參考應該參考的實體類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" />、<paramref name="keyRow" /> 或 <paramref name="entityType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> 與實體集的實體類型不在相同的類型階層中，或是 <paramref name="keyRow" /> 沒有符合所參考實體集之實體類型的索引鍵屬性的資料錄結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" />，此運算式會參考指定實體或關聯性集合。</summary>
      <returns>以指定實體或關聯性集合為基礎的新 DbScanExpression。</returns>
      <param name="targetSet">要參考之實體或關聯性集合的中繼資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetSet" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />，它會依據給定的輸入集選取指定的運算式。</summary>
      <returns> 表示選取作業的新 DbProjectExpression。</returns>
      <param name="source">指定輸入集的運算式。</param>
      <param name="projection">方法，指定如何根據輸入集成員來衍生投影的運算式。此方法所產生的類型執行個體，必須與 Select 相容並且可以解析成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。<paramref name="TProjection" /> 的相容性需求已在備註中說明。</param>
      <typeparam name="TProjection">
        <paramref name="projection" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="projection" /> 為 null</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="projection" /> 的結果為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />，它會針對給定輸入集的每個項目評估給定的 <paramref name="apply" /> 運算式一次，以產生具有對應的輸入和套用資料行的資料列集合。其中不包含 <paramref name="apply" /> 評估為空集合的資料列。然後會建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />，從每個資料列選取指定的 <paramref name="selector" />，以產生結果的整體集合。</summary>
      <returns>新的 DbProjectExpression，這會從具有指定輸入及套用繫結與 CrossApply 之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的新 DbApplyExpression 中選取套用資料行。</returns>
      <param name="source">指定輸入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="apply">方法，代表要針對輸入集中每個成員進行一次評估的邏輯。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="apply" /> 為 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="apply" /> 所產生的陳述式為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 沒有集合結果類型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="apply" /> 所產生的陳述式沒有集合類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />，它會針對給定輸入集的每個項目評估給定的 <paramref name="apply" /> 運算式一次，以產生具有對應的輸入和套用資料行的資料列集合。其中不包含 <paramref name="apply" /> 評估為空集合的資料列。然後會建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />，從每個資料列選取指定的 <paramref name="selector" />，以產生結果的整體集合。</summary>
      <returns>新的 DbProjectExpression，這會從具有指定輸入及套用繫結與 CrossApply 之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的新 DbApplyExpression 中選取指定選取器的結果。</returns>
      <param name="source">指定輸入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="apply">方法，代表要針對輸入集中每個成員進行一次評估的邏輯。</param>
      <param name="selector">方法，指定結果集項目要如何依據給定輸入集和套用集項目來衍生。此方法所產生的類型執行個體，必須與 SelectMany 相容並且可以解析成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。<paramref name="TSelector" /> 的相容性需求已在備註中說明。</param>
      <typeparam name="TSelector">
        <paramref name="selector" /> 的方法結果類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="apply" /> 或 <paramref name="selector" /> 為 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="apply" /> 所產生的陳述式為 null。</exception>
      <exception cref="T:System.ArgumentNullException">在轉換為 DbExpression 時，<paramref name="selector" /> 的結果為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 沒有集合結果類型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="apply" /> 所產生的陳述式沒有集合類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SetClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSetClause" /> 表示將屬性設定為某個值。</summary>
      <returns>新建立的 set 子句。</returns>
      <param name="property">要設定的屬性。</param>
      <param name="value">要對屬性設定的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />，它會根據給定的排序規格，在略過指定的項目數目之前排序給定的輸入集。</summary>
      <returns>表示略過作業的新 DbSkipExpression。</returns>
      <param name="input">指定輸入集的運算式繫結。</param>
      <param name="sortOrder">排序規格清單，此清單會決定輸入集項目的排序方式。</param>
      <param name="count">運算式，指定要從排序集合略過的項目數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="sortOrder" /> 或 <paramref name="count" /> 為 null，或是 <paramref name="sortOrder" /> 包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortOrder" /> 是空的，或者 <paramref name="count" /> 不是 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> 或 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />，或者其結果類型不等於或不可提升至 64 位元整數類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />，它會從給定的排序輸入集中略過指定的項目數目。</summary>
      <returns>表示略過作業的新 DbSkipExpression。</returns>
      <param name="argument">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />，指定已排序的輸入集。</param>
      <param name="count">運算式，指定要從排序集合略過的項目數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="count" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Count" /> 不是 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> 或 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />，或者其結果類型不等於或不可提升至 64 位元整數類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />，此運算式會依據指定的排序規格，排序給定的輸入集。</summary>
      <returns>表示排序作業的新 DbSortExpression。</returns>
      <param name="input">指定輸入集的運算式繫結。</param>
      <param name="sortOrder">排序規格清單，此清單會決定輸入集項目的排序方式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="sortOrder" /> 為 null，或是 <paramref name="sortOrder" /> 包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortOrder" /> 是空的。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />，它會將 Argument 集合中的項目數目限制為指定的計數限制值。輸出中不包含相等的結果。</summary>
      <returns>具有指定引數及計數限制值但不含相等結果的新 DbLimitExpression。</returns>
      <param name="argument">指定輸入集合的運算式。</param>
      <param name="count">指定限制值的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="count" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 沒有集合結果類型，或者 <paramref name="count" /> 沒有等於或可提升為 64 位元整數類型的結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />，其排序順序包含給定順序輸入集的排序順序，以及採遞增排序的指定排序索引鍵和預設定序。</summary>
      <returns>新的 DbSortExpression，表示新的整體 order-by 作業。</returns>
      <param name="source">指定已排序輸入集的 DbSortExpression。</param>
      <param name="sortKey">方法，指定如何根據輸入集成員來衍生其他排序索引鍵運算式。此方法產生的運算式，必須具有提供排序索引鍵定義、可比較順序之結果類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="sortKey" /> 為 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" /> 所產生的陳述式為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 沒有集合結果類型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> 所產生的陳述式沒有可比較順序結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />，其排序順序包含給定順序輸入集的排序順序，以及採遞增排序的指定排序索引鍵和指定定序。</summary>
      <returns>新的 DbSortExpression，表示新的整體 order-by 作業。</returns>
      <param name="source">指定已排序輸入集的 DbSortExpression。</param>
      <param name="sortKey">方法，指定如何根據輸入集成員來衍生其他排序索引鍵運算式。此方法產生的運算式，必須具有提供排序索引鍵定義、可比較順序之結果類型。</param>
      <param name="collation">要做為排序依據的定序</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="sortKey" /> 或 <paramref name="collation" /> 為 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" /> 所產生的陳述式為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 沒有集合結果類型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> 所產生的陳述式沒有可相容排序字串結果類型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> 是空的或僅包含空白字元。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />，其排序順序包含給定順序輸入集的排序順序，以及採遞減排序的指定排序索引鍵和預設定序。</summary>
      <returns>新的 DbSortExpression，表示新的整體 order-by 作業。</returns>
      <param name="source">指定已排序輸入集的 DbSortExpression。</param>
      <param name="sortKey">方法，指定如何根據輸入集成員來衍生其他排序索引鍵運算式。此方法產生的運算式，必須具有提供排序索引鍵定義、可比較順序之結果類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="sortKey" /> 為 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" /> 所產生的陳述式為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 沒有集合結果類型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> 所產生的陳述式沒有可比較順序結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />，其排序順序包含給定順序輸入集的排序順序，以及採遞減排序的指定排序索引鍵和指定定序。</summary>
      <returns>新的 DbSortExpression，表示新的整體 order-by 作業。</returns>
      <param name="source">指定已排序輸入集的 DbSortExpression。</param>
      <param name="sortKey">方法，指定如何根據輸入集成員來衍生其他排序索引鍵運算式。此方法產生的運算式，必須具有提供排序索引鍵定義、可比較順序之結果類型。</param>
      <param name="collation">排序所依據的定序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="sortKey" /> 或 <paramref name="collation" /> 為 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" /> 所產生的陳述式為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 沒有集合結果類型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> 所產生的陳述式沒有可相容排序字串結果類型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> 是空的或僅包含空白字元。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>使用遞增的排序順序和預設的定序，建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" />。</summary>
      <returns>具有指定排序索引鍵及遞增排序順序的新排序子句。</returns>
      <param name="key">用於定義排序索引鍵的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 沒有可比較的順序結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>使用遞增的排序順序和指定的定序，建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" />。</summary>
      <returns>具有給定排序索引鍵、定序及遞增排序順序的新排序子句。</returns>
      <param name="key">用於定義排序索引鍵的運算式。</param>
      <param name="collation">排序所依據的定序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> 是空的或僅包含空白字元。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 沒有可比較的順序結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>使用遞減的排序順序和預設的定序，建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" />。</summary>
      <returns>具有給定排序索引鍵及遞減排序順序的新排序子句。</returns>
      <param name="key">用於定義排序索引鍵的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 沒有可比較的順序結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>使用遞減的排序順序和指定的定序，建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" />。</summary>
      <returns>具有給定排序索引鍵、定序及遞減排序順序的新排序子句。</returns>
      <param name="key">用於定義排序索引鍵的運算式。</param>
      <param name="collation">排序所依據的定序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> 是空的或僅包含空白字元。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 沒有可比較的順序結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" />。</summary>
      <returns>具有指定引數及類型的新 DbTreatExpression。</returns>
      <param name="argument">指定執行個體的運算式。</param>
      <param name="treatType">treat-as 類型的類型中繼資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="treatType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="treatType" /> 與 <paramref name="argument" /> 的結果類型不在相同的類型階層中。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True">
      <summary>使用布林值 true 建立 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />。</summary>
      <returns>布林值為 true 的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /></returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />，此運算式會將引數值變成相反值。</summary>
      <returns>表示否定運算的新 DbArithmeticExpression。</returns>
      <param name="argument">指定引數的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它會計算左右集合引數的聯集，並移除重複的項目。</summary>
      <returns>計算 left 和 right 引數無重複之聯集的新 DbExpression。</returns>
      <param name="left">定義左集合引數的運算式。</param>
      <param name="right">定義右集合引數的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 和 <paramref name="right" /> 之間沒有具有相等比較元素類型的共同集合結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" /> 物件，此物件會計算左右集合引數的聯集，且不移除重複的項目。</summary>
      <returns>做為左邊和右邊引數之聯集 (包括重複項目) 的新 DbUnionAllExpression。</returns>
      <param name="left">定義左集合引數的運算式。</param>
      <param name="right">定義右集合引數的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 及 <paramref name="right" /> 之間不存在一般數值結果類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />，此運算式會使用指定的名稱和類型來參考變數。</summary>
      <returns>DbVariableReferenceExpression，表示具有指定名稱及類型之變數的參考，運算式的結果類型與 <paramref name="type" /> 相同。</returns>
      <param name="type">參考變數的類型。</param>
      <param name="name">參考變數的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />，它會使用指定的述詞篩選給定輸入集的項目。</summary>
      <returns>表示 Any 運算的新 DbQuantifierExpression。</returns>
      <param name="source">指定輸入集的運算式。</param>
      <param name="predicate">方法，表示要針對輸入集中每個成員進行評估的述詞。此方法必須產生具有可提供述詞邏輯之布林結果類型的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 所產生的陳述式為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> 所產生的陳述式沒有布林值結果類型。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions">
      <summary>提供用於建構可叫用標準 EDM 函式之 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 物件的應用程式開發介面，並允許將該應用程式開發介面做為運算式類型本身上的擴充方法加以存取。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Abs' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數都必須具有數值結果類型。運算式的結果類型與 <paramref name="value" /> 的結果類型相同。</summary>
      <returns>傳回 <paramref name="value" /> 之絕對值的新 DbFunctionExpression。</returns>
      <param name="value">指定數值的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Abs' 函式的多載均不接受結果類型為 <paramref name="value" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'AddDays' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 DateTime 或 DateTimeOffset 以及整數結果類型。運算式的結果類型與 <paramref name="dateValue" /> 的結果類型相同。</summary>
      <returns>新的 DbFunctionExpression，它會將 <paramref name="addValue" /> 所指定的天數加上 <paramref name="dateValue" /> 所指定的值。</returns>
      <param name="dateValue">運算式，指定要在其中加入 <paramref name="addValue" /> 的值。</param>
      <param name="addValue">運算式，指定要加入至 <paramref name="dateValue" /> 的天數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> 或 <paramref name="addValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'AddDays' 函式的多載均不接受結果類型為 <paramref name="dateValue" /> 和 <paramref name="addValue" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'AddHours' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 DateTime、DateTimeOffset 或 Time 以及整數結果類型。運算式的結果類型與 <paramref name="timeValue" /> 的結果類型相同。</summary>
      <returns>新的 DbFunctionExpression，它會將 <paramref name="addValue" /> 所指定的時數加上 <paramref name="timeValue" /> 所指定的值。</returns>
      <param name="timeValue">運算式，指定要在其中加入 <paramref name="addValue" /> 的值。</param>
      <param name="addValue">運算式，指定要加入至 <paramref name="timeValue" /> 的時數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 或 <paramref name="addValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'AddHours' 函式的多載均不接受結果類型為 <paramref name="timeValue" /> 和 <paramref name="addValue" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'AddMicroseconds' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 DateTime、DateTimeOffset 或 Time 以及整數結果類型。運算式的結果類型與 <paramref name="timeValue" /> 的結果類型相同。</summary>
      <returns>新的 DbFunctionExpression，它會將 <paramref name="addValue" /> 所指定的微秒數加上 <paramref name="timeValue" /> 所指定的值。</returns>
      <param name="timeValue">運算式，指定要在其中加入 <paramref name="addValue" /> 的值。</param>
      <param name="addValue">運算式，指定要加入至 <paramref name="timeValue" /> 的微秒數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 或 <paramref name="addValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'AddMicroseconds' 函式的多載均不接受結果類型為 <paramref name="timeValue" /> 和 <paramref name="addValue" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'AddMilliseconds' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 DateTime、DateTimeOffset 或 Time 以及整數結果類型。運算式的結果類型與 <paramref name="timeValue" /> 的結果類型相同。</summary>
      <returns>新的 DbFunctionExpression，它會將 <paramref name="addValue" /> 所指定的毫秒數加上 <paramref name="timeValue" /> 所指定的值。</returns>
      <param name="timeValue">運算式，指定要在其中加入 <paramref name="addValue" /> 的值。</param>
      <param name="addValue">運算式，指定要加入至 <paramref name="timeValue" /> 的毫秒數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 或 <paramref name="addValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'AddMilliseconds' 函式的多載均不接受結果類型為 <paramref name="timeValue" /> 和 <paramref name="addValue" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'AddMinutes' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 DateTime、DateTimeOffset 或 Time 以及整數結果類型。運算式的結果類型與 <paramref name="timeValue" /> 的結果類型相同。</summary>
      <returns>新的 DbFunctionExpression，它會將 <paramref name="addValue" /> 所指定的分鐘數加上 <paramref name="timeValue" /> 所指定的值。</returns>
      <param name="timeValue">運算式，指定要在其中加入 <paramref name="addValue" /> 的值。</param>
      <param name="addValue">運算式，指定要加入至 <paramref name="timeValue" /> 的分鐘數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 或 <paramref name="addValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'AddMinutes' 函式的多載均不接受結果類型為 <paramref name="timeValue" /> 和 <paramref name="addValue" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'AddMonths' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 DateTime 或 DateTimeOffset 以及整數結果類型。運算式的結果類型與 <paramref name="dateValue" /> 的結果類型相同。</summary>
      <returns>新的 DbFunctionExpression，它會將 <paramref name="addValue" /> 所指定的月數加上 <paramref name="dateValue" /> 所指定的值。</returns>
      <param name="dateValue">運算式，指定要在其中加入 <paramref name="addValue" /> 的值。</param>
      <param name="addValue">運算式，指定要加入至 <paramref name="dateValue" /> 的月數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> 或 <paramref name="addValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'AddMonths' 函式的多載均不接受結果類型為 <paramref name="dateValue" /> 和 <paramref name="addValue" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'AddNanoseconds' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 DateTime、DateTimeOffset 或 Time 以及整數結果類型。運算式的結果類型與 <paramref name="timeValue" /> 的結果類型相同。</summary>
      <returns>新的 DbFunctionExpression，它會將 <paramref name="addValue" /> 所指定的奈秒數加上 <paramref name="timeValue" /> 所指定的值。</returns>
      <param name="timeValue">運算式，指定要在其中加入 <paramref name="addValue" /> 的值。</param>
      <param name="addValue">運算式，指定要加入至 <paramref name="timeValue" /> 的奈秒數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 或 <paramref name="addValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'AddNanoseconds' 函式的多載均不接受結果類型為 <paramref name="timeValue" /> 和 <paramref name="addValue" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'AddSeconds' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 DateTime、DateTimeOffset 或 Time 以及整數結果類型。運算式的結果類型與 <paramref name="timeValue" /> 的結果類型相同。</summary>
      <returns>新的 DbFunctionExpression，它會將 <paramref name="addValue" /> 所指定的秒數加上 <paramref name="timeValue" /> 所指定的值。</returns>
      <param name="timeValue">運算式，指定要在其中加入 <paramref name="addValue" /> 的值。</param>
      <param name="addValue">運算式，指定要加入至 <paramref name="timeValue" /> 的秒數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 或 <paramref name="addValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'AddSeconds' 函式的多載均不接受結果類型為 <paramref name="timeValue" /> 和 <paramref name="addValue" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'AddYears' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 DateTime 或 DateTimeOffset 以及整數結果類型。運算式的結果類型與 <paramref name="dateValue" /> 的結果類型相同。</summary>
      <returns>新的 DbFunctionExpression，它會將 <paramref name="addValue" /> 所指定的年數加上 <paramref name="dateValue" /> 所指定的值。</returns>
      <param name="dateValue">運算式，指定要在其中加入 <paramref name="addValue" /> 的值。</param>
      <param name="addValue">運算式，指定要加入至 <paramref name="dateValue" /> 的年數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> 或 <paramref name="addValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'AddYears' 函式的多載均不接受結果類型為 <paramref name="dateValue" /> 和 <paramref name="addValue" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會對指定的集合叫用標準 'Avg' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。運算式的結果類型與集合的項目類型相同。</summary>
      <returns>產生平均值的新 DbFunctionExpression。</returns>
      <param name="collection">運算式，指定要對其計算平均值的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Avg' 函式的多載均不接受結果類型為 <paramref name="collection" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'BitwiseAnd' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有相同的整數數值結果類型。運算式的結果類型就是此相同的類型。</summary>
      <returns>新的 DbFunctionExpression，它傳回對 <paramref name="value1" /> 和 <paramref name="value2" /> 執行位元 AND 運算所產生的值。</returns>
      <param name="value1">指定第一個運算元的運算式。</param>
      <param name="value2">指定第二個運算元的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> 或 <paramref name="value2" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'BitwiseAnd' 函式的多載均不接受結果類型為 <paramref name="value1" /> 和 <paramref name="value2" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'BitwiseNot' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有整數數值結果類型。運算式的結果類型就是此相同的類型。</summary>
      <returns>新的 DbFunctionExpression，它傳回對 <paramref name="value" /> 執行位元 NOT 運算所產生的值。</returns>
      <param name="value">指定第一個運算元的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'BitwiseNot' 函式的多載均不接受結果類型為 <paramref name="value" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'BitwiseOr' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有相同的整數數值結果類型。運算式的結果類型就是此相同的類型。</summary>
      <returns>新的 DbFunctionExpression，它傳回對 <paramref name="value1" /> 和 <paramref name="value2" /> 執行位元 OR 運算所產生的值。</returns>
      <param name="value1">指定第一個運算元的運算式。</param>
      <param name="value2">指定第二個運算元的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> 或 <paramref name="value2" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'BitwiseOr' 函式的多載均不接受結果類型為 <paramref name="value1" /> 和 <paramref name="value2" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'BitwiseXor' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有相同的整數數值結果類型。運算式的結果類型就是此相同的類型。</summary>
      <returns>新的 DbFunctionExpression，它傳回對 <paramref name="value1" /> 和 <paramref name="value2" /> 執行位元 XOR (互斥 OR) 運算所產生的值。</returns>
      <param name="value1">指定第一個運算元的運算式。</param>
      <param name="value2">指定第二個運算元的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> 或 <paramref name="value2" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'BitwiseXor' 函式的多載均不接受結果類型為 <paramref name="value1" /> 和 <paramref name="value2" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Ceiling' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數都必須具有單精確度浮點數、雙精確度浮點數或十進位結果類型。運算式的結果類型與 <paramref name="value" /> 的結果類型相同。</summary>
      <returns>新的 DbFunctionExpression，它會傳回不小於 <paramref name="value" /> 的最小整數值。</returns>
      <param name="value">指定數值的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Ceiling' 函式的多載均不接受結果類型為 <paramref name="value" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Concat' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數都必須具有字串結果類型。運算式的結果類型為字串。</summary>
      <returns>新的 DbFunctionExpression，會產生串連的字串。</returns>
      <param name="string1">運算式，指定出現在串連結果字串中的第一個字串。</param>
      <param name="string2">運算式，指定出現在串連結果字串中的第二個字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="string1" /> 或 <paramref name="string2" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Concat' 函式的多載均不接受結果類型為 <paramref name="string1" /> 和 <paramref name="string2" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Contains' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數都必須具有字串結果類型。運算式的結果類型為布林值。</summary>
      <returns>新的 DbFunctionExpression，它會傳回表示 <paramref name="searchedForString" /> 是否在 <paramref name="searchedString" /> 內發生的布林值。</returns>
      <param name="searchedString">運算式，指定要在其中搜尋每個 <paramref name="searchedForString" /> 的字串。</param>
      <param name="searchedForString">運算式，指定要在 <paramref name="searchedString" /> 中搜尋的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchedString" /> 或 <paramref name="searchedForString" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Contains' 函式的多載均不接受結果類型為 <paramref name="searchedString" /> 和 <paramref name="searchedForString" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會對指定的集合叫用標準 'Count' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。運算式的結果類型為 Edm.Int32。</summary>
      <returns>產生計數值的新 DbFunctionExpression。</returns>
      <param name="collection">運算式，指定要對其計算計數值的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Count' 函式的多載均不接受結果類型為 <paramref name="collection" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定的引數叫用標準 'CreateDateTime' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。<paramref name="second" /> 的結果類型必須是 Edm.Double，而所有其他引數的結果類型則必須是 Edm.Int32。運算式的結果類型為 Edm.DateTime。</summary>
      <returns>根據指定值傳回新 DateTime 的新 DbFunctionExpression。</returns>
      <param name="year">運算式，提供新 DateTime 執行個體的年份值。</param>
      <param name="month">運算式，提供新 DateTime 執行個體的月份值。</param>
      <param name="day">運算式，提供新 DateTime 執行個體的日期值。</param>
      <param name="hour">運算式，提供新 DateTime 執行個體的小時值。</param>
      <param name="minute">運算式，提供新 DateTime 執行個體的分鐘值。</param>
      <param name="second">運算式，提供新 DateTime 執行個體的秒鐘值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" /> 和 <paramref name="second" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'CreateDateTime' 函式的多載均不接受結果類型為 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" /> 和 <paramref name="second" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定的引數叫用標準 'CreateDateTimeOffset' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。<paramref name="second" /> 的結果類型必須是 Edm.Double，而所有其他引數的結果類型則必須是 Edm.Int32。運算式的結果類型為 Edm.DateTimeOffset。</summary>
      <returns>根據指定值傳回新 DateTimeOffset 的新 DbFunctionExpression。</returns>
      <param name="year">運算式，提供新 DateTimeOffset 執行個體的年份值。</param>
      <param name="month">運算式，提供新 DateTimeOffset 執行個體的月份值。</param>
      <param name="day">運算式，提供新 DateTimeOffset 執行個體的日期值。</param>
      <param name="hour">運算式，提供新 DateTimeOffset 執行個體的小時值。</param>
      <param name="minute">運算式，提供新 DateTimeOffset 執行個體的分鐘值。</param>
      <param name="second">運算式，提供新 DateTimeOffset 執行個體的秒鐘值。</param>
      <param name="timeZoneOffset">運算式，提供新 DateTimeOffset 執行個體在時區位移值中的分鐘數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" /> 或 <paramref name="timeZoneOffset" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'CreateDateTimeOffset' 函式的多載均不接受結果類型為 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" /> 和 <paramref name="timeZoneOffset" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定的引數叫用標準 'CreateTime' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。<paramref name="second" /> 的結果類型必須是 Edm.Double，而所有其他引數的結果類型則必須是 Edm.Int32。運算式的結果類型為 Edm.Time。</summary>
      <returns>根據指定值傳回新 Time 的新 DbFunctionExpression。</returns>
      <param name="hour">運算式，提供新 DateTime 執行個體的小時值。</param>
      <param name="minute">運算式，提供新 DateTime 執行個體的分鐘值。</param>
      <param name="second">運算式，提供新 DateTime 執行個體的秒鐘值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hour" />、<paramref name="minute" /> 或 <paramref name="second" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'CreateTime' 函式的多載均不接受結果類型為 <paramref name="hour" />、<paramref name="minute" /> 和 <paramref name="second" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTime">
      <summary>建立會叫用標準 'CurrentDateTime' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。</summary>
      <returns>以 Edm.DateTime 執行個體形式傳回目前日期及時間的新 DbFunctionExpression。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset">
      <summary>建立會叫用標準 'CurrentDateTimeOffset' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。</summary>
      <returns>以 Edm.DateTimeOffset 執行個體形式傳回目前日期及時間的新 DbFunctionExpression。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime">
      <summary>建立會叫用標準 'CurrentUtcDateTime' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。</summary>
      <returns>以 Edm.DateTime 執行個體形式傳回目前 UTC 日期及時間的新 DbFunctionExpression。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Day' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 DateTime 或 DateTimeOffset 結果類型。運算式的結果類型為 Edm.Int32。</summary>
      <returns>從 <paramref name="dateValue" /> 傳回整數天值的新 DbFunctionExpression。</returns>
      <param name="dateValue">運算式，指定要對其擷取日期的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Day' 函式的多載均不接受結果類型為 <paramref name="dateValue" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'DayOfYear' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 DateTime 或 DateTimeOffset 結果類型。運算式的結果類型為 Edm.Int32。</summary>
      <returns>新的 DbFunctionExpression，它會從 <paramref name="dateValue" /> 傳回年的整數天值。</returns>
      <param name="dateValue">運算式，指定要對其擷取年中日期的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'DayOfYear' 函式的多載均不接受結果類型為 <paramref name="dateValue" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'DiffDays' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數都必須具有 DateTime 或 DateTimeOffset 結果類型。<paramref name="dateValue1" /> 的結果類型必須與 <paramref name="dateValue2" /> 的結果類型相符。運算式的結果類型為 Edm.Int32。</summary>
      <returns>新的 DbFunctionExpression，它會傳回 <paramref name="dateValue1" /> 與 <paramref name="dateValue2" /> 之間的天數差異。</returns>
      <param name="dateValue1">運算式，指定第一個 DateTime 或 DateTimeOffset 值。</param>
      <param name="dateValue2">運算式，指定要對 <paramref name="dateValue1" /> 計算天數差異的 DateTime 或 DateTimeOffset。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> 或 <paramref name="dateValue2" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'DiffDays' 函式的多載均不接受結果類型為 <paramref name="dateValue1" /> 和 <paramref name="dateValue2" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'DiffHours' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數都必須具有 DateTime、DateTimeOffset 或 Time 結果類型。<paramref name="timeValue1" /> 的結果類型必須與 <paramref name="timeValue2" /> 的結果類型相符。運算式的結果類型為 Edm.Int32。</summary>
      <returns>新的 DbFunctionExpression，它會傳回 <paramref name="timeValue1" /> 與 <paramref name="timeValue2" /> 之間的時數差異。</returns>
      <param name="timeValue1">運算式，指定第一個 DateTime、DateTimeOffset 或 Time 值。</param>
      <param name="timeValue2">運算式，指定要對 <paramref name="timeValue1" /> 計算時數差異的 DateTime、DateTimeOffset 或 Time。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> 或 <paramref name="timeValue2" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'DiffHours' 函式的多載均不接受結果類型為 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'DiffMicroseconds' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數都必須具有 DateTime、DateTimeOffset 或 Time 結果類型。<paramref name="timeValue1" /> 的結果類型必須與 <paramref name="timeValue2" /> 的結果類型相符。運算式的結果類型為 Edm.Int32。</summary>
      <returns>新的 DbFunctionExpression，它會傳回 <paramref name="timeValue1" /> 與 <paramref name="timeValue2" /> 之間的微秒數差異。</returns>
      <param name="timeValue1">運算式，指定第一個 DateTime、DateTimeOffset 或 Time 值。</param>
      <param name="timeValue2">運算式，指定要對 <paramref name="timeValue1" /> 計算微秒數差異的 DateTime、DateTimeOffset 或 Time。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> 或 <paramref name="timeValue2" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'DiffMicroseconds' 函式的多載均不接受結果類型為 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'DiffMilliseconds' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數都必須具有 DateTime、DateTimeOffset 或 Time 結果類型。<paramref name="timeValue1" /> 的結果類型必須與 <paramref name="timeValue2" /> 的結果類型相符。運算式的結果類型為 Edm.Int32。</summary>
      <returns>新的 DbFunctionExpression，它會傳回 <paramref name="timeValue1" /> 與 <paramref name="timeValue2" /> 之間的毫秒數差異。</returns>
      <param name="timeValue1">運算式，指定第一個 DateTime、DateTimeOffset 或 Time 值。</param>
      <param name="timeValue2">運算式，指定要對 <paramref name="timeValue1" /> 計算毫秒數差異的 DateTime、DateTimeOffset 或 Time。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> 或 <paramref name="timeValue2" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'DiffMilliseconds' 函式的多載均不接受結果類型為 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'DiffMinutes' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數都必須具有 DateTime、DateTimeOffset 或 Time 結果類型。<paramref name="timeValue1" /> 的結果類型必須與 <paramref name="timeValue2" /> 的結果類型相符。運算式的結果類型為 Edm.Int32。</summary>
      <returns>新的 DbFunctionExpression，它會傳回 <paramref name="timeValue1" /> 與 <paramref name="timeValue2" /> 之間的分鐘數差異。</returns>
      <param name="timeValue1">運算式，指定第一個 DateTime、DateTimeOffset 或 Time 值。</param>
      <param name="timeValue2">運算式，指定要對 <paramref name="timeValue1" /> 計算分鐘數差異的 DateTime、DateTimeOffset 或 Time。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> 或 <paramref name="timeValue2" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'DiffMinutes' 函式的多載均不接受結果類型為 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'DiffMonths' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數都必須具有 DateTime 或 DateTimeOffset 結果類型。<paramref name="dateValue1" /> 的結果類型必須與 <paramref name="dateValue2" /> 的結果類型相符。運算式的結果類型為 Edm.Int32。</summary>
      <returns>新的 DbFunctionExpression，它會傳回 <paramref name="dateValue1" /> 與 <paramref name="dateValue2" /> 之間的月數差異。</returns>
      <param name="dateValue1">運算式，指定第一個 DateTime 或 DateTimeOffset 值。</param>
      <param name="dateValue2">運算式，指定要對 <paramref name="dateValue1" /> 計算月數差異的 DateTime 或 DateTimeOffset。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> 或 <paramref name="dateValue2" /> 為 null</exception>
      <exception cref="T:System.ArgumentException">標準 'DiffMonths' 函式的多載均不接受結果類型為 <paramref name="dateValue1" /> 和 <paramref name="dateValue2" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'DiffNanoseconds' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數都必須具有 DateTime、DateTimeOffset 或 Time 結果類型。<paramref name="timeValue1" /> 的結果類型必須與 <paramref name="timeValue2" /> 的結果類型相符。運算式的結果類型為 Edm.Int32。</summary>
      <returns>新的 DbFunctionExpression，它會傳回 <paramref name="timeValue1" /> 與 <paramref name="timeValue2" /> 之間的奈秒數差異。</returns>
      <param name="timeValue1">運算式，指定第一個 DateTime、DateTimeOffset 或 Time 值。</param>
      <param name="timeValue2">運算式，指定要對 <paramref name="timeValue1" /> 計算奈秒數差異的 DateTime、DateTimeOffset 或 Time。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> 或 <paramref name="timeValue2" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'DiffNanoseconds' 函式的多載均不接受結果類型為 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'DiffSeconds' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數都必須具有 DateTime、DateTimeOffset 或 Time 結果類型。<paramref name="timeValue1" /> 的結果類型必須與 <paramref name="timeValue2" /> 的結果類型相符。運算式的結果類型為 Edm.Int32。</summary>
      <returns>新的 DbFunctionExpression，它會傳回 <paramref name="timeValue1" /> 與 <paramref name="timeValue2" /> 之間的秒數差異。</returns>
      <param name="timeValue1">運算式，指定第一個 DateTime、DateTimeOffset 或 Time 值。</param>
      <param name="timeValue2">運算式，指定要對 <paramref name="timeValue1" /> 計算秒數差異的 DateTime、DateTimeOffset 或 Time。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> 或 <paramref name="timeValue2" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'DiffSeconds' 函式的多載均不接受結果類型為 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'DiffYears' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數都必須具有 DateTime 或 DateTimeOffset 結果類型。<paramref name="dateValue1" /> 的結果類型必須與 <paramref name="dateValue2" /> 的結果類型相符。運算式的結果類型為 Edm.Int32。</summary>
      <returns>新的 DbFunctionExpression，它會傳回 <paramref name="dateValue1" /> 與 <paramref name="dateValue2" /> 之間的年數差異。</returns>
      <param name="dateValue1">運算式，指定第一個 DateTime 或 DateTimeOffset 值。</param>
      <param name="dateValue2">運算式，指定要對 <paramref name="dateValue1" /> 計算年數差異的 DateTime 或 DateTimeOffset。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> 或 <paramref name="dateValue2" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'DiffYears' 函式的多載均不接受結果類型為 <paramref name="dateValue1" /> 和 <paramref name="dateValue2" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'EndsWith' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數都必須具有字串結果類型。運算式的結果類型為布林值。</summary>
      <returns>新的 DbFunctionExpression，表示 <paramref name="stringArgument" /> 是否以 <paramref name="suffix" /> 結尾。</returns>
      <param name="stringArgument">運算式，指定要檢查所指定 <paramref name="suffix" /> 的字串。</param>
      <param name="suffix">運算式，指定要檢查其 <paramref name="stringArgument" /> 的後置字元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 或 <paramref name="suffix" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'EndsWith' 函式的多載均不接受結果類型為 <paramref name="stringArgument" /> 和 <paramref name="suffix" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Floor' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數都必須具有單精確度浮點數、雙精確度浮點數或十進位結果類型。運算式的結果類型與 <paramref name="value" /> 的結果類型相同。</summary>
      <returns>新的 DbFunctionExpression，它會傳回不大於 <paramref name="value" /> 的最大整數值。</returns>
      <param name="value">指定數值的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Floor' 函式的多載均不接受結果類型為 <paramref name="value" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'GetTotalOffsetMinutes' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 DateTimeOffset 結果類型。運算式的結果類型為 Edm.Int32。</summary>
      <returns>新的 DbFunctionExpression，它會傳回以 <paramref name="dateTimeOffsetArgument" /> 表示 GMT 時差的分鐘數。</returns>
      <param name="dateTimeOffsetArgument">運算式，指定要對其擷取 GMT 分鐘位移的 DateTimeOffset 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateTimeOffsetArgument" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'GetTotalOffsetMinutes' 函式的多載均不接受結果類型為 <paramref name="dateTimeOffsetArgument" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Hour' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 DateTime、DateTimeOffset 或 Time 結果類型。運算式的結果類型為 Edm.Int32。</summary>
      <returns>新的 DbFunctionExpression，它會從 <paramref name="timeValue" /> 傳回整數小時值。</returns>
      <param name="timeValue">運算式，指定要對其擷取小時的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Hours' 函式的多載均不接受結果類型為 <paramref name="timeValue" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'IndexOf' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數都必須具有字串結果類型。運算式的結果類型為 Edm.Int32。</summary>
      <returns>新的 DbFunctionExpression，它會傳回 <paramref name="stringToFind" /> 在 <paramref name="searchString" /> 中的第一個索引。</returns>
      <param name="searchString">運算式，指定要在其中搜尋 <paramref name="stringToFind" /> 的字串。</param>
      <param name="stringToFind">運算式，指定要在 <paramref name="searchString" /> 內檢查要尋找的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchString" /> 或 <paramref name="stringToFind" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'IndexOf' 函式的多載均不接受結果類型為 <paramref name="searchString" /> 和 <paramref name="stringToFind" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Left' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有字串和整數數值結果類型。運算式的結果類型為字串。</summary>
      <returns>新的 DbFunctionExpression，它會從 <paramref name="stringArgument" /> 傳回長度為 <paramref name="length" /> 的最左邊子字串。</returns>
      <param name="stringArgument">運算式，指定要在其中擷取最左邊子字串的字串。</param>
      <param name="length">運算式，指定要從 <paramref name="stringArgument" /> 擷取最左邊子字串的長度。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 或 <paramref name="length" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Left' 函式的多載均不接受結果類型為 <paramref name="stringArgument" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Length' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有字串結果類型。運算式的結果類型也是字串。</summary>
      <returns>新的 DbFunctionExpression，它會傳回 <paramref name="stringArgument" /> 的長度。</returns>
      <param name="stringArgument">運算式，指定要計算長度的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Length' 函式的多載均不接受結果類型為 <paramref name="stringArgument" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會對指定的集合叫用標準 'BigCount' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。運算式的結果類型為 Edm.Int64。</summary>
      <returns>產生計數值的新 DbFunctionExpression。</returns>
      <param name="collection">運算式，指定要對其計算計數值的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'BigCount' 函式的多載均不接受結果類型為 <paramref name="collection" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會對指定的集合叫用標準 'Max' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。運算式的結果類型與集合的項目類型相同。</summary>
      <returns>產生最大值的新 DbFunctionExpression。</returns>
      <param name="collection">運算式，指定要從中擷取最大值的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Max' 函式的多載均不接受結果類型為 <paramref name="collection" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Millisecond' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 DateTime、DateTimeOffset 或 Time 結果類型。運算式的結果類型為 Edm.Int32。</summary>
      <returns>新的 DbFunctionExpression，它會從 <paramref name="timeValue" /> 傳回整數亳秒值。</returns>
      <param name="timeValue">運算式，指定要對其擷取毫秒的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Millisecond' 函式的多載均不接受結果類型為 <paramref name="timeValue" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會對指定的集合叫用標準 'Min' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。運算式的結果類型與集合的項目類型相同。</summary>
      <returns>產生最小值的新 DbFunctionExpression。</returns>
      <param name="collection">運算式，指定要從中擷取最小值的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Min' 函式的多載均不接受結果類型為 <paramref name="collection" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Minute' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 DateTime、DateTimeOffset 或 Time 結果類型。運算式的結果類型為 Edm.Int32。</summary>
      <returns>新的 DbFunctionExpression，它會從 <paramref name="timeValue" /> 傳回整數分鐘值。</returns>
      <param name="timeValue">運算式，指定要對其擷取分鐘的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Minute' 函式的多載均不接受結果類型為 <paramref name="timeValue" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Month' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 DateTime 或 DateTimeOffset 結果類型。運算式的結果類型為 Edm.Int32。</summary>
      <returns>新的 DbFunctionExpression，它會從 <paramref name="dateValue" /> 傳回整數月份值。</returns>
      <param name="dateValue">運算式，指定要對其擷取月份的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Month' 函式的多載均不接受結果類型為 <paramref name="dateValue" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.NewGuid">
      <summary>建立會叫用標準 'NewGuid' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。</summary>
      <returns>傳回新 GUID 值的新 DbFunctionExpression。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Power' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有數值結果類型。運算式的結果類型與 <paramref name="baseArgument" /> 的結果類型相同。</summary>
      <returns>新的 DbFunctionExpression，它會傳回 <paramref name="baseArgument" /> 以 <paramref name="exponent" /> 所指定乘冪為次方的值。</returns>
      <param name="baseArgument">運算式，指定要以所指定乘冪數自乘的數值。</param>
      <param name="exponent">運算式，指定 <paramref name="baseArgument" /> 要自乘的乘冪數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseArgument" /> 或 <paramref name="exponent" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Power' 函式的多載均不接受結果類型為 <paramref name="baseArgument" /> 和 <paramref name="exponent" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Replace' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數都必須具有字串結果類型。運算式的結果類型也是字串。</summary>
      <returns>新的 DbFunctionExpression，它會根據 <paramref name="stringArgument" /> (其中出現的每個 <paramref name="toReplace" /> 項目會由 <paramref name="replacement" /> 所取代) 傳回新字串。</returns>
      <param name="stringArgument">運算式，指定要在其中執行取代作業的字串。</param>
      <param name="toReplace">運算式，指定要取代的字串。</param>
      <param name="replacement">運算式，指定取代字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />、<paramref name="toReplace" /> 或 <paramref name="replacement" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Replace' 函式的多載均不接受結果類型為 <paramref name="stringArgument" />、<paramref name="toReplace" /> 和 <paramref name="replacement" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Reverse' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有字串結果類型。運算式的結果類型也是字串。</summary>
      <returns>新的 DbFunctionExpression，它會產生 <paramref name="stringArgument" /> 的反轉值。</returns>
      <param name="stringArgument">運算式，指定要進行反轉的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Reverse' 函式的多載均不接受結果類型為 <paramref name="stringArgument" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Right' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有字串和整數數值結果類型。運算式的結果類型為字串。</summary>
      <returns>新的 DbFunctionExpression，它會從 <paramref name="stringArgument" /> 傳回長度為 <paramref name="length" /> 的最右邊子字串。</returns>
      <param name="stringArgument">運算式，指定要在其中擷取最右邊子字串的字串。</param>
      <param name="length">運算式，指定要從 <paramref name="stringArgument" /> 擷取最右邊子字串的長度。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 或 <paramref name="length" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Right' 函式的多載均不接受結果類型為 <paramref name="stringArgument" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Round' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數都必須具有單精確度浮點數、雙精確度浮點數或十進位結果類型。運算式的結果類型與 <paramref name="value" /> 的結果類型相同。</summary>
      <returns>將指定引數捨入至最接近之整數值的新 DbFunctionExpression。</returns>
      <param name="value">運算式，指定要進位的數值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Round' 函式的多載均不接受結果類型為 <paramref name="value" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Round' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有單精確度浮點數、雙精確度浮點數或十進位，以及整數結果類型。運算式的結果類型與 <paramref name="value" /> 的結果類型相同。</summary>
      <returns>新的 DbFunctionExpression，它會依照 <paramref name="digits" /> 所指定的整數位數，將指定引數捨入至最接近之整數值。</returns>
      <param name="value">運算式，指定要進位的數值。</param>
      <param name="digits">運算式，指定進位時要使用的精確位數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 或 <paramref name="digits" /> 為 null</exception>
      <exception cref="T:System.ArgumentException">標準 'Round' 函式的多載均不接受結果類型為 <paramref name="value" /> 和 <paramref name="digits" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Second' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 DateTime、DateTimeOffset 或 Time 結果類型。運算式的結果類型為 Edm.Int32。</summary>
      <returns>新的 DbFunctionExpression，它會從 <paramref name="timeValue" /> 傳回整數秒數值。</returns>
      <param name="timeValue">運算式，指定要對其擷取秒的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Second' 函式的多載均不接受結果類型為 <paramref name="timeValue" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'StartsWith' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數都必須具有字串結果類型。運算式的結果類型為布林值。</summary>
      <returns>新的 DbFunctionExpression，表示 <paramref name="stringArgument" /> 是否以 <paramref name="prefix" /> 開頭。</returns>
      <param name="stringArgument">運算式，指定要檢查所指定 <paramref name="prefix" /> 的字串。</param>
      <param name="prefix">運算式，指定要檢查其 <paramref name="stringArgument" /> 的前置字元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 或 <paramref name="prefix" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'StartsWith' 函式的多載均不接受結果類型為 <paramref name="stringArgument" /> 和 <paramref name="prefix" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會對指定集合的非 null 成員叫用標準 'StDev' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。運算式的結果類型為 Edm.Double。</summary>
      <returns>對集合之非 null 成員產生標準差值的新 DbFunctionExpression。</returns>
      <param name="collection">運算式，指定要對其計算標準差的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'StDev' 函式的多載均不接受結果類型為 <paramref name="collection" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會對指定集合的母體叫用標準 'StDevP' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。運算式的結果類型為 Edm.Double。</summary>
      <returns>產生標準差值的新 DbFunctionExpression。</returns>
      <param name="collection">運算式，指定要對其計算標準差的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'StDevP' 函式的多載均不接受結果類型為 <paramref name="collection" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Substring' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有字串和整數數值結果類型。運算式的結果類型為字串。</summary>
      <returns>新的 DbFunctionExpression，它會從 <paramref name="stringArgument" /> 的 <paramref name="start" /> 開始，傳回長度為 <paramref name="length" /> 的子字串。</returns>
      <param name="stringArgument">運算式，指定要在其中擷取子字串的字串。</param>
      <param name="start">運算式，指定要取得子字串的起始索引。</param>
      <param name="length">運算式，指定子字串的長度。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />、<paramref name="start" /> 或 <paramref name="length" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Substring' 函式的多載均不接受結果類型為 <paramref name="stringArgument" />、<paramref name="start" /> 和 <paramref name="length" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會對指定的集合叫用標準 'Sum' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。運算式的結果類型與集合的項目類型相同。</summary>
      <returns>產生總和值的新 DbFunctionExpression。</returns>
      <param name="collection">運算式，指定要對其計算總和的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Sum' 函式的多載均不接受結果類型為 <paramref name="collection" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'ToLower' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有字串結果類型。運算式的結果類型也是字串。</summary>
      <returns>新的 DbFunctionExpression，它會傳回轉換成小寫字母的 <paramref name="stringArgument" /> 值。</returns>
      <param name="stringArgument">運算式，指定要轉換成小寫的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'ToLower' 函式的多載均不接受結果類型為 <paramref name="stringArgument" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'ToUpper' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有字串結果類型。運算式的結果類型也是字串。</summary>
      <returns>新的 DbFunctionExpression，它會傳回轉換成大寫字母的 <paramref name="stringArgument" /> 值。</returns>
      <param name="stringArgument">運算式，指定要轉換成大寫的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'ToUpper' 函式的多載均不接受結果類型為 <paramref name="stringArgument" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Trim' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有字串結果類型。運算式的結果類型也是字串。</summary>
      <returns>新的 DbFunctionExpression，它會傳回已移除開頭和尾端空白的 <paramref name="stringArgument" /> 值。</returns>
      <param name="stringArgument">運算式，指定要移除前後空格的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Trim' 函式的多載均不接受結果類型為 <paramref name="stringArgument" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'RTrim' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有字串結果類型。運算式的結果類型也是字串。</summary>
      <returns>新的 DbFunctionExpression，它會傳回已移除尾端空白的 <paramref name="stringArgument" /> 值。</returns>
      <param name="stringArgument">運算式，指定要移除後端空格的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'RTrim' 函式的多載均不接受結果類型為 <paramref name="stringArgument" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'LTrim' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有字串結果類型。運算式的結果類型也是字串。</summary>
      <returns>新的 DbFunctionExpression，它會傳回已移除開頭空白的 <paramref name="stringArgument" /> 值。</returns>
      <param name="stringArgument">運算式，指定要移除前端空格的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'LTrim' 函式的多載均不接受結果類型為 <paramref name="stringArgument" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Truncate' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有單精確度浮點數、雙精確度浮點數或十進位，以及整數結果類型。運算式的結果類型與 <paramref name="value" /> 的結果類型相同。</summary>
      <returns>新的 DbFunctionExpression，它會依照 <paramref name="digits" /> 所指定的整數位數，將指定引數截斷成最接近的整數值。</returns>
      <param name="value">運算式，指定要截斷的數值。</param>
      <param name="digits">運算式，指定截斷時要使用的精確位數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 或 <paramref name="digits" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Truncate' 函式的多載均不接受結果類型為 <paramref name="value" /> 和 <paramref name="digits" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'TruncateTime' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 DateTime 或 DateTimeOffset 結果類型。運算式的結果類型與 <paramref name="dateValue" /> 的結果類型相同。</summary>
      <returns>新的 DbFunctionExpression，它會傳回時間部分設為零的 <paramref name="dateValue" /> 值。</returns>
      <param name="dateValue">運算式，指定要對其截斷時間部分的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'TruncateTime' 函式的多載均不接受結果類型為 <paramref name="dateValue" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會對指定集合的非 null 成員叫用標準 'Var' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。運算式的結果類型為 Edm.Double。</summary>
      <returns>對集合之非 null 成員產生統計差異值的新 DbFunctionExpression。</returns>
      <param name="collection">運算式，指定要對其計算統計差異的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Var' 函式的多載均不接受結果類型為 <paramref name="collection" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會對指定集合的母體叫用標準 'VarP' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。運算式的結果類型為 Edm.Double。</summary>
      <returns>產生統計差異值的新 DbFunctionExpression。</returns>
      <param name="collection">運算式，指定要對其計算統計差異的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'VarP' 函式的多載均不接受結果類型為 <paramref name="collection" /> 的引數。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Year' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 DateTime 或 DateTimeOffset 結果類型。運算式的結果類型為 Edm.Int32。</summary>
      <returns>新的 DbFunctionExpression，它會從 <paramref name=" dateValue" /> 傳回整數年份值。</returns>
      <param name="dateValue">運算式，指定要對其擷取年份的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">標準 'Year' 函式的多載均不接受結果類型為 <paramref name="dateValue" /> 的引數。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row">
      <summary>表示 Row 類別的用意是在提供類似建構函式的方法來呼叫 &lt;see cref="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})" /&gt;。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}[])">
      <summary>使用指定的第一個資料行值和選擇性的後續資料行值，初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row" /> 類別的新執行個體</summary>
      <param name="columnValue">索引鍵值組，提供新資料列執行個體中的第一個資料行 (必要項)。</param>
      <param name="columnValues">索引鍵值組，提供新資料列執行個體中的任何後續資料行 (選擇性)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.op_Implicit(System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>將 Row 物件轉換成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示已轉換的 Row 物件。</returns>
      <param name="row">資料列物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.ToExpression">
      <summary>建立以此 Row 執行個體所包含資料行為基礎建構新資料列的新 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />。</summary>
      <returns>建構與此 Row 執行個體具有相同資料行名稱及 DbExpression 值之資料列的新 DbNewInstanceExpression。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions">
      <summary>提供用於建構 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 物件 (可叫用空間相關標準 EDM 函式) 的應用程式開發介面，並允許將該應用程式開發介面做為運算式類型本身上的擴充方法加以存取 (如果適用)。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Area(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'Area' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geography 或 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Double。</summary>
      <returns>傳回 spatialValue 之面積的新 DbFunctionExpression，如果 spatialValue 不是表面則為 null。</returns>
      <param name="spatialValue">運算式，指定要計算其面積的空間表面值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'AsBinary' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geography 或 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Binary。</summary>
      <returns>傳回 spatialValue 之已知二進位表示的新 DbFunctionExpression。</returns>
      <param name="spatialValue">運算式，指定要從其中產生已知二進位表示的空間值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'AsGml' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geography 或 Edm.Geometry 結果類型。運算式的結果類型為 Edm.String。</summary>
      <returns>傳回 spatialValue 之地理標記語言 (GML) 表示的新 DbFunctionExpression。</returns>
      <param name="spatialValue">運算式，指定要從其中產生地理標記語言 (GML) 表示的空間值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'AsText' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geography 或 Edm.Geometry 結果類型。運算式的結果類型為 Edm.String。</summary>
      <returns>傳回 spatialValue 之已知文字表示的新 DbFunctionExpression。</returns>
      <param name="spatialValue">運算式，指定要從其中產生已知文字表示的空間值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Centroid(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Centroid' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>傳回 geometryValue 之距心點 (其本身可能不在表面上) 的新 DbFunctionExpression，如果 geometryValue 不是表面則為 null。</returns>
      <param name="geometryValue">運算式，指定要從其中擷取中心點的幾何表面值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.CoordinateSystemId(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'CoordinateSystemId' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geography 或 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Int32。</summary>
      <returns>新的 DbFunctionExpression，它會從 spatialValue 傳回整數 SRID 值。</returns>
      <param name="spatialValue">運算式，指定要對從其中擷取座標系統 ID (SRID) 的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Distance(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'Distance' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中每個引數都必須具有 Edm.Geography 或 Edm.Geometry 結果類型。spatialValue1 的結果類型必須符合 spatialValue2 的結果類型。運算式的結果類型為 Edm.Double。</summary>
      <returns>傳回 spatialValue1 與 spatialValue1 中最接近點之間距離的新 DbFunctionExpression。</returns>
      <param name="spatialValue1">指定第一個空間值的運算式。</param>
      <param name="spatialValue2">運算式，指定要測量其與 spatialValue1 之間距離的空間值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Elevation(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'Elevation' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geography 或 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Double。</summary>
      <returns>傳回 spatialValue 之高度值的新 DbFunctionExpression，如果 spatialValue 不是點則為 null。</returns>
      <param name="spatialValue">運算式，指定要從其中擷取高度 (Z 座標) 值的空間點值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.EndPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'EndPoint' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geography 或 Edm.Geometry 結果類型。結果類型與 spatialValue 的結果類型相同。</summary>
      <returns>傳回 spatialValue 之結束點的新 DbFunctionExpression，如果 spatialValue 不是曲線則為 null。</returns>
      <param name="spatialValue">運算式，指定要從其中擷取結束點的空間曲線值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.ExteriorRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'ExteriorRing' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>傳回 geometryValue 多邊形之內環的新 DbFunctionExpression，如果 geometryValue 不是多邊形則為 null。</returns>
      <param name="geometryValue">幾何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeographyCollectionFromBinary' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。geographyCollectionWellKnownBinaryValue 必須具有二進位結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geography。</summary>
      <returns>根據指定值傳回新地理集合值的新 DbFunctionExpression。</returns>
      <param name="geographyCollectionWellKnownBinaryValue">提供地理集合值之已知二進位表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供地理集合值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeographyCollectionFromText' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。geographyCollectionWellKnownText 必須具有字串結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geography。</summary>
      <returns>根據指定值傳回新地理集合值的新 DbFunctionExpression。</returns>
      <param name="geographyCollectionWellKnownText">提供地理集合值之已知文字表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供地理集合值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'GeographyFromBinary' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有二進位結果類型。運算式的結果類型為 Edm.Geography。</summary>
      <returns>根據指定之二進位值傳回新地理值的新 DbFunctionExpression。</returns>
      <param name="wellKnownBinaryValue">提供地理值之已知二進位表示的運算式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeographyFromBinary' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。wellKnownBinaryValue 必須具有二進位結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geography。</summary>
      <returns>根據指定值傳回新地理值的新 DbFunctionExpression。</returns>
      <param name="wellKnownBinaryValue">提供地理值之已知二進位表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供地理值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'GeographyFromGml' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有字串結果類型。運算式的結果類型為 Edm.Geography。</summary>
      <returns>根據以基礎提供者預設座標系統 ID (SRID) 所指定之值傳回新地理值的新 DbFunctionExpression。</returns>
      <param name="geographyMarkup">提供地理值之地理標記語言 (GML) 表示的運算式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeographyFromGml' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。geographyMarkup 必須具有字串結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geography。</summary>
      <returns>根據指定值傳回新地理值的新 DbFunctionExpression。</returns>
      <param name="geographyMarkup">提供地理值之地理標記語言 (GML) 表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供地理值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'GeographyFromText' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有字串結果類型。運算式的結果類型為 Edm.Geography。其值是基礎提供者的預設座標系統 ID (SRID)。</summary>
      <returns>根據指定值傳回新地理值的新 DbFunctionExpression。</returns>
      <param name="wellKnownText">提供地理值之已知文字表示的運算式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeographyFromText' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。wellKnownText 必須具有字串結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geography。</summary>
      <returns>根據指定值傳回新地理值的新 DbFunctionExpression。</returns>
      <param name="wellKnownText">提供地理值之已知文字表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供地理值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeographyLineFromBinary' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。lineWellKnownBinaryValue 必須具有二進位結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geography。</summary>
      <returns>根據指定值傳回新地理線值的新 DbFunctionExpression。</returns>
      <param name="lineWellKnownBinaryValue">提供地理線值之已知二進位表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供地理線值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeographyLineFromText' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。lineWellKnownText 必須具有字串結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geography。</summary>
      <returns>根據指定值傳回新地理線值的新 DbFunctionExpression。</returns>
      <param name="lineWellKnownText">提供地理線值之已知文字表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供地理線值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeographyMultiLineFromBinary' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。multiLineWellKnownBinaryValue 必須具有二進位結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geography。</summary>
      <returns>根據指定值傳回新地理多線值的新 DbFunctionExpression。</returns>
      <param name="multiLineWellKnownBinaryValue">提供地理多線值之已知二進位表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供地理多線值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeographyMultiLineFromText' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。multiLineWellKnownText 必須具有字串結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geography。</summary>
      <returns>根據指定值傳回新地理多線值的新 DbFunctionExpression。</returns>
      <param name="multiLineWellKnownText">提供地理多線值之已知文字表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供地理多線值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeographyMultiPointFromBinary' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。multiPointWellKnownBinaryValue 必須具有二進位結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geography。</summary>
      <returns>根據指定值傳回新地理多點值的新 DbFunctionExpression。</returns>
      <param name="multiPointWellKnownBinaryValue">提供地理多點值之已知二進位表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供地理多點值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeographyMultiPointFromText' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。multiPointWellKnownText 必須具有字串結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geography。</summary>
      <returns>根據指定值傳回新地理多點值的新 DbFunctionExpression。</returns>
      <param name="multiPointWellKnownText">提供地理多點值之已知文字表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供地理多點值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeographyMultiPolygonFromBinary' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。multiPolygonWellKnownBinaryValue 必須具有二進位結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geography。</summary>
      <returns>根據指定值傳回新地理多多邊形值的新 DbFunctionExpression。</returns>
      <param name="multiPolygonWellKnownBinaryValue">提供地理多多邊形值之已知二進位表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供地理多多邊形值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeographyMultiPolygonFromText' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。multiPolygonWellKnownText 必須具有字串結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geography。</summary>
      <returns>根據指定值傳回新地理多多邊形值的新 DbFunctionExpression。</returns>
      <param name="multiPolygonWellKnownText">提供地理多多邊形值之已知文字表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供地理多多邊形值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeographyPointFromBinary' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。pointWellKnownBinaryValue 必須具有二進位結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geography。</summary>
      <returns>根據指定值傳回新地理點值的新 DbFunctionExpression。</returns>
      <param name="pointWellKnownBinaryValue">提供地理點值之已知二進位表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供地理點值之座標系統 pointWellKnownBinaryValue 的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeographyPointFromText' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。</summary>
      <returns>標準的 'GeographyPointFromText' 函式。</returns>
      <param name="pointWellKnownText">提供地理點值之已知文字表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供地理點值之座標 systempointWellKnownTextValue 的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeographyPolygonFromBinary' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。polygonWellKnownBinaryValue 必須具有二進位結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geography。</summary>
      <returns>根據指定值傳回新地理多邊形值的新 DbFunctionExpression。</returns>
      <param name="polygonWellKnownBinaryValue">提供地理多邊形值之已知二進位表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供地理多邊形值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeographyPolygonFromText' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。polygonWellKnownText 必須具有字串結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geography。</summary>
      <returns>根據指定值傳回新地理多邊形值的新 DbFunctionExpression。</returns>
      <param name="polygonWellKnownText">提供地理多邊形值之已知文字表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供地理多邊形值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeometryCollectionFromBinary' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。geometryCollectionWellKnownBinaryValue 必須具有二進位結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>根據指定值傳回新幾何集合值的新 DbFunctionExpression。</returns>
      <param name="geometryCollectionWellKnownBinaryValue">提供幾何集合值之已知二進位表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供幾何集合值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeometryCollectionFromText' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。geometryCollectionWellKnownText 必須具有字串結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>根據指定值傳回新幾何集合值的新 DbFunctionExpression。</returns>
      <param name="geometryCollectionWellKnownText">提供幾何集合值之已知文字表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供幾何集合值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'GeometryFromBinary' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有二進位結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>根據指定之二進位值傳回新幾何值的新 DbFunctionExpression。</returns>
      <param name="wellKnownBinaryValue">提供幾何值之已知二進位表示的運算式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeometryFromBinary' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。wellKnownBinaryValue 必須具有二進位結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>根據指定值傳回新幾何值的新 DbFunctionExpression。</returns>
      <param name="wellKnownBinaryValue">提供幾何值之已知二進位表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供幾何值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'GeometryFromGml' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有字串結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>根據以基礎提供者預設座標系統 ID (SRID) 所指定之值傳回新幾何值的新 DbFunctionExpression。</returns>
      <param name="geometryMarkup">提供幾何值之地理標記語言 (GML) 表示的運算式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeometryFromGml' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。geometryMarkup 必須具有字串結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>根據指定值傳回新幾何值的新 DbFunctionExpression。</returns>
      <param name="geometryMarkup">提供幾何值之地理標記語言 (GML) 表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供幾何值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'GeometryFromText' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有字串結果類型。運算式的結果類型為 Edm.Geometry。其值是基礎提供者的預設座標系統 ID (SRID)。</summary>
      <returns>根據指定值傳回新幾何值的新 DbFunctionExpression。</returns>
      <param name="wellKnownText">提供幾何值之已知文字表示的運算式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeometryFromText' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。wellKnownText 必須具有字串結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>根據指定值傳回新幾何值的新 DbFunctionExpression。</returns>
      <param name="wellKnownText">提供幾何值之已知文字表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供幾何值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeometryLineFromBinary' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。lineWellKnownBinaryValue 必須具有二進位結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>根據指定值傳回新幾何線值的新 DbFunctionExpression。</returns>
      <param name="lineWellKnownBinaryValue">提供幾何線值之已知二進位表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供幾何線值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeometryLineFromText' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。lineWellKnownText 必須具有字串結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>根據指定值傳回新幾何線值的新 DbFunctionExpression。</returns>
      <param name="lineWellKnownText">提供幾何線值之已知文字表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供幾何線值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeometryMultiLineFromBinary' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。multiLineWellKnownBinaryValue 必須具有二進位結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>根據指定值傳回新幾何多線值的新 DbFunctionExpression。</returns>
      <param name="multiLineWellKnownBinaryValue">提供幾何多線值之已知二進位表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供幾何多線值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeometryMultiLineFromText' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。multiLineWellKnownText 必須具有字串結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>根據指定值傳回新幾何多線值的新 DbFunctionExpression。</returns>
      <param name="multiLineWellKnownText">提供幾何多線值之已知文字表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供幾何多線值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeometryMultiPointFromBinary' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。multiPointWellKnownBinaryValue 必須具有二進位結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>根據指定值傳回新幾何多點值的新 DbFunctionExpression。</returns>
      <param name="multiPointWellKnownBinaryValue">提供幾何多點值之已知二進位表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供幾何多點值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeometryMultiPointFromText' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。multiPointWellKnownText 必須具有字串結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>根據指定值傳回新幾何多點值的新 DbFunctionExpression。</returns>
      <param name="multiPointWellKnownText">提供幾何多點值之已知文字表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供幾何多點值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeometryMultiPolygonFromBinary' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。multiPolygonWellKnownBinaryValue 必須具有二進位結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>根據指定值傳回新幾何多多邊形值的新 DbFunctionExpression。</returns>
      <param name="multiPolygonWellKnownBinaryValue">提供幾何多多邊形值之已知二進位表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供幾何多多邊形值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeometryMultiPolygonFromText' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。multiPolygonWellKnownText 必須具有字串結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>根據指定值傳回新幾何多多邊形值的新 DbFunctionExpression。</returns>
      <param name="multiPolygonWellKnownText">提供幾何多多邊形值之已知文字表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供幾何多多邊形值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeometryPointFromBinary' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。pointWellKnownBinaryValue 必須具有二進位結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>根據指定值傳回新幾何點值的新 DbFunctionExpression。</returns>
      <param name="pointWellKnownBinaryValue">提供幾何點值之已知二進位表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供幾何點值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeometryPointFromText' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。pointWellKnownText 必須具有字串結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>根據指定值傳回新幾何點值的新 DbFunctionExpression。</returns>
      <param name="pointWellKnownText">提供幾何點值之已知文字表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供幾何點值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeometryPolygonFromBinary' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。polygonWellKnownBinaryValue 必須具有二進位結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>根據指定值傳回新幾何多邊形值的新 DbFunctionExpression。</returns>
      <param name="polygonWellKnownBinaryValue">提供幾何多邊形值之已知二進位表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供幾何多邊形值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'GeometryPolygonFromText' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。polygonWellKnownText 必須具有字串結果類型，而 coordinateSystemId 必須具有整數數值結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>根據指定值傳回新幾何多邊形值的新 DbFunctionExpression。</returns>
      <param name="polygonWellKnownText">提供幾何多邊形值之已知文字表示的運算式。</param>
      <param name="coordinateSystemId">運算式，提供幾何多邊形值之座標系統的座標系統 ID (SRID)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定的引數叫用標準 'InteriorRingAt' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。第一個引數必須有 Edm.Geometry 結果類型。第二個引數必須有整數數字結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>傳回在 geometryValue 中處於 indexValue 位置之內環的新 DbFunctionExpression，如果 geometryValue 不是多邊形則為 null。</returns>
      <param name="geometryValue">幾何值。</param>
      <param name="indexValue">運算式，指定要從多邊形中擷取之內環的位置。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'InteriorRingCount' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Int32。</summary>
      <returns>傳回 geometryValue 多邊形之內環數的新 DbFunctionExpression，如果 geometryValue 不是多邊形則為 null。</returns>
      <param name="geometryValue">幾何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsClosedSpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'IsClosedSpatial' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geography 或 Edm.Geometry 結果類型。結果類型是 Edm.Boolean。</summary>
      <returns>傳回表示 spatialValue 是否封閉之布林值的新 DbFunctionExpression，如果 spatialValue 不是曲線則為 null。</returns>
      <param name="spatialValue">運算式，指定要從其中擷取 IsClosedSpatial 值的空間曲線值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsEmptySpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'IsEmptySpatial' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geography 或 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Boolean。</summary>
      <returns>傳回表示 spatialValue 是否空白之布林值的新 DbFunctionExpression。</returns>
      <param name="spatialValue">運算式，指定要從其中擷取 IsEmptySptiaal 值的空間值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'IsRing' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geometry 結果類型。結果類型是 Edm.Boolean。</summary>
      <returns>傳回表示 geometryValue 是否為環形 (封閉且簡單的) 之布林值的新 DbFunctionExpression，如果 geometryValue 不是曲線則為 null。</returns>
      <param name="geometryValue">運算式，指定要從其中擷取 IsRing 值的幾何曲線值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsSimpleGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'IsSimpleGeometry' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Boolean。</summary>
      <returns>傳回表示 geometryValue 是否為簡單幾何之布林值的新 DbFunctionExpression。</returns>
      <param name="geometryValue">幾何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsValidGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'IsValidGeometry' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Boolean。</summary>
      <returns>傳回表示 geometryValue 是否有效之布林值的新 DbFunctionExpression。</returns>
      <param name="geometryValue">運算式，指定應測試空間有效性的幾何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Latitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Latitude' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geography 結果類型。運算式的結果類型為 Edm.Double。</summary>
      <returns>傳回 geographyValue 之緯度值的新 DbFunctionExpression，如果 geographyValue 不是點則為 null。</returns>
      <param name="geographyValue">運算式，指定要從其中擷取緯度值的地理點值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Longitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'Longitude' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geography 結果類型。運算式的結果類型為 Edm.Double。</summary>
      <returns>傳回 geographyValue 之經度值的新 DbFunctionExpression，如果 geographyValue 不是點則為 null。</returns>
      <param name="geographyValue">運算式，指定要從其中擷取經度值的地理點值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Measure(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'Measure' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geography 或 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Double。</summary>
      <returns>傳回 spatialValue 之量值的新 DbFunctionExpression，如果 spatialValue 不是點則為 null。</returns>
      <param name="spatialValue">運算式，指定要從其中擷取量值 (M) 座標值的空間點值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定的引數叫用標準 'PointAt' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。第一個引數必須有 Edm.Geography 或 Edm.Geometry 結果類型。第二個引數必須有整數數字結果類型。運算式的結果類型與 spatialValue 的結果類型相同。</summary>
      <returns>傳回在 spatialValue 中處於 indexValue 位置之點的新 DbFunctionExpression，如果 spatialValue 不是串線則為 null。</returns>
      <param name="spatialValue">指定空間串線值的運算式。</param>
      <param name="indexValue">運算式，指定要從串線中擷取之點的位置。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'PointCount' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geography 或 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Int32。</summary>
      <returns>傳回 spatialValue 內之點數的新 DbFunctionExpression，如果 spatialValue 不是串線則為 null。</returns>
      <param name="spatialValue">運算式，指定要從其中擷取點數目的空間串線值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointOnSurface(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'PointOnSurface' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>傳回保證會在 geometryValue 表面上之點的新 DbFunctionExpression，如果 geometryValue 不是表面則為 null。</returns>
      <param name="geometryValue">運算式，指定要從其中擷取點的幾何表面值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBoundary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'SpatialBoundary' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>傳回 geometryValue 之界限的新 DbFunctionExpression。</returns>
      <param name="geometryValue">運算式，指定要從其中擷取 SpatialBoundary 值的幾何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBuffer(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'SpatialBuffer' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geography 或 Edm.Geometry 以及 Edm.Double 結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>傳回表示所有與 spatialValue 相距小於或等距的點之幾何值的新 DbFunctionExpression。</returns>
      <param name="spatialValue">指定空間值的運算式。</param>
      <param name="distance">指定緩衝區距離的運算式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialContains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'SpatialContains' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中每個引數都必須具有 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Boolean。</summary>
      <returns>傳回表示 geometryValue1 是否部分包含 geometryValue2 之布林值的新 DbFunctionExpression。</returns>
      <param name="geometryValue1">指定第一個幾何值的運算式。</param>
      <param name="geometryValue2">運算式，指定要與 geometryValue1 比較的幾何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialConvexHull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'SpatialConvexHull' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>傳回 geometryValue 之凸殼的新 DbFunctionExpression。</returns>
      <param name="geometryValue">運算式，指定要從其中擷取凸殼值的幾何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialCrosses(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'SpatialCrosses' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中每個引數都必須具有 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Boolean。</summary>
      <returns>傳回表示 geometryValue1 與 geometryValue2 是否彼此有交集之布林值的新 DbFunctionExpression。</returns>
      <param name="geometryValue1">指定第一個幾何值的運算式。</param>
      <param name="geometryValue2">運算式，指定要與 geometryValue1 比較的幾何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'SpatialDifference' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中每個引數都必須具有 Edm.Geography 或 Edm.Geometry 結果類型。spatialValue1 的結果類型必須符合 spatialValue2 的結果類型。運算式的結果類型與 spatialValue1 和 spatialValue2 的類型相同。</summary>
      <returns>傳回表示 spatialValue2 與 spatialValue1 差異之幾何值的新 DbFunctionExpression。</returns>
      <param name="spatialValue1">指定第一個空間值的運算式。</param>
      <param name="spatialValue2">運算式，指定要計算其與 spatialValue1 之間差異的空間值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDimension(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'SpatialDimension' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geography 或 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Int32。</summary>
      <returns>從 spatialValue 傳回維度值的新 DbFunctionExpression。</returns>
      <param name="spatialValue">運算式，指定要從其中擷取維度值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDisjoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'SpatialDisjoint' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中每個引數都必須具有 Edm.Geography 或 Edm.Geometry 結果類型。spatialValue1 的結果類型必須符合 spatialValue2 的結果類型。運算式的結果類型為 Edm.Boolean。</summary>
      <returns>傳回表示 spatialValue1 與 spatialValue2 是否部分脫離之布林值的新 DbFunctionExpression。</returns>
      <param name="spatialValue1">指定第一個空間值的運算式。</param>
      <param name="spatialValue2">運算式，指定要與 spatialValue1 比較不相交的空間值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定的引數叫用標準 'SpatialElementAt' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />。第一個引數必須有 Edm.Geography 或 Edm.Geometry 結果類型。第二個引數必須有整數數字結果類型。運算式的結果類型與 spatialValue 的結果類型相同。</summary>
      <returns>傳回在 spatialValue 中處於 indexValue 位置之集合項目的新 DbFunctionExpression，如果 spatialValue 不是集合則為 null。</returns>
      <param name="spatialValue">指定地理或幾何集合值的運算式。</param>
      <param name="indexValue">運算式，指定要從幾何或地理集合中擷取之項目的位置。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'SpatialElementCount' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geography 或 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Int32。</summary>
      <returns>傳回 spatialValue 中之項目數的新 DbFunctionExpression，如果 spatialValue 不是集合則為 null。</returns>
      <param name="spatialValue">運算式，指定要從其中擷取項目數目的地理或幾何集合值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEnvelope(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'SpatialEnvelope' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Geometry。</summary>
      <returns>傳回 geometryValue 之最小周框方塊的新 DbFunctionExpression。</returns>
      <param name="geometryValue">運算式，指定要從其中擷取封套值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEquals(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'SpatialEquals' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中每個引數都必須具有 Edm.Geography 或 Edm.Geometry 結果類型。spatialValue1 的結果類型必須符合 spatialValue2 的結果類型。運算式的結果類型為 Edm.Boolean。</summary>
      <returns>傳回表示 spatialValue1 與 spatialValue2 是否相等之布林值的新 DbFunctionExpression。</returns>
      <param name="spatialValue1">指定第一個空間值的運算式。</param>
      <param name="spatialValue2">運算式，指定要與 spatialValue1 比較是否相等的空間值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersection(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'SpatialIntersection' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中每個引數都必須具有 Edm.Geography 或 Edm.Geometry 結果類型。spatialValue1 的結果類型必須符合 spatialValue2 的結果類型。運算式的結果類型與 spatialValue1 和 spatialValue2 的類型相同。</summary>
      <returns>傳回表示 spatialValue1 與 spatialValue2 交集處之空間值的新 DbFunctionExpression。</returns>
      <param name="spatialValue1">指定第一個空間值的運算式。</param>
      <param name="spatialValue2">運算式，指定要計算其與 spatialValue1 之間交集的空間值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersects(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'SpatialIntersects' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中每個引數都必須具有 Edm.Geography 或 Edm.Geometry 結果類型。spatialValue1 的結果類型必須符合 spatialValue2 的結果類型。運算式的結果類型為 Edm.Boolean。</summary>
      <returns>傳回表示 spatialValue1 與 spatialValue2 是否交集之布林值的新 DbFunctionExpression。</returns>
      <param name="spatialValue1">指定第一個空間值的運算式。</param>
      <param name="spatialValue2">運算式，指定要與 spatialValue1 比較是否交集的空間值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialLength(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'SpatialLength' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geography 或 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Double。</summary>
      <returns>傳回 spatialValue 長度的新 DbFunctionExpression，如果 spatialValue 不是曲線則為 null。</returns>
      <param name="spatialValue">運算式，指定要從其中擷取長度的空間曲線值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialOverlaps(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'SpatialOverlaps' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中每個引數都必須具有 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Boolean。</summary>
      <returns>傳回表示 geometryValue1 是否部分重疊 geometryValue2 之布林值的新 DbFunctionExpression。</returns>
      <param name="geometryValue1">指定第一個幾何值的運算式。</param>
      <param name="geometryValue2">運算式，指定要與 geometryValue1 比較的幾何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialRelate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'SpatialRelate' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geometry 和字串結果類型。運算式的結果類型為 Edm.Boolean。</summary>
      <returns>傳回表示根據 intersectionPatternMatrix 所指定之空間關聯性，geometryValue1 是否在空間上與 geometryValue2 相關聯之布林值的新 DbFunctionExpression。</returns>
      <param name="geometryValue1">指定第一個幾何值的運算式。</param>
      <param name="geometryValue2">運算式，指定要與 geometryValue1 比較的幾何值。</param>
      <param name="intersectionPatternMatrix">運算式，指定用於比較 geometryValue1 與 geometryValue2 之維度延伸九交模型 (DE-9IM) 交集模式的文字表示。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialSymmetricDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'SpatialSymmetricDifference' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中每個引數都必須具有 Edm.Geography 或 Edm.Geometry 結果類型。spatialValue1 的結果類型必須符合 spatialValue2 的結果類型。運算式的結果類型與 spatialValue1 和 spatialValue2 的類型相同。</summary>
      <returns>傳回表示 spatialValue2 與 spatialValue1 對稱差異之幾何值的新 DbFunctionExpression。</returns>
      <param name="spatialValue1">指定第一個空間值的運算式。</param>
      <param name="spatialValue2">運算式，指定要計算其與 spatialValue1 之間對稱差的空間值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTouches(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'SpatialTouches' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中每個引數都必須具有 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Boolean。</summary>
      <returns>傳回表示 geometryValue1 是否觸及 geometryValue2 之布林值的新 DbFunctionExpression。</returns>
      <param name="geometryValue1">指定第一個幾何值的運算式。</param>
      <param name="geometryValue2">運算式，指定要與 geometryValue1 比較的幾何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTypeName(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'SpatialTypeName' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geography 或 Edm.Geometry 結果類型。運算式的結果類型為 Edm.String。</summary>
      <returns>從 spatialValue 傳回字串幾何類型名稱的新 DbFunctionExpression。</returns>
      <param name="spatialValue">運算式，指定要從其中擷取幾何類型名稱的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialUnion(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'SpatialUnion' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中每個引數都必須具有 Edm.Geography 或 Edm.Geometry 結果類型。spatialValue1 的結果類型必須符合 spatialValue2 的結果類型。運算式的結果類型與 spatialValue1 和 spatialValue2 的類型相同。</summary>
      <returns>傳回表示 spatialValue1 與 spatialValue2 聯集之空間值的新 DbFunctionExpression。</returns>
      <param name="spatialValue1">指定第一個空間值的運算式。</param>
      <param name="spatialValue2">運算式，指定要計算其與 spatialValue1 之間聯集的空間值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialWithin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'SpatialWithin' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中每個引數都必須具有 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Boolean。</summary>
      <returns>傳回表示 geometryValue1 是否部分位於 geometryValue2 內之布林值的新 DbFunctionExpression。</returns>
      <param name="geometryValue1">指定第一個幾何值的運算式。</param>
      <param name="geometryValue2">運算式，指定要與 geometryValue1 比較的幾何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.StartPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定之引數叫用標準 'StartPoint' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geography 或 Edm.Geometry 結果類型。結果類型與 spatialValue 的結果類型相同。</summary>
      <returns>傳回 spatialValue 之起始點的新 DbFunctionExpression，如果 spatialValue 不是曲線則為 null。</returns>
      <param name="spatialValue">運算式，指定要從其中擷取起點的空間曲線值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.XCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'XCoordinate' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Double。</summary>
      <returns>傳回 geometryValue 之 X 座標值的新 DbFunctionExpression，如果 geometryValue 不是點則為 null。</returns>
      <param name="geometryValue">運算式，指定要從其中擷取 X 座標值的幾何點值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.YCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立會使用指定引數叫用標準 'YCoordinate' 函式的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，其中的引數必須具有 Edm.Geometry 結果類型。運算式的結果類型為 Edm.Double。</summary>
      <returns>傳回 geometryValue 之 Y 座標值的新 DbFunctionExpression，如果 geometryValue 不是點則為 null。</returns>
      <param name="geometryValue">運算式，指定要從其中擷取 Y 座標值的幾何點值。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser">
      <summary>公用 Entity SQL 剖析器類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser.Parse(System.String,System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression[])">
      <summary>剖析具有指定之參數的指定查詢。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" />，包含 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> 和描述內嵌函式定義 (如果有) 的資訊。</returns>
      <param name="query">要剖析的 EntitySQL 查詢。</param>
      <param name="parameters">選擇性查詢參數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser.ParseLambda(System.String,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>剖析具有特定 set 變數的特定查詢，並產生 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" />，包含 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> 和描述內嵌函式定義 (如果有) 的資訊。</returns>
      <param name="query">要剖析的查詢。</param>
      <param name="variables">選擇性查詢變數。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition">
      <summary>傳回做為 <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" /> 一部分的 Entity SQL 查詢內嵌函式定義。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.EndPosition">
      <summary>函式定義在 eSQL 查詢文字中的結束位置。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.Lambda">
      <summary>函式主體和參數。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.Name">
      <summary>函式名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.StartPosition">
      <summary>函式定義在 eSQL 查詢文字中的起始位置。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.ParseResult">
      <summary>Entity SQL 剖析器結果資訊。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.ParseResult.CommandTree">
      <summary>剖析期間產生的命令樹。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.ParseResult.FunctionDefinitions">
      <summary>描述查詢內嵌函式定義的 <see cref="T:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition" /> 物件清單。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityCommand">
      <summary>類別，表示概念層的命令</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor">
      <summary>使用指定的值，初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String)">
      <summary>使用指定的陳述式，初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 類別的新執行個體。</summary>
      <param name="statement">命令的文字。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection)">
      <summary>使用指定的陳述式和連接，初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 類別的新執行個體。</summary>
      <param name="statement">命令的文字。</param>
      <param name="connection">資料來源的連接。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection,System.Data.Entity.Core.EntityClient.EntityTransaction)">
      <summary>使用指定的陳述式、連接和交易，初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 類別的新執行個體。</summary>
      <param name="statement">命令的文字。</param>
      <param name="connection">資料來源的連接。</param>
      <param name="transaction">命令執行的所在交易。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection,System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>使用給定的 eSQL 陳述式和要使用的連接物件，建構 EntityCommand 物件</summary>
      <param name="statement">要執行的 eSQL 命令文字</param>
      <param name="connection">連接物件</param>
      <param name="resolver">用來解析 DbProviderServices 的解析程式</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.Cancel">
      <summary>取消執行 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText">
      <summary>取得或設定 Entity SQL 陳述式 (Statement)，此陳述式會指定要執行的命令或預存程序 (Stored Procedure)。</summary>
      <returns>Entity SQL 陳述式，此陳述式會指定要執行的命令或預存程序。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandTimeout">
      <summary>取得或設定在逾時之前要等待的時間。</summary>
      <returns>等待命令執行的時間 (以秒為單位)。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandTree">
      <summary>取得或設定要執行的命令樹，只能設定命令樹或命令文字中的其中一個，無法設定兩者。</summary>
      <returns>要執行的命令樹。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandType">
      <summary>取得或設定值，此值表示如何解譯 <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText" /> 屬性。</summary>
      <returns>其中一個 <see cref="T:System.Data.CommandType" /> 列舉值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Connection">
      <summary>取得或設定 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 所使用的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />。</summary>
      <returns>實體命令所使用的連接。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.CreateDbParameter">
      <summary>建立並傳回新參數物件，代表 eSQL 陳述式中的參數</summary>
      <returns>參數物件。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.CreateParameter">
      <summary>建立 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 物件的新執行個體。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 物件的新執行個體。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbConnection">
      <summary>用於執行命令的連接物件</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbParameterCollection">
      <summary>此命令的參數集合</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbTransaction">
      <summary>此命令執行所在的交易</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DesignTimeVisible">
      <summary>取得或設定值，此值表示在 Windows Form 設計工具控制項中是否應該看得到命令物件。</summary>
      <returns>如果命令物件應該在 Windows Form 設計工具控制項中顯示，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.EnablePlanCaching">
      <summary>取得或設定值，指出查詢計畫快取是否已啟用。</summary>
      <returns>如果查詢計畫快取已啟用則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
      <summary>執行命令並傳回讀取結果的資料讀取器</summary>
      <returns>DbDataReader 物件</returns>
      <param name="behavior">當執行命令時使用的行為</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>非同步執行命令並傳回讀取結果的資料讀取器</summary>
      <returns>表示非同步作業的工作。工作結果包含 DbDataReader 物件。</returns>
      <param name="behavior">當執行命令時使用的行為</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteNonQuery">
      <summary>執行目前的命令。</summary>
      <returns>受影響的資料列數目。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
      <summary>非同步執行命令並捨棄命令傳回的任何結果</summary>
      <returns>表示非同步作業的工作。工作結果包含受影響的資料列數。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReader">
      <summary>執行命令並傳回資料讀取器。</summary>
      <returns>包含結果的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>將 <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText" /> 編譯成命令樹，並將其傳遞至基礎存放區提供者來執行，然後使用指定的 <see cref="T:System.Data.CommandBehavior" />，從產生的結果集中建置 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />。</summary>
      <returns>包含結果的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />。</returns>
      <param name="behavior">其中一個 <see cref="T:System.Data.CommandBehavior" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync">
      <summary>非同步執行命令並傳回讀取結果的資料讀取器。只能在 CommandType.CommandText 上呼叫 (否則，請使用標準 Execute* 方法)</summary>
      <returns>表示非同步作業的工作。工作結果包含 EntityDataReader 物件。</returns>
      <exception cref="T:System.InvalidOperationException">針對預存程序命令，如果為實體集合結果以外的任何物件呼叫</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Data.CommandBehavior)">
      <summary>非同步執行命令並傳回讀取結果的資料讀取器。只能在 CommandType.CommandText 上呼叫 (否則，請使用標準 Execute* 方法)</summary>
      <returns>表示非同步作業的工作。工作結果包含 EntityDataReader 物件。</returns>
      <param name="behavior">當執行命令時使用的行為</param>
      <exception cref="T:System.InvalidOperationException">針對預存程序命令，如果為實體集合結果以外的任何物件呼叫</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>非同步執行命令並傳回讀取結果的資料讀取器。只能在 CommandType.CommandText 上呼叫 (否則，請使用標準 Execute* 方法)</summary>
      <returns>表示非同步作業的工作。工作結果包含 EntityDataReader 物件。</returns>
      <param name="behavior">當執行命令時使用的行為</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">針對預存程序命令，如果為實體集合結果以外的任何物件呼叫</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Threading.CancellationToken)">
      <summary>非同步執行命令並傳回讀取結果的資料讀取器。只能在 CommandType.CommandText 上呼叫 (否則，請使用標準 Execute* 方法)</summary>
      <returns>表示非同步作業的工作。工作結果包含 EntityDataReader 物件。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">針對預存程序命令，如果為實體集合結果以外的任何物件呼叫</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteScalar">
      <summary>執行命令，並傳回結果集中第一個資料列的第一個資料行。會忽略其他的資料行或資料列。</summary>
      <returns>結果集中第一個資料列的第一個資料行，如果結果集是空的，則為 null 參考 (在 Visual Basic 中為 Nothing)。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Parameters">
      <summary>取得 Entity SQL 陳述式或預存程序的參數。</summary>
      <returns>Entity SQL 陳述式或預存程序的參數。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.Prepare">
      <summary>編譯實體層級命令，並建立命令的備製版本。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ToTraceString">
      <summary>編譯實體層級命令並傳回存放區命令文字。</summary>
      <returns>存放區命令文字。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Transaction">
      <summary>取得或設定 <see cref="T:System.Data.SqlClient.SqlCommand" /> 執行所在的交易。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlCommand" /> 執行的所在交易。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.UpdatedRowSource">
      <summary>取得或設定命令結果套用至要更新之資料列的方式。</summary>
      <returns>其中一個 <see cref="T:System.Data.UpdateRowSource" /> 值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityConnection">
      <summary>類別，表示概念層的連接。實體連接只能初始化一次 (透過開啟連接)。之後就無法變更連接字串、附加新存放區連接或變更存放區連接字串。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)">
      <summary>使用指定的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 和 <see cref="T:System.Data.Common.DbConnection" />，初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 類別的新執行個體。</summary>
      <param name="workspace">與此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 相關聯的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />。</param>
      <param name="connection">此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 物件的基礎資料來源連接。</param>
      <exception cref="T:System.ArgumentNullException">workspace 或 connection 參數為 null。</exception>
      <exception cref="T:System.ArgumentException">工作空間中遺漏概念模型。-或-工作空間中遺漏對應檔案。-或-工作空間中遺漏儲存體模型。-或-連接不在已關閉狀態。</exception>
      <exception cref="T:System.Data.Entity.Core.ProviderIncompatibleException">connection 不是來自於 ADO.NET Entity Framework 相容的提供者。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection,System.Boolean)">
      <summary>從載入記憶體中的中繼資料，建構 EntityConnection</summary>
      <param name="workspace">包含中繼資料資訊的工作空間。</param>
      <param name="connection">存放區連接。</param>
      <param name="entityConnectionOwnsStoreConnection">如果設定為 true，則處置實體連接時也會處置此存放區連接，否則呼叫端必須處置此存放區連接。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.String)">
      <summary>根據連接字串初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 類別的新執行個體。</summary>
      <param name="connectionString">提供者特定連接字串。</param>
      <exception cref="T:System.ArgumentException">已提供無效的連接字串關鍵字，或尚未提供必要的連接字串關鍵字。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)">
      <summary>開始資料庫交易</summary>
      <returns>表示新交易的物件</returns>
      <param name="isolationLevel">交易的隔離等級</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction">
      <summary>使用基礎提供者開始交易。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />。傳回的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> 執行個體可以在之後與 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 產生關聯，以便在該交易之下執行命令。</returns>
      <exception cref="T:System.InvalidOperationException">基礎提供者未知。-或-<see cref="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction" /> 的呼叫是在具有目前交易的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 上進行。-或-<see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 的狀態不是 <see cref="F:System.Data.ConnectionState.Open" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>使用基礎提供者開始具有指定之隔離等級的交易。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />。傳回的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> 執行個體可以在之後與 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 產生關聯，以便在該交易之下執行命令。</returns>
      <param name="isolationLevel">交易的隔離等級。</param>
      <exception cref="T:System.InvalidOperationException">基礎提供者未知。-或-<see cref="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction" /> 的呼叫是在具有目前交易的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 上進行。-或-<see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 的狀態不是 <see cref="F:System.Data.ConnectionState.Open" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.ChangeDatabase(System.String)">
      <summary>不支援。</summary>
      <param name="databaseName">不支援。</param>
      <exception cref="T:System.NotSupportedException">呼叫此方法時。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Close">
      <summary>關閉與資料庫的連接。</summary>
      <exception cref="T:System.InvalidOperationException">關閉連接時發生錯誤。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ConnectionString">
      <summary>取得或設定 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 連接字串。</summary>
      <returns>建立資料來源之初始連接所需的連接字串。預設值為空字串。在關閉的連接上會傳回目前設定的值。如果沒有設定值，則傳回空字串。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ConnectionTimeout">
      <summary>取得在結束嘗試並產生錯誤前嘗試建立連接的等候秒數。</summary>
      <returns>等待連接開啟的時間 (以秒為單位)。預設值為基礎資料提供者的預設逾時。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.CreateCommand">
      <summary>建立 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 的新執行個體，且 <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.Connection" /> 設定為此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 物件。</returns>
      <exception cref="T:System.InvalidOperationException">基礎資料提供者的名稱未知。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.CreateDbCommand">
      <summary>建立使用此連接物件的新命令物件</summary>
      <returns>命令物件。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.CurrentTransaction">
      <summary>取得目前的交易，亦即此連接登記所在的交易。可能是空白值。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.Database">
      <summary>取得目前資料庫或在開啟連接後要使用之資料庫的名稱。</summary>
      <returns>基礎資料提供者的 Database 屬性值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.DataSource">
      <summary>取得要連接到的資料來源的名稱或網路地址。</summary>
      <returns>資料來源的名稱。預設值為空字串。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.DbProviderFactory">
      <summary>取得與 EntityConnection 相關聯的提供者 Factory</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Dispose(System.Boolean)">
      <summary>清除此連接物件</summary>
      <param name="disposing">true 表示同時釋放 Managed 和 Unmanaged 資源，false 表示只釋放 Unmanaged 資源</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>在指定的交易中登記此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />。</summary>
      <param name="transaction">要在其中登記的交易物件。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 的狀態不是 <see cref="F:System.Data.ConnectionState.Open" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.GetMetadataWorkspace">
      <summary>傳回與此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 相關聯的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />。</summary>
      <returns>與此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 相關聯的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />。</returns>
      <exception cref="T:System.Data.Entity.Core.MetadataException">包含無效 Metadata 關鍵字值的內嵌連接字串。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Open">
      <summary>呼叫基礎資料提供者的 Open 方法來建立與資料來源的連接。</summary>
      <exception cref="T:System.InvalidOperationException">當您開啟連接或基礎資料提供者的名稱未知時會發生錯誤。</exception>
      <exception cref="T:System.Data.Entity.Core.MetadataException">包含無效 Metadata 關鍵字值的內嵌連接字串。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.OpenAsync(System.Threading.CancellationToken)">
      <summary>在基礎資料提供者上呼叫 Open 方法，以非同步方式建立與資料存放區的連接</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ServerVersion">
      <summary>取得包含用戶端所連接之資料來源版本的字串。</summary>
      <returns>包含在提供者連接字串中的資料來源版本。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.State">
      <summary>取得 EntityConnection 的狀態，其設定目的是要為了追蹤由此 EntityConnection 包裝之基礎資料庫連接的狀態。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.StoreConnection">
      <summary>提供基礎資料來源連接的存取 (<see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 物件會使用該連接)。</summary>
      <returns>資料來源連接的 <see cref="T:System.Data.Common.DbConnection" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder">
      <summary>類別，代表實體用戶端提供者的連接字串產生器</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.#ctor(System.String)">
      <summary>使用提供的連接字串初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 類別的新執行個體。</summary>
      <param name="connectionString">基礎資料來源的提供者特有連接字串。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Clear">
      <summary>清除 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 執行個體的內容。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.ContainsKey(System.String)">
      <summary>判斷 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 是否包含特定的索引鍵。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 包含具有指定索引鍵的項目，則傳回 true，否則傳回 false。</returns>
      <param name="keyword">要在 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 中找到的索引鍵。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.IsFixedSize">
      <summary>取得值，此值會指出 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 是否有固定的大小。</summary>
      <returns>在每種案例中都會傳回 true，因為 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 會提供固定大小的關鍵字/值組集合。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Item(System.String)">
      <summary>取得或設定與指定之索引鍵相關聯的值。在 C# 中，此屬性是索引子 (Indexer)。</summary>
      <returns>與指定之索引鍵關聯的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Keys">
      <summary>取得 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 中包含索引鍵的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 中包含索引鍵的 <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Metadata">
      <summary>取得或設定連接字串中的中繼資料位置。</summary>
      <returns>取得或設定連接字串中的中繼資料位置。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Name">
      <summary>取得或設定區段的名稱，如在組態檔中的定義。</summary>
      <returns>組態檔中區段的名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Provider">
      <summary>取得或設定連接字串中基礎 .NET Framework 資料提供者的名稱。</summary>
      <returns>基礎 .NET Framework 資料提供者的非變異名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.ProviderConnectionString">
      <summary>取得或設定內部的提供者特定連接字串。</summary>
      <returns>內部的提供者特定連接字串。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Remove(System.String)">
      <summary>從 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 執行個體移除具有指定之索引鍵的項目。</summary>
      <returns>如果索引鍵存在於連接字串中且遭到移除則傳回 true，如果索引鍵不存在則傳回 false。</returns>
      <param name="keyword">在此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 中要從連接字串移除的關鍵字/值組的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">keyword 是 null (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>從此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 擷取對應到所提供之索引鍵的值。</summary>
      <returns>如果在連接字串中找到 keyword，則傳回 true，否則傳回 false。</returns>
      <param name="keyword">要擷取之項目的索引鍵。</param>
      <param name="value">對應到 keyword 的值。</param>
      <exception cref="T:System.ArgumentNullException">keyword 包含 null 值 (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityDataReader">
      <summary>實體用戶端提供者的資料讀取器類別</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Close">
      <summary>關閉 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> 物件。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.DataRecordInfo">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.IExtendedDataRecord" /> 的 <see cref="T:System.Data.Entity.Core.Common.DataRecordInfo" />。</summary>
      <returns>資料記錄的資訊。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Depth">
      <summary>取得值，表示目前資料列的巢狀深度。</summary>
      <returns>目前資料列的巢狀深度。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Dispose(System.Boolean)">
      <summary>釋放此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> 所耗用的資源並呼叫 <see cref="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Close" />。</summary>
      <param name="disposing">true 表示同時釋放 Managed 和 Unmanaged 資源，false 表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.FieldCount">
      <summary>取得目前資料列中的資料行數目。</summary>
      <returns>目前資料列中的資料行數目。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetBoolean(System.Int32)">
      <summary>取得指定之資料行的值做為布林值 (Boolean)。</summary>
      <returns>指定的資料行值。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetByte(System.Int32)">
      <summary>取得指定資料行的值做為位元組。</summary>
      <returns>指定的資料行值。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>將位元組資料流從指定的資料行 (從 dataIndex 代表的位置開始) 讀取到緩衝區 (從 bufferIndex 代表的位置開始)。</summary>
      <returns>讀取的實際位元組數目。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <param name="dataOffset">要開始讀取作業之資料列中的來源索引。</param>
      <param name="buffer">要將資料複製到其中的目的緩衝區。</param>
      <param name="bufferOffset">要對其複製資料的緩衝區索引。</param>
      <param name="length">要讀取的最大字元數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetChar(System.Int32)">
      <summary>取得指定的資料行值做為單一字元。</summary>
      <returns>指定的資料行值。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>將字元資料流從指定的資料行 (從 dataIndex 代表的位置開始) 讀取到緩衝區 (從 bufferIndex 代表的位置開始)。</summary>
      <returns>讀取的實際字元數目。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
      <param name="dataOffset">要開始讀取作業之資料列中的來源索引。</param>
      <param name="buffer">要將資料複製到其中的目的緩衝區。</param>
      <param name="bufferOffset">要對其複製資料的緩衝區索引。</param>
      <param name="length">要讀取的最大字元數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataReader(System.Int32)">
      <summary>傳回巢狀讀取器做為 <see cref="T:System.Data.Common.DbDataReader" /> 物件。</summary>
      <returns>做為 <see cref="T:System.Data.Common.DbDataReader" /> 物件的巢狀讀取器。</returns>
      <param name="i">資料行的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataRecord(System.Int32)">
      <summary>傳回巢狀 <see cref="T:System.Data.Common.DbDataRecord" />。</summary>
      <returns>巢狀資料錄。</returns>
      <param name="i">要傳回的 DbDataRecord 數目。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataTypeName(System.Int32)">
      <summary>取得指定資料行的資料類型名稱。</summary>
      <returns>資料類型的名稱。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDateTime(System.Int32)">
      <summary>取得指定之資料行的值做為 <see cref="T:System.DateTime" /> 物件。</summary>
      <returns>指定的資料行值。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDbDataReader(System.Int32)">
      <summary>傳回所要求資料行序數的 <see cref="T:System.Data.Common.DbDataReader" /> 物件，可使用提供者特定的實作 (Implementation) 覆寫。</summary>
      <returns>資料讀取器。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDecimal(System.Int32)">
      <summary>取得指定之資料行的值做為 <see cref="T:System.Decimal" /> 物件。</summary>
      <returns>指定的資料行值。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDouble(System.Int32)">
      <summary>取得指定資料行的值做為雙精確度浮點數。</summary>
      <returns>指定的資料行值。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.IEnumerator" />，可用來逐一查看資料讀取器中的資料列。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用來逐一查看資料讀取器中的資料列。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetFieldType(System.Int32)">
      <summary>取得指定資料行的資料類型。</summary>
      <returns>指定資料行的資料類型。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetFloat(System.Int32)">
      <summary>取得指定資料行的值做為單精確度浮點數。</summary>
      <returns>指定的資料行值。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetGuid(System.Int32)">
      <summary>取得指定資料行的值做為全域唯一識別項 (GUID)。</summary>
      <returns>指定的資料行值。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt16(System.Int32)">
      <summary>取得指定資料行的值做為 16 位元帶正負號的整數 (Signed Integer)。</summary>
      <returns>指定的資料行值。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt32(System.Int32)">
      <summary>取得指定資料行的值做為 32 位元帶正負號的整數 (Signed Integer)。</summary>
      <returns>指定的資料行值。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt64(System.Int32)">
      <summary>取得指定資料行的值做為 64 位元帶正負號的整數 (Signed Integer)。</summary>
      <returns>指定的資料行值。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetName(System.Int32)">
      <summary>在已知以零為基底的資料行序數的情況下，取得資料行的名稱。</summary>
      <returns>指定資料行的名稱。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetOrdinal(System.String)">
      <summary>在已知資料行名稱的情況下，取得資料行序數。</summary>
      <returns>以零為基底的資料行序數。</returns>
      <param name="name">資料行名稱。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名稱不是有效的資料行名稱。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>傳回指定資料行的提供者特定的欄位類型 (Field Type)。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，描述指定之資料行的資料類型。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>取得所指定資料行的值，做為 <see cref="T:System.Object" /> 的執行個體。</summary>
      <returns>指定的資料行值。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>為目前的資料列在集合中取得所有提供者特定的屬性資料行。</summary>
      <returns>陣列中 <see cref="T:System.Object" /> 的執行個體數目。</returns>
      <param name="values">要複製屬性資料行的目的 <see cref="T:System.Object" /> 陣列。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetSchemaTable">
      <summary>傳回 <see cref="T:System.Data.DataTable" />，以描述 <see cref="T:System.Data.Common.DbDataReader" /> 的資料行中繼資料。</summary>
      <returns>描述資料行中繼資料的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetString(System.Int32)">
      <summary>取得所指定資料行的值，做為 <see cref="T:System.String" /> 的執行個體。</summary>
      <returns>指定的資料行值。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetValue(System.Int32)">
      <summary>取得所指定資料行的值，做為 <see cref="T:System.Object" /> 的執行個體。</summary>
      <returns>指定的資料行值。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetValues(System.Object[])">
      <summary>使用目前資料列的資料行值填入物件陣列。</summary>
      <returns>陣列中 <see cref="T:System.Object" /> 的執行個體數目。</returns>
      <param name="values">要複製屬性資料行的目的 <see cref="T:System.Object" /> 陣列。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.HasRows">
      <summary>取得表示此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> 是否包含一或多個資料列的值。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> 包含一個或多個資料列則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.IsClosed">
      <summary>取得值，表示 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> 是否關閉。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> 已關閉則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.IsDBNull(System.Int32)">
      <summary>取得值，此值表示資料行是否包含不存在或遺漏的值。</summary>
      <returns>如果指定的資料行等於 <see cref="T:System.DBNull" /> 則為 true，否則為 false。</returns>
      <param name="ordinal">以零為基底的資料行序數。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Item(System.Int32)">
      <summary>取得所指定資料行的值，做為 <see cref="T:System.Object" /> 的執行個體。</summary>
      <returns>指定的資料行值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Item(System.String)">
      <summary>取得所指定資料行的值，做為 <see cref="T:System.Object" /> 的執行個體。</summary>
      <returns>指定的資料行值。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.NextResult">
      <summary>在讀取陳述式批次的結果時，會將讀取器向前移到下一個結果。</summary>
      <returns>如果有多個結果集則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.NextResultAsync(System.Threading.CancellationToken)">
      <summary>在讀取陳述式批次時，以非同步方式將讀取器向前移到下一個結果集</summary>
      <returns>表示非同步作業的工作。如果有多個結果集，工作結果會包含 true，否則為 false。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Read">
      <summary>將讀取器向前移到結果集中的下一個資料錄。</summary>
      <returns>如果有多個資料列則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.ReadAsync(System.Threading.CancellationToken)">
      <summary>以非同步方式將讀取器移至目前結果集的下一個資料列</summary>
      <returns>表示非同步作業的工作。如果有多個資料列，工作結果會包含 true，否則為 false。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.RecordsAffected">
      <summary>取得因執行 SQL 陳述式所變更、插入或刪除的資料列數目。</summary>
      <returns>已變更、插入或刪除的資料列數。如果是 SELECT 陳述式會傳回 -1；如果沒有影響資料列或陳述式失敗，則傳回 0。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.VisibleFieldCount">
      <summary>取得 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> 中沒有隱藏的欄位數。</summary>
      <returns>沒有隱藏的欄位數。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityParameter">
      <summary>類別，表示用於 EntityCommand 的參數</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor">
      <summary>使用預設值，初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType)">
      <summary>使用指定的參數名稱和資料類型，初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 類別的新執行個體。</summary>
      <param name="parameterName">參數名稱。</param>
      <param name="dbType">其中一個 <see cref="T:System.Data.DbType" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
      <summary>使用指定的參數名稱、資料類型和大小，初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 類別的新執行個體。</summary>
      <param name="parameterName">參數名稱。</param>
      <param name="dbType">其中一個 <see cref="T:System.Data.DbType" /> 值。</param>
      <param name="size">參數的大小。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
      <summary>使用指定的屬性，初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 類別的新執行個體。</summary>
      <param name="parameterName">參數名稱。</param>
      <param name="dbType">其中一個 <see cref="T:System.Data.DbType" /> 值。</param>
      <param name="size">參數的大小。</param>
      <param name="direction">其中一個 <see cref="T:System.Data.ParameterDirection" /> 值。</param>
      <param name="isNullable">true 表示參數接受 null 值，否則為 false。</param>
      <param name="precision">用來代表值的位數。</param>
      <param name="scale">值所解析的小數點位數。</param>
      <param name="sourceColumn">來源資料行的名稱。</param>
      <param name="sourceVersion">其中一個 <see cref="T:System.Data.DataRowVersion" /> 值。</param>
      <param name="value">參數的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
      <summary>使用指定的屬性，初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 類別的新執行個體。</summary>
      <param name="parameterName">參數名稱。</param>
      <param name="dbType">其中一個 <see cref="T:System.Data.DbType" /> 值。</param>
      <param name="size">參數的大小。</param>
      <param name="sourceColumn">來源資料行的名稱。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.DbType">
      <summary>取得或設定參數的 <see cref="T:System.Data.DbType" />。</summary>
      <returns>其中一個 <see cref="T:System.Data.DbType" /> 值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Direction">
      <summary>取得或設定參數的方向。</summary>
      <returns>其中一個 <see cref="T:System.Data.ParameterDirection" /> 值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.EdmType">
      <summary>取得或設定以 EdmType 表示的參數類型。</summary>
      <returns>以 EdmType 表示的參數的類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.IsNullable">
      <summary>取得或設定值，此值指出該參數是否接受 null 值。</summary>
      <returns>如果接受 null 值則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.ParameterName">
      <summary>取得或設定實體參數的名稱。</summary>
      <returns>實體參數的名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Precision">
      <summary>取得或設定用來表示 <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" /> 屬性的位數。</summary>
      <returns>用來代表值的位數。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.ResetDbType">
      <summary>重設與 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 相關聯的類型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Scale">
      <summary>取得或設定 <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" /> 所解析的小數點位數。</summary>
      <returns>值所解析的小數點位數。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Size">
      <summary>取得或設定資料行中資料的最大大小。</summary>
      <returns>資料行中資料的最大大小。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceColumn">
      <summary>取得或設定來源資料行的名稱，此資料行對應至 <see cref="T:System.Data.DataSet" />，並用來載入或傳回 <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" />。</summary>
      <returns>來源資料行的名稱，此資料行對應至資料集，並用來載入或傳回值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceColumnNullMapping">
      <summary>取得或設定值，指出來源資料行是否可為 null。</summary>
      <returns>如果來源資料行可為 null 則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceVersion">
      <summary>取得或設定載入值時要使用的 <see cref="T:System.Data.DataRowVersion" />。</summary>
      <returns>其中一個 <see cref="T:System.Data.DataRowVersion" /> 值。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.ToString">
      <summary>傳回參數的字串表示。</summary>
      <returns>參數的字串表示。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value">
      <summary>取得或設定參數的值。</summary>
      <returns>參數的值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection">
      <summary>類別，表示用於 EntityCommand 的參數集合</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>將指定的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 物件加入至 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 物件。</returns>
      <param name="value">要加入至集合的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</param>
      <exception cref="T:System.ArgumentException">在 value 參數中指定的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 已加入至此或另一個 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />。</exception>
      <exception cref="T:System.InvalidCastException">傳遞的參數不是 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</exception>
      <exception cref="T:System.ArgumentNullException">value 參數為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.Object)">
      <summary>將指定的物件加入至 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />。</summary>
      <returns>新 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 物件的索引。</returns>
      <param name="value">
        <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType)">
      <summary>將 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 加入至 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> (已知參數名稱和資料類型)。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 物件。</returns>
      <param name="parameterName">參數名稱。</param>
      <param name="dbType">其中一個 <see cref="T:System.Data.DbType" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType,System.Int32)">
      <summary>將 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 加入至 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> (已知參數名稱、資料類型和資料行長度)。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 物件。</returns>
      <param name="parameterName">參數名稱。</param>
      <param name="dbType">其中一個 <see cref="T:System.Data.DbType" /> 值。</param>
      <param name="size">資料行長度。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddRange(System.Array)">
      <summary>將值陣列加入至 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 結尾。</summary>
      <param name="values">要加入的 <see cref="T:System.Array" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddRange(System.Data.Entity.Core.EntityClient.EntityParameter[])">
      <summary>將 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 值陣列加入至 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 結尾。</summary>
      <param name="values">要加入的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>將值加入至 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 結尾。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 物件。</returns>
      <param name="parameterName">參數名稱。</param>
      <param name="value">要加入的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Clear">
      <summary>從 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 移除所有的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 物件。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Contains(System.Object)">
      <summary>判斷指定的 <see cref="T:System.Object" /> 是否在此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 包含此值，則為 true，否則為 false。</returns>
      <param name="value">
        <see cref="T:System.Object" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Contains(System.String)">
      <summary>判斷指定的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 是否在此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 包含此值，則為 true，否則為 false。</returns>
      <param name="parameterName">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>將目前 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 的所有項目複製到指定的一維 <see cref="T:System.Array" />，從指定的目的 <see cref="T:System.Array" /> 索引開始。</summary>
      <param name="array">從目前的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 所複製項目目的地的一維 <see cref="T:System.Array" />。</param>
      <param name="index">32 位元的整數，表示 <see cref="T:System.Array" /> 中複製開始處的索引。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.CopyTo(System.Data.Entity.Core.EntityClient.EntityParameter[],System.Int32)">
      <summary>將目前 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 的所有項目複製到指定的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />，從指定的目的索引開始。</summary>
      <param name="array">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />，是從目前 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 所複製項目的目的地。</param>
      <param name="index">32 位元的整數，表示 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中複製開始處的索引。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Count">
      <summary>取得整數，其中包含 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中的項目數。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中的項目數，為整數。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.GetEnumerator">
      <summary>傳回逐一查看 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 的列舉值。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>取得集合中指定 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 的位置。</summary>
      <returns>指定的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 以零為基底的位置，此實體是集合中的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。當物件不存在於 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 時，傳回 -1。</returns>
      <param name="value">要尋找的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.Object)">
      <summary>取得集合中指定 <see cref="T:System.Object" /> 的位置。</summary>
      <returns>指定的 <see cref="T:System.Object" /> 以零為基底的位置，此實體是集合中的 <see cref="T:System.Object" />。當物件不存在於 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 時，傳回 -1。</returns>
      <param name="value">要尋找的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.String)">
      <summary>取得集合中具有指定名稱之指定 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 的位置。</summary>
      <returns>具有指定之區分大小寫名稱的指定 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 以零為基底的位置。當物件不存在於 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 時，傳回 -1。</returns>
      <param name="parameterName">要尋找之 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 的區分大小寫的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>將 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 物件插入 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 的指定索引處。</summary>
      <param name="index">要插入值的以零為基底之索引位置。</param>
      <param name="value">要插入至 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Object)">
      <summary>將 <see cref="T:System.Object" /> 插入 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中指定之索引處。</summary>
      <param name="index">要插入值的以零為基底之索引位置。</param>
      <param name="value">要插入至 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsFixedSize">
      <summary>取得值，此值會指出 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 是否有固定的大小。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 具有固定大小，則傳回 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsReadOnly">
      <summary>取得值，此值表示 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 為唯讀，則傳回 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsSynchronized">
      <summary>取得值，表示 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 是否同步處理。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 已同步處理，則傳回 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Item(System.Int32)">
      <summary>取得指定索引處的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</summary>
      <returns>位於指定索引上的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Item(System.String)">
      <summary>取得具有指定名稱的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</summary>
      <returns>具有指定名稱的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Remove(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>從集合移除指定的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</summary>
      <param name="value">要從集合移除的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 物件。</param>
      <exception cref="T:System.InvalidCastException">參數不是 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</exception>
      <exception cref="T:System.SystemException">參數不存在於集合中。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Remove(System.Object)">
      <summary>從集合移除指定的參數。</summary>
      <param name="value">要從集合移除的 <see cref="T:System.Object" /> 物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.RemoveAt(System.Int32)">
      <summary>從 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 的指定索引處移除 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</summary>
      <param name="index">要移除之 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 物件的以零為基底的索引。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.RemoveAt(System.String)">
      <summary>從 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 的指定參數名稱處移除 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</summary>
      <param name="parameterName">要移除的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 名稱。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.SyncRoot">
      <summary>取得可以用來同步處理對 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 之存取的物件。</summary>
      <returns>可以用來同步處理對 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 之存取的物件。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityProviderFactory">
      <summary>類別，表示實體用戶端提供者的提供者 Factory</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateCommand">
      <summary>傳回提供者類別的新執行個體，該執行個體會實作 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 類別。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 的新執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateCommandBuilder">
      <summary>擲回 <see cref="T:System.NotSupportedException" />。目前不支援此方法。</summary>
      <returns>目前不支援此方法。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateConnection">
      <summary>傳回提供者類別的新執行個體，該執行個體會實作 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 類別。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 的新執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateConnectionStringBuilder">
      <summary>傳回提供者類別的新執行個體，該執行個體會實作 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 類別。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 的新執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateDataAdapter">
      <summary>擲回 <see cref="T:System.NotSupportedException" />。目前不支援此方法。</summary>
      <returns>目前不支援此方法。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateParameter">
      <summary>傳回提供者類別的新執行個體，該執行個體會實作 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 類別。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 的新執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>擲回 <see cref="T:System.NotSupportedException" />。目前不支援此方法。</summary>
      <returns>目前不支援此方法。</returns>
      <param name="state">目前不支援此方法。</param>
    </member>
    <member name="F:System.Data.Entity.Core.EntityClient.EntityProviderFactory.Instance">
      <summary>實體用戶端提供者 Factory 物件的單一物件。這會保持為公用欄位 (非屬性)，因為 DbProviderFactory 會預期欄位。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.System#IServiceProvider#GetService(System.Type)">
      <summary>傳回要求的 <see cref="T:System.IServiceProvider" /> 類別。</summary>
      <returns>
        <see cref="T:System.IServiceProvider" /> 的新執行個體。支援的類型為 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />、<see cref="T:System.Data.Entity.Core.Common.DbCommandDefinitionBuilder" /> 和 <see cref="T:System.Data.IEntityAdapter" />。會針對每個其他類型傳回 null (在 Visual Basic 中則為 Nothing)。</returns>
      <param name="serviceType">要傳回的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityTransaction">
      <summary>類別，表示概念層的交易</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Commit">
      <summary>認可基礎交易。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.Connection">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> 的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />。</summary>
      <returns>基礎資料來源的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.DbConnection">
      <summary>擁有此交易物件的連接物件</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Dispose(System.Boolean)">
      <summary>清除此交易物件</summary>
      <param name="disposing">true 表示同時釋放 Managed 和 Unmanaged 資源，false 表示只釋放 Unmanaged 資源</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.IsolationLevel">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> 的隔離等級。</summary>
      <returns>
        <see cref="T:System.Data.IsolationLevel" /> 列舉值，此值表示基礎交易的隔離等級。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Rollback">
      <summary>回復基礎交易。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.StoreTransaction">
      <summary>取得基礎提供者交易的 DbTransaction。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationSetMapping">
      <summary>表示 CS 空間中 AssociationSet 的對應中繼資料。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationSet,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>初始化新的 AssociationSetMapping 執行個體。</summary>
      <param name="associationSet">要對應的關聯集。</param>
      <param name="storeEntitySet">要對應的存放區實體集。</param>
      <param name="containerMapping">父容器對應。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>加入屬性對應條件。</summary>
      <param name="condition">要加入的條件。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.AssociationSet">
      <summary>取得已對應的關聯集。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.AssociationTypeMapping">
      <summary>取得所包含的關聯類型對應。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.Conditions">
      <summary>取得屬性對應條件。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.ModificationFunctionMapping">
      <summary>取得或設定對應的函式對應。可以是 null。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>移除屬性對應條件。</summary>
      <param name="condition">要移除的屬性對應條件。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.SourceEndMapping">
      <summary>取得或設定來源端屬性對應。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.StoreEntitySet">
      <summary>取得已對應的存放區實體集。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.TargetEndMapping">
      <summary>取得或設定目標端屬性對應。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping">
      <summary>描述關聯集的修改函式對應。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationSet,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping)">
      <summary>初始化新的 <see cref="T:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping" /> 執行個體。</summary>
      <param name="associationSet">關聯集。</param>
      <param name="deleteFunctionMapping">刪除函式對應。</param>
      <param name="insertFunctionMapping">插入函式對應。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.AssociationSet">
      <summary>取得關聯集。</summary>
      <returns>關聯集。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.DeleteFunctionMapping">
      <summary>取得刪除函式對應。</summary>
      <returns>刪除函式對應。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.InsertFunctionMapping">
      <summary>取得插入函式對應。</summary>
      <returns>插入函式對應。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.ToString">
      <summary>將此執行個體的值轉換為其對應的字串表示。</summary>
      <returns>此執行個體值的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationTypeMapping">
      <summary>表示 CS 空間中關聯類型對應的對應中繼資料。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationTypeMapping.#ctor(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>建立 AssociationTypeMapping 執行個體。</summary>
      <param name="associationSetMapping">包含此 AssociationTypeMapping 的 AssociationSetMapping。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.AssociationSetMapping">
      <summary>取得包含此 AssociationTypeMapping 的 AssociationSetMapping。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.AssociationType">
      <summary>取得已對應的關聯類型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.MappingFragment">
      <summary>取得單一對應片段。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ComplexPropertyMapping">
      <summary>複雜屬性的對應中繼資料。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>建構新的複雜屬性對應物件</summary>
      <param name="property">表示此複雜成員的 MemberMetadata 物件</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.ComplexTypeMapping)">
      <summary>加入與巢狀複雜類型對應的類型對應。</summary>
      <param name="typeMapping">要加入的複雜類型對應。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.ComplexTypeMapping)">
      <summary>移除與巢狀複雜類型對應的類型對應。</summary>
      <param name="typeMapping">要移除的複雜類型對應。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.TypeMappings">
      <summary>取得與巢狀複雜類型對應之類型對應的唯讀集合。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ComplexTypeMapping">
      <summary>複雜類型的對應中繼資料。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>建立 ComplexTypeMapping 執行個體。</summary>
      <param name="complexType">要對應的 ComplexType。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>加入屬性對應條件。</summary>
      <param name="condition">要加入的屬性對應條件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>加入屬性對應。</summary>
      <param name="propertyMapping">要加入的屬性對應。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.ComplexType">
      <summary>取得要對應的 ComplexType。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.Conditions">
      <summary>取得屬性對應條件的唯讀集合。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.PropertyMappings">
      <summary>取得屬性對應的唯讀集合。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>移除屬性對應條件。</summary>
      <param name="condition">要移除的屬性對應條件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>移除屬性對應。</summary>
      <param name="propertyMapping">要移除的屬性對應。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ConditionPropertyMapping">
      <summary>類型上條件式屬性對應的對應中繼資料。條件式屬性對應會在 C 端屬性或 S 端屬性上指定條件。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ConditionPropertyMapping.Column">
      <summary>取得可指定已對應資料行的 EdmProperty。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ConditionPropertyMapping.Property">
      <summary>取得可指定已對應屬性的 EdmProperty。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EndPropertyMapping">
      <summary>關聯之 End 屬性的對應中繼資料。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationEndMember)">
      <summary>建立關聯端屬性對應。</summary>
      <param name="associationEnd">AssociationEndMember，可指定要對應的關聯端。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.ScalarPropertyMapping)">
      <summary>加入子屬性資料行對應。</summary>
      <param name="propertyMapping">ScalarPropertyMapping，可指定要加入的屬性資料行對應。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EndPropertyMapping.AssociationEnd">
      <summary>取得 AssociationEndMember，它可指定對應的關聯端。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EndPropertyMapping.PropertyMappings">
      <summary>取得 ScalarPropertyMapping 的 ReadOnlyCollection，前者可指定此關聯端屬性對應的子系。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.ScalarPropertyMapping)">
      <summary>移除子屬性資料行對應。</summary>
      <param name="propertyMapping">ScalarPropertyMapping，可指定要移除的屬性資料行對應。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityContainerMapping">
      <summary>表示 CS 空間中 EntityContainer 對應的對應中繼資料。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Core.Mapping.StorageMappingItemCollection,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.EntityContainerMapping" /> 類別的新執行個體。</summary>
      <param name="conceptualEntityContainer">要對應的概念性實體容器。</param>
      <param name="storeEntityContainer">要對應的存放區實體容器。</param>
      <param name="mappingItemCollection">父代對應項目集合。</param>
      <param name="generateUpdateViews">表示是否產生更新檢視的旗標。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddFunctionImportMapping(System.Data.Entity.Core.Mapping.FunctionImportMapping)">
      <summary>加入函式匯入對應。</summary>
      <param name="functionImportMapping">要加入的函式匯入對應。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddSetMapping(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>加入關聯集對應。</summary>
      <param name="setMapping">要加入的關聯集對應。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddSetMapping(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>加入實體集對應。</summary>
      <param name="setMapping">要加入的實體集對應。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.AssociationSetMappings">
      <summary>取得關聯集對應。</summary>
      <returns>關聯集對應。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.BuiltInTypeKind">
      <summary>取得此項目的類型種型。</summary>
      <returns>此項目的類型種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.ConceptualEntityContainer">
      <summary>取得概念性實體容器。</summary>
      <returns>概念實體容器。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.EntitySetMappings">
      <summary>取得實體集對應。</summary>
      <returns>實體集對應。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.FunctionImportMappings">
      <summary>取得函式匯入對應。</summary>
      <returns>函式匯入對應。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.GenerateUpdateViews">
      <summary>取得表示是否產生更新檢視的旗標。</summary>
      <returns>true 表示產生更新檢視，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.MappingItemCollection">
      <summary>取得父代對應項目集合。</summary>
      <returns>父代對應項目集合。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveFunctionImportMapping(System.Data.Entity.Core.Mapping.FunctionImportMapping)">
      <summary>移除函式匯入對應。</summary>
      <param name="functionImportMapping">要移除的函式匯入對應。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveSetMapping(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>移除關聯集對應。</summary>
      <param name="setMapping">要移除的關聯集對應。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveSetMapping(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>移除關聯集對應。</summary>
      <param name="setMapping">要移除的關聯集對應。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.StoreEntityContainer">
      <summary>取得存放區實體容器。</summary>
      <returns>存放區實體容器。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntitySetBaseMapping">
      <summary>表示 CS 空間中 Extent 的對應中繼資料。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetBaseMapping.ContainerMapping">
      <summary>取得父容器對應。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetBaseMapping.QueryView">
      <summary>取得或設定與此對應相關聯的查詢檢視。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntitySetMapping">
      <summary>表示 CS 空間中 EnitytSet 的對應中繼資料。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>初始化新的 EntitySetMapping 執行個體。</summary>
      <param name="entitySet">要對應的實體集。</param>
      <param name="containerMapping">父容器對應。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.AddModificationFunctionMapping(System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping)">
      <summary>加入函式對應。</summary>
      <param name="modificationFunctionMapping">要加入的函式對應。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.EntityTypeMapping)">
      <summary>加入類型對應。</summary>
      <param name="typeMapping">要加入的類型對應。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.EntitySet">
      <summary>取得已對應的實體集。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.EntityTypeMappings">
      <summary>取得所包含的實體類型對應。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.ModificationFunctionMappings">
      <summary>取得對應的函式對應。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.RemoveModificationFunctionMapping(System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping)">
      <summary>移除函式對應。</summary>
      <param name="modificationFunctionMapping">要移除的函式對應。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.EntityTypeMapping)">
      <summary>移除類型對應。</summary>
      <param name="typeMapping">要移除入的類型對應。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityTypeMapping">
      <summary>對應實體類型的中繼資料。若 EntitySet 表示多種類型的實體，則 EntitySet 會有多個 EntityTypeMapping (例如，若 PersonSet 實體範圍表示 Person 和 Customer 類型的實體，則在 PersonSet 的對應下，會有兩個 EntityType 對應)。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.#ctor(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>建立 EntityTypeMapping 執行個體。</summary>
      <param name="entitySetMapping">包含此 EntityTypeMapping 的 EntitySetMapping。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddFragment(System.Data.Entity.Core.Mapping.MappingFragment)">
      <summary>加入對應片段。</summary>
      <param name="fragment">要加入的對應片段。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddIsOfType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>將實體類型階層架構加入至對應。此階層架構是由指定的根實體類型表示。</summary>
      <param name="type">要加入之階層架構的根 EntityType。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>將實體類型加入至對應。</summary>
      <param name="type">要加入的 EntityType。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntitySetMapping">
      <summary>取得包含此 EntityTypeMapping 的 EntitySetMapping。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntityType">
      <summary>取得已對應的單一 EntityType。在階層架構類型對應的情況下擲回例外狀況。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntityTypes">
      <summary>取得對應的實體類型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.Fragments">
      <summary>取得對應片段的唯讀集合。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.IsHierarchyMapping">
      <summary>取得旗標，此旗標表示這是否為類型階層架構對應。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.IsOfEntityTypes">
      <summary>取得階層架構對應的已對應基底類型。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveFragment(System.Data.Entity.Core.Mapping.MappingFragment)">
      <summary>移除對應片段。</summary>
      <param name="fragment">要移除的對應片段。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveIsOfType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>從對應移除實體類型階層架構。此階層架構是由指定的根實體類型表示。</summary>
      <param name="type">要移除之階層架構的根 EntityType。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>從對應移除實體類型。</summary>
      <param name="type">要移除的 EntityType。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping">
      <summary>描述實體集內實體類型的修改函式對應。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping" /> 類別的新執行個體。</summary>
      <param name="entityType">EDM 實體類型。</param>
      <param name="deleteFunctionMapping">刪除函式的對應。</param>
      <param name="insertFunctionMapping">插入函式的對應。</param>
      <param name="updateFunctionMapping">更新函式的對應。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.DeleteFunctionMapping">
      <summary>取得刪除函式的對應。</summary>
      <returns>刪除函式的對應。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.EntityType">
      <summary>取得 EDM 實體類型。</summary>
      <returns>EDM 實體類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.InsertFunctionMapping">
      <summary>取得插入函式的對應。</summary>
      <returns>插入函式的對應。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.ToString">
      <summary>傳回 <see cref="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping" /> 物件的字串表示。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping" /> 物件的字串表示。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.UpdateFunctionMapping">
      <summary>取得更新函式的對應。</summary>
      <returns>更新函式的對應。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityViewContainer">
      <summary>在設計階段建立以儲存所產生檢視之類型的基底類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewContainer.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.EntityViewContainer" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.EdmEntityContainerName">
      <summary>取得或設定 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 的名稱。</summary>
      <returns>容器名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewContainer.GetViewAt(System.Int32)">
      <summary>傳回位於指定索引位置的索引鍵/值組，其中包含檢視及其索引鍵。</summary>
      <returns>位於索引位置的索引鍵/值組，其中包含檢視及其索引鍵。</returns>
      <param name="index">檢視的索引。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.HashOverAllExtentViews">
      <summary>檢視的雜湊值。</summary>
      <returns>雜湊值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.HashOverMappingClosure">
      <summary>雜湊值。</summary>
      <returns>雜湊值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.StoreEntityContainerName">
      <summary>在儲存結構描述內取得或設定 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />。</summary>
      <returns>容器名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.ViewCount">
      <summary>取得或設定檢視計數。</summary>
      <returns>檢視計數。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute">
      <summary>標記包含所產生檢視類型之組件的屬性。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute" /> 類別的新執行個體。</summary>
      <param name="viewGenerationType">檢視的類型。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute.ViewGenerationType">
      <summary>取得檢視的 T:System.Type。</summary>
      <returns>檢視的 T:System.Type。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping">
      <summary>表示函式匯入結果的複雜類型對應。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Collections.ObjectModel.Collection{System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping})">
      <summary>初始化新的 FunctionImportComplexTypeMapping 執行個體。</summary>
      <param name="returnType">傳回類型。</param>
      <param name="properties">函式匯入之結果類型的屬性對應。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping.ReturnType">
      <summary>取得傳回類型。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping">
      <summary>表示函式匯入實體類型對應。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntityType},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntityType},System.Collections.ObjectModel.Collection{System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition})">
      <summary>初始化新的 FunctionImportEntityTypeMapping 執行個體。</summary>
      <param name="isOfTypeEntityTypes">位於要對應之類型階層架構基底的實體類型。</param>
      <param name="entityTypes">要對應的實體類型。</param>
      <param name="properties">函式匯入之結果類型的屬性對應。</param>
      <param name="conditions">對應條件。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.Conditions">
      <summary>取得對應條件。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.EntityTypes">
      <summary>取得要對應的實體類型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.IsOfTypeEntityTypes">
      <summary>取得位於要對應之型階層架構基底的實體類型。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition">
      <summary>表示函式匯入結果的對應條件。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition.ColumnName">
      <summary>取得用來評估條件的資料行名稱。</summary>
      <returns>用來評估條件的資料行名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition.ToString">
      <summary>將目前執行個體的值轉換為其對應的字串表示。</summary>
      <returns>目前執行個體的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull">
      <summary>表示函式匯入之結果的對應條件，而此函式匯入是藉由檢查空白值或非空白值來評估。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull.#ctor(System.String,System.Boolean)">
      <summary>初始化新的 FunctionImportEntityTypeMappingConditionIsNull 執行個體。</summary>
      <param name="columnName">用來評估條件的資料行名稱。</param>
      <param name="isNull">表示是否執行空白值或非空白值檢查的旗標。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull.IsNull">
      <summary>取得旗標，此旗標表示是否執行空白值或非空白值檢查。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue">
      <summary>表示函式匯入之結果的對應條件，而此函式匯入是與指定值進行比較來評估。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue.#ctor(System.String,System.Object)">
      <summary>初始化新的 FunctionImportEntityTypeMappingConditionValue 執行個體。</summary>
      <param name="columnName">用來評估條件的資料行名稱。</param>
      <param name="value">做為比較對象的值。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue.Value">
      <summary>取得用於比較的值。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMapping">
      <summary>表示從模型函式匯入至存放區可組合或不可組合函式的對應。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMapping.FunctionImport">
      <summary>取得模型函式 (或對應來源)</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMapping.TargetFunction">
      <summary>取得存放區函式 (或對應目標)</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable">
      <summary>表示從模型函式匯入至存放區可組合函式的對應。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Mapping.FunctionImportResultMapping,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>初始化新的 FunctionImportMappingComposable 執行個體。</summary>
      <param name="functionImport">模型函式匯入。</param>
      <param name="targetFunction">存放區可組合函式。</param>
      <param name="resultMapping">函式匯入的結果對應。</param>
      <param name="containerMapping">父容器對應。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable.ResultMapping">
      <summary>取得函式匯入的結果對應。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable">
      <summary>表示從模型函式匯入至存放區不可組合函式的對應。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.FunctionImportResultMapping},System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>初始化新的 FunctionImportMappingNonComposable 執行個體。</summary>
      <param name="functionImport">模型函式匯入。</param>
      <param name="targetFunction">存放區不可組合函式。</param>
      <param name="resultMappings">函式匯入結果對應。</param>
      <param name="containerMapping">父容器對應。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable.ResultMappings">
      <summary>取得函式匯入結果對應。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportResultMapping">
      <summary>表示函式匯入的結果對應。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.FunctionImportResultMapping" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping)">
      <summary>加入類型對應。</summary>
      <param name="typeMapping">要加入的類型對應。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping)">
      <summary>移除類型對應。</summary>
      <param name="typeMapping">要移除入的類型對應。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.TypeMappings">
      <summary>取得類型對應。</summary>
      <returns>類型對應。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping">
      <summary>函式匯入傳回類型之對應屬性的基底類別。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping">
      <summary>將函式匯入傳回類型屬性對應至資料表資料行。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.#ctor(System.String,System.String)">
      <summary>初始化新的 FunctionImportReturnTypeScalarPropertyMapping 執行個體。</summary>
      <param name="propertyName">對應的屬性名稱。</param>
      <param name="columnName">對應的資料行名稱。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.ColumnName">
      <summary>取得對應的資料行名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.PropertyName">
      <summary>取得對應的屬性名稱。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping">
      <summary>指定函式匯入結構類型對應。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping.PropertyMappings">
      <summary>取得函式匯入之結果類型的屬性對應。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.IsNullConditionMapping">
      <summary>指定藉由檢查屬性/資料行的值是空白值還是非空白值來評估的對應條件。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.IsNullConditionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Boolean)">
      <summary>建立 IsNullConditionMapping 執行個體。</summary>
      <param name="propertyOrColumn">EdmProperty，可以指定屬性或資料行。</param>
      <param name="isNull">表示是否執行空白值或非空白值檢查的布林值。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.IsNullConditionMapping.IsNull">
      <summary>取得布林值，此布林值可指定條件是否藉由執行空白值或非空白值檢查來評估。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingBase">
      <summary>表示所有對應中繼資料的基底項目類別</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingFragment">
      <summary>表示對應片段的中繼資料。一組對應片段會組成集合對應 (EntitySet、AssociationSet 或 CompositionSet)，而每個 MappingFragment 都會為對應至單一資料表之類型的這些屬性提供對應。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.TypeMapping,System.Boolean)">
      <summary>建立 MappingFragment 執行個體。</summary>
      <param name="storeEntitySet">與要對應之檢視或資料表對應的 EntitySet。</param>
      <param name="typeMapping">包含此 MappingFragment 的 TypeMapping。</param>
      <param name="makeColumnsDistinct">表示產生查詢時是否要包含 'DISTINCT' 的旗標。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>加入屬性對應條件。</summary>
      <param name="condition">要加入的屬性對應條件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>加入屬性對應。</summary>
      <param name="propertyMapping">要加入的屬性對應。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.Conditions">
      <summary>取得屬性對應條件的唯讀集合。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.MakeColumnsDistinct">
      <summary>取得旗標，此旗標表示產生查詢時是否要包含 'DISTINCT'。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.PropertyMappings">
      <summary>取得屬性對應的唯讀集合。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>移除屬性對應條件。</summary>
      <param name="condition">要移除的屬性對應條件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>移除屬性對應。</summary>
      <param name="propertyMapping">要移除的屬性對應。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.StoreEntitySet">
      <summary>取得與要對應之檢視或資料表對應的 EntitySet。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.TypeMapping">
      <summary>取得包含此 MappingFragment 的 TypeMapping。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingItem">
      <summary>表示對應空間 (DataSpace.CSSpace) 中項目的基底類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingItem.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.MappingItem" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingItemCollection">
      <summary>表示 Edm 空間中對應項目集合的類別。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionMapping">
      <summary>描述用於處理實體或關聯之變更的修改函式繫結。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding},System.Data.Entity.Core.Metadata.Edm.FunctionParameter,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding})">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionMapping" /> 類別的新執行個體。</summary>
      <param name="entitySet">實體或關聯集。</param>
      <param name="entityType">實體或關聯類型。</param>
      <param name="function">我們應該繫結之函式的中繼資料。</param>
      <param name="parameterBindings">函式參數的繫結。</param>
      <param name="rowsAffectedParameter">產生受影響之資料列數目的輸出參數。</param>
      <param name="resultBindings">函式評估之結果的繫結</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.Function">
      <summary>取得我們應該繫結之函式的中繼資料。</summary>
      <returns>我們應該繫結之函式的中繼資料。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ParameterBindings">
      <summary>取得函式參數的繫結。</summary>
      <returns>函式參數的繫結。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ResultBindings">
      <summary>取得函式評估之結果的繫結。</summary>
      <returns>函式評估之結果的繫結。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.RowsAffectedParameter">
      <summary>取得產生受影響之資料列數目的輸出參數。可能是空白值。</summary>
      <returns>產生受影響之資料列數目的輸出參數。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ToString">
      <summary>將此執行個體的值轉換為其對應的字串表示。</summary>
      <returns>此執行個體的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath">
      <summary>描述在實體或關聯類型結構內的成員位置。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Data.Entity.Core.Metadata.Edm.AssociationSet)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath" /> 類別的新執行個體。</summary>
      <param name="members">路徑中從結構的分葉 (已繫結的成員) 到根的成員。</param>
      <param name="associationSet">我們要透過此成員導覽的關聯集。如果是空白值，表示這並非導覽成員路徑。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.AssociationSetEnd">
      <summary>取得我們要透過此成員導覽的關聯集。如果是空白值，表示這並非導覽成員路徑。</summary>
      <returns>我們要透過此成員導覽的關聯集。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.Members">
      <summary>取得路徑中從結構的分葉 (已繫結的成員) 到根的成員。</summary>
      <returns>路徑中從結構的分葉 (已繫結的成員) 到根的成員。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.ToString">
      <summary>將此執行個體的值轉換為其對應的字串表示。</summary>
      <returns>此執行個體值的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding">
      <summary>表示修改函式參數與要修改之實體或關聯成員的繫結。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.#ctor(System.Data.Entity.Core.Metadata.Edm.FunctionParameter,System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding" /> 類別的新執行個體。</summary>
      <param name="parameter">採用值的參數。</param>
      <param name="memberPath">定義值之實體或關聯成員的路徑。</param>
      <param name="isCurrent">true 表示已繫結目前或原始成員的值，否則為 false。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.IsCurrent">
      <summary>取得旗標，此旗標表示繫結的是目前還是原始成員值。</summary>
      <returns>若已繫結目前或原始成員的值，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.MemberPath">
      <summary>取得定義值之實體或關聯成員的路徑。</summary>
      <returns>定義值之實體或關聯成員的路徑。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.Parameter">
      <summary>取得採用值的參數。</summary>
      <returns>採用值的參數。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.ToString">
      <summary>使用指定的格式，將此執行個體的值轉換為其對應的字串表示。</summary>
      <returns>此執行個體值的字串表示 (使用指定的格式)。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding">
      <summary>定義從具名結果集資料行至採用值之成員的繫結。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.#ctor(System.String,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding" /> 類別的新執行個體。</summary>
      <param name="columnName">要從函式結果集繫結的資料行名稱。</param>
      <param name="property">要針對實體設定的屬性。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.ColumnName">
      <summary>取得要從函式結果集繫結的資料行名稱。</summary>
      <returns>要從函式結果集繫結的資料行名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.Property">
      <summary>取得要針對實體設定的屬性。</summary>
      <returns>要針對實體設定的屬性。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.ToString">
      <summary>將此執行個體的值轉換為其對應的字串表示。</summary>
      <returns>此執行個體值的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.PropertyMapping">
      <summary>所有屬性對應類型的對應中繼資料。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.PropertyMapping.Property">
      <summary>取得可指定已對應屬性的 EdmProperty。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ScalarPropertyMapping">
      <summary>純量屬性的對應中繼資料。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ScalarPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>在簡單屬性和資料行之間建立對應。</summary>
      <param name="property">要對應的屬性。</param>
      <param name="column">要對應的資料行。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ScalarPropertyMapping.Column">
      <summary>取得可指定已對應資料行的 EdmProperty。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection">
      <summary>表示儲存對應 (CS 對應) 空間中的項目集合。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>使用指定的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />、<see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 和 XML 讀取器，初始化 <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> 類別的新執行個體。</summary>
      <param name="edmCollection">此對應所要使用的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />。</param>
      <param name="storeCollection">此對應所要使用的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />。</param>
      <param name="xmlReaders">此對應所要使用的 XML 讀取器。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.String[])">
      <summary>使用指定的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />、<see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 和表示中繼資料檔案路徑的字串集合，初始化 <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> 類別的新執行個體。</summary>
      <param name="edmCollection">此對應所要使用的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />。</param>
      <param name="storeCollection">此對應所要使用的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />。</param>
      <param name="filePaths">此對應要使用的檔案路徑。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.ComputeMappingHashValue">
      <summary>計算集合中單一容器對應的雜湊值。</summary>
      <returns>字串，指定計算的雜湊值。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.ComputeMappingHashValue(System.String,System.String)">
      <summary>計算對應容器的名稱所指定之容器對應的雜湊值。</summary>
      <returns>字串，指定計算的雜湊值。</returns>
      <param name="conceptualModelContainerName">概念模型中的容器名稱。</param>
      <param name="storeModelContainerName">存放區模型中的容器名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.Create(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" />。</summary>
      <returns>如果沒有發生錯誤，則為 <see cref="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.EdmItemCollection" /> 執行個體。否則為 null。</returns>
      <param name="edmItemCollection">要對應的 EDM 中繼資料集合。不得為 null。</param>
      <param name="storeItemCollection">要對應的存放區中繼資料集合。不得為 null。</param>
      <param name="xmlReaders">要載入的 MSL 成品。不得為 null。</param>
      <param name="filePaths">MSL 成品的路徑。於錯誤訊息中使用。可為 null；在此情況下，將會使用 XmlReader 的基底 URI 為路徑。</param>
      <param name="errors">載入時所發生錯誤的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.GenerateViews(System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError})">
      <summary>為集合中的單一容器對應建立 (範圍、產生的檢視) 的字典。</summary>
      <returns>指定產生之檢視的 (<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />、<see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />) 的字典。</returns>
      <param name="errors">累積潛在錯誤的清單。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.GenerateViews(System.String,System.String,System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError})">
      <summary>為對應容器的名稱所指定之容器對應建立 (範圍、產生的檢視) 的字典。</summary>
      <returns>指定產生之檢視的 (<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />、<see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />) 的字典。</returns>
      <param name="conceptualModelContainerName">概念模型中的容器名稱。</param>
      <param name="storeModelContainerName">存放區模型中的容器名稱。</param>
      <param name="errors">累積潛在錯誤的清單。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.MappingVersion">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> 表示的版本。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> 表示的版本。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.MappingViewCacheFactory">
      <summary>取得或設定 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory" />，以建立 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> 執行個體用來擷取預先產生的對應檢視。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory" />，可用於建立用來擷取預先產生之對應檢視的 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> 執行個體。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.StructuralTypeMapping">
      <summary>指定結構類型對應。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.StructuralTypeMapping" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>加入屬性對應條件。</summary>
      <param name="condition">要加入的屬性對應條件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>加入屬性對應。</summary>
      <param name="propertyMapping">要加入的屬性對應。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StructuralTypeMapping.Conditions">
      <summary>取得屬性對應條件的唯讀集合。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StructuralTypeMapping.PropertyMappings">
      <summary>取得屬性對應的唯讀集合。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>移除屬性對應條件。</summary>
      <param name="condition">要移除的屬性對應條件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>移除屬性對應。</summary>
      <param name="propertyMapping">要移除的屬性對應。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.TypeMapping">
      <summary>表示 CS 空間中類型對應的對應中繼資料。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ValueConditionMapping">
      <summary>指定與具有指定值的屬性或資料行的值進行比較來評估的對應條件。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ValueConditionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Object)">
      <summary>建立 ValueConditionMapping 執行個體。</summary>
      <param name="propertyOrColumn">EdmProperty，可以指定屬性或資料行。</param>
      <param name="value">物件，此物件可指定要做為比較對象的值。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ValueConditionMapping.Value">
      <summary>取得物件，此物件可指定要做為檢查對象的值。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember">
      <summary>表示關聯類型的 End</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" /> 的內建類型種類。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember.Create(System.String,System.Data.Entity.Core.Metadata.Edm.RefType,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Data.Entity.Core.Metadata.Edm.OperationAction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>建立唯讀的 AssociationEndMember 執行個體。</summary>
      <returns>新建立的 AssociationEndMember 執行個體。</returns>
      <param name="name">關聯 End 成員的名稱。</param>
      <param name="endRefType">End 的參考類型。</param>
      <param name="multiplicity">End 的多重性。</param>
      <param name="deleteAction">旗標，表示 End 的刪除行為。</param>
      <param name="metadataProperties">要與執行個體產生關聯的中繼資料屬性。</param>
      <exception cref="T:System.ArgumentException">指定的名稱是 null 或空白。</exception>
      <exception cref="T:System.ArgumentNullException">指定的參考類型為 null。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet">
      <summary>表示關聯集的類別</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.AssociationSetEnds">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> 的結尾。</summary>
      <returns>類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 的集合，其中包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> 的結尾。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> 的內建類型種類。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationSet.Create(System.String,System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>從指定的參數建立唯讀 AssociationSet 執行個體。</summary>
      <returns>新建立的 AssociationSet 執行個體。</returns>
      <param name="name">關聯集的名稱。</param>
      <param name="type">關聯集中元素的關聯類型。</param>
      <param name="sourceSet">來源關聯集端點的實體集。</param>
      <param name="targetSet">目標關聯集端點的實體集。</param>
      <param name="metadataProperties">要與執行個體產生關聯的中繼資料屬性。</param>
      <exception cref="T:System.ArgumentException">指定的名稱是 null 或空白。</exception>
      <exception cref="T:System.ArgumentNullException">指定的關聯類型為 null。</exception>
      <exception cref="T:System.ArgumentException">所指定關聯類型的其中一個端點的實體類型，不符合對應實體集端點的實體類型。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.ElementType">
      <summary>取得與此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> 相關的關聯。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> 相關的關聯。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd">
      <summary>表示 AssociationSet End 的類別</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 的內建類型種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.CorrespondingAssociationEndMember">
      <summary>取得 End 成員，此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 物件會對應至此成員。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 物件所對應至的 End 成員。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.EntitySet">
      <summary>取得此 End 角色所參考的實體集。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 物件，表示此 End 角色所參考的實體集。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.Name">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 的 End 角色名稱。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 的 End 名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.ParentAssociationSet">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 的父關聯集。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 的父關聯集。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.Role">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 的 End 角色名稱。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 的 End 角色名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.ToString">
      <summary>傳回此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 的 End 角色名稱。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 的 End 角色名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationType">
      <summary>描述概念模型中兩個實體之間的關聯/關聯性，或是存放區模型中兩個資料表之間的外部索引鍵關聯性。在概念模型中，相依類別不盡然會定義外部索引鍵屬性。若有定義外部索引鍵，則 <see cref="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.IsForeignKey" /> 屬性將為 true 且 <see cref="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.Constraint" /> 屬性會包含外部索引鍵的詳細資料。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.AssociationEndMembers">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> 的端點清單。</summary>
      <returns>類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 的集合，其中包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> 的端點清單。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> 的內建類型種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.Constraint">
      <summary>取得或設定參考條件約束。</summary>
      <returns>參考條件約束。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationType.Create(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>從指定的參數建立唯讀 AssociationType 執行個體。</summary>
      <returns>新建立的 AssociationType 執行個體。</returns>
      <param name="name">關聯類型的名稱。</param>
      <param name="namespaceName">關聯類型的命名空間。</param>
      <param name="foreignKey">表示外部索引鍵 (FK) 關聯性的旗標。</param>
      <param name="dataSpace">關聯類型的資料空間。</param>
      <param name="sourceEnd">來源關聯 End 成員。</param>
      <param name="targetEnd">目標關聯 End 成員。</param>
      <param name="constraint">參考條件約束。</param>
      <param name="metadataProperties">要與執行個體產生關聯的中繼資料屬性。</param>
      <exception cref="T:System.ArgumentException">指定的名稱是 null 或空白。</exception>
      <exception cref="T:System.ArgumentException">指定的命名空間為 null 或空白。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.IsForeignKey">
      <summary>取得 Boolean 屬性值，此屬性值會指定資料行是否為外部索引鍵。</summary>
      <returns>Boolean 值，指定資料行是否為外部索引鍵。如果資料行是外部索引鍵則為 true，如果資料行不是外部索引鍵，則為 false (預設值)。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.ReferentialConstraints">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> 的條件約束 (Constraint) 清單。</summary>
      <returns>類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 的集合，其中包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> 的條件約束清單。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind">
      <summary>所有內建類型的清單</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationEndMember">
      <summary>Association 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationSet">
      <summary>AssociationSet 類型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationSetEnd">
      <summary>AssociationSetEnd 類型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationType">
      <summary>Association 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.CollectionKind">
      <summary>集合類型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.CollectionType">
      <summary>集合類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ComplexType">
      <summary>複雜類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.Documentation">
      <summary>文件類型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmFunction">
      <summary>EdmFunction 類型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmMember">
      <summary>EdmMember 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmProperty">
      <summary>EdmProperty 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmType">
      <summary>Edm 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityContainer">
      <summary>實體容器類型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntitySet">
      <summary>實體集類型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntitySetBase">
      <summary>EntitySetBase 類型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityType">
      <summary>實體類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityTypeBase">
      <summary>實體類型基底類型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EnumMember">
      <summary>列舉成員類型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EnumType">
      <summary>列舉類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.Facet">
      <summary>Facet 類型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.FunctionParameter">
      <summary>函式參數類型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.GlobalItem">
      <summary>全域項目類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.MetadataItem">
      <summary>中繼資料項目類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.MetadataProperty">
      <summary>中繼資料屬性類型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.NavigationProperty">
      <summary>導覽屬性類型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.OperationAction">
      <summary>DeleteAction 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ParameterMode">
      <summary>參數模式類型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.PrimitiveType">
      <summary>基本類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.PrimitiveTypeKind">
      <summary>基本類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ProviderManifest">
      <summary>ProviderManifest 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ReferentialConstraint">
      <summary>參考限制式類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RefType">
      <summary>Ref 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipEndMember">
      <summary>RelationshipEnd 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipMultiplicity">
      <summary>關聯性多重性類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipSet">
      <summary>關聯性集合類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipType">
      <summary>關聯性類型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RowType">
      <summary>資料列類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.SimpleType">
      <summary>簡單類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.StructuralType">
      <summary>結構化類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.TypeUsage">
      <summary>類型資訊類型</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CollectionKind">
      <summary>集合的類型 (適用於屬性)</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.Bag">
      <summary>集合採用 Bag 語意 (未排序，可接受重複)</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.List">
      <summary>集合採用 List 語意 (順序為決定性，可接受重複)</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.None">
      <summary>屬性並非集合</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CollectionType">
      <summary>表示 Edm 集合類型</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.CollectionType.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> 的內建類型種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.CollectionType.TypeUsage">
      <summary>取得 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 類別 (Class) 的執行個體，此執行個體包含此目前的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> 物件所包含的項目類型以及該類型的 Facet。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 類別的執行個體，此執行個體包含此目前的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> 物件所包含的項目類型以及該類型的 Facet。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ComplexType">
      <summary>表示 Edm 複雜類型。這可用於根據概念空間以模型為基礎的慣例設定複雜類型。存放區模型不支援複雜類型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ComplexType.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> 的內建類型種類。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ComplexType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> 類型的新執行個體。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> 類型的新執行個體。</returns>
      <param name="name">複雜類型的名稱。</param>
      <param name="namespaceName">複雜類型的命名空間。</param>
      <param name="dataSpace">複雜類型所屬的資料空間。</param>
      <param name="members">複雜類型的成員。</param>
      <param name="metadataProperties">要與執行個體產生關聯的中繼資料屬性。</param>
      <exception cref="T:System.ArgumentNullException">如果 name、namespace 或 members 引數為 null 則擲回。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ComplexType.Properties">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> 的屬性清單。</summary>
      <returns>類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 的集合，其中包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> 的屬性清單。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode">
      <summary>屬性的並行模式。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode.Fixed">
      <summary>固定並行模式：一律在寫入時驗證屬性</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode.None">
      <summary>預設並行模式：一律不在寫入時驗證屬性</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer">
      <summary>將符合單一 CSDL 結構描述檔案限制的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> 序列化至 XML 寫入器。要序列化的模型必須包含單一 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer" /> 類別的新執行個體。</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.OnError">
      <summary>在序列化模型遇到錯誤時發生。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Xml.XmlWriter,System.String)">
      <summary>將 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> 序列化至 XmlWriter。</summary>
      <returns>若模型有效，則為 true，否則為 false。</returns>
      <param name="model">要序列化的 EdmModel。</param>
      <param name="xmlWriter">序列化的目標 XmlWriter。</param>
      <param name="modelNamespace">已序列化模型的命名空間。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs">
      <summary>表示處理 Entity Framework 模型時發生的錯誤資訊。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.ErrorMessage">
      <summary>取得選用描述性訊息，描述引發的錯誤。</summary>
      <returns>選用描述性訊息，描述引發的錯誤。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.Item">
      <summary>取得值，指出造成引發事件的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem" />。</summary>
      <returns>若由 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem" /> 造成引發事件，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.PropertyName">
      <summary>取得選用值，指出是來源項目中造成引發事件的屬性。</summary>
      <returns>選用值，指出來源項目中造成引發事件的屬性。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DataSpace">
      <summary>DataSpace</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSpace">
      <summary>CSpace 表示 CSpace 中的項目 - edm 基本類型 + csdl 中定義的類型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSSpace">
      <summary>CSpace 和 SSpace 之間的對應</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.OCSpace">
      <summary>OSpace 和 CSpace 之間的對應</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.OSpace">
      <summary>OSpace 表示 clr 空間中的項目</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.SSpace">
      <summary>SSpace 表示 SSpace 中的項目</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> 的擴充方法。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetConceptualModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)">
      <summary>從指定的 DbModel 取得概念模型。</summary>
      <returns>表示概念模型之 EdmModel 的執行個體。</returns>
      <param name="model">可實作 IEdmModelAdapter (例如 DbModel) 之類別的執行個體。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetStoreModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)">
      <summary>從指定的 DbModel 取得存放區模型。</summary>
      <returns>表示存放區模型之 EdmModel 的執行個體。</returns>
      <param name="model">可實作 IEdmModelAdapter (例如 DbModel) 之類別的執行個體。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.Documentation">
      <summary>表示與項目相關聯之文件的類別</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Documentation.#ctor(System.String,System.String)">
      <summary>初始化新的 Documentation 執行個體。</summary>
      <param name="summary">摘要字串。</param>
      <param name="longDescription">詳細的描述字串。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 的內建類型種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.IsEmpty">
      <summary>取得值，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 物件是否僅包含 null 或是空白的 <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary" /> 和 <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Longdescription" />。</summary>
      <returns>如果此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 物件僅包含 null 或是空白的 <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary" /> 和 <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.LongDescription" /> 則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.LongDescription">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 的完整描述。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 的完整描述。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 的摘要。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 的摘要。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Documentation.ToString">
      <summary>傳回此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 的摘要。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 的摘要。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmError">
      <summary>此類別會封裝一般 EDM 錯誤的錯誤資訊。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmError.Message">
      <summary>取得錯誤訊息。</summary>
      <returns>錯誤訊息。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction">
      <summary>表示函式的類別</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunction.AddParameter(System.Data.Entity.Core.Metadata.Edm.FunctionParameter)">
      <summary>將參數加入至此函數。</summary>
      <param name="functionParameter">要加入的參數。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.AggregateAttribute">
      <summary>取得此函式的彙總屬性。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.BuiltInAttribute">
      <summary>取得值，指出此函式中是否有內建屬性。</summary>
      <returns>如果有屬性則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 列舉的其中一個列舉值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.CommandTextAttribute">
      <summary>取得以資料庫管理系統或儲存體模型使用之語言所撰寫的查詢。</summary>
      <returns>以資料庫管理系統或儲存體模型使用之語法所撰寫的字串值，其中包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 的查詢或更新陳述式。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>建構 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 物件的 Factory 方法。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 類型的新唯讀執行個體。</returns>
      <param name="name">函式的名稱。</param>
      <param name="namespaceName">函式的命名空間。</param>
      <param name="dataSpace">函式所屬的命名空間。</param>
      <param name="payload">其他函式屬性 (Attribute) 和屬性 (Property)。</param>
      <param name="metadataProperties">將加入至函式的中繼資料屬性。可以是 null。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.FullName">
      <summary>傳回此類型的完整名稱 (命名空間加上名稱)。</summary>
      <returns>類型的完整名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.IsComposableAttribute">
      <summary>取得此執行個體是對應至函式，還是對應至預存程序。</summary>
      <returns>如果此執行個體對應至函式則為 true，如果此執行個體對應至預存程序則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.IsFromProviderManifest">
      <summary>取得值，表示此執行個體是否來自提供者資訊清單。</summary>
      <returns>如果此執行個體來自提供者資訊清單，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.NiladicFunctionAttribute">
      <summary>取得值，指出是否為 niladic 函式 (接受無參數的函式)。</summary>
      <returns>如果函式是 niladic，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Parameters">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 的參數。</summary>
      <returns>類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 的集合，其中包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 的參數。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ParameterTypeSemanticsAttribute">
      <summary>取得此函式的參數類型語意屬性。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ReturnParameter">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 傳回的參數。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 的傳回參數。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ReturnParameters">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 的傳回參數。</summary>
      <returns>類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 的集合，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 的傳回參數。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Schema">
      <summary>取得或設定與函式相關聯的結構描述。</summary>
      <returns>與函式相關聯的結構描述。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.StoreFunctionNameAttribute">
      <summary>取得此函式的存放區函式名稱屬性。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload">
      <summary>包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 的其他屬性 (Attribute) 和屬性 (Property)。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.CommandText">
      <summary>取得或設定與函式相關聯的命令文字。</summary>
      <returns>與函式相關聯的命令文字。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.EntitySets">
      <summary>取得或設定函式的實體集。</summary>
      <returns>函式的實體集。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsAggregate">
      <summary>取得值，指出這是否為彙總函式。</summary>
      <returns>如果這是彙總函式則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsBuiltIn">
      <summary>取得或設定此函式是否為內建函式。</summary>
      <returns>如果此函式為內建函式則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsCachedStoreFunction">
      <summary>取得或設定此函式是否為快取的存放區函式。</summary>
      <returns>如果此函式為快取的存放區函式則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsComposable">
      <summary>取得或設定此函式是否可以撰寫。</summary>
      <returns>如果此函式可以撰寫則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsFromProviderManifest">
      <summary>取得或設定此函式是否來自提供者資訊清單。</summary>
      <returns>如果此函式來自提供者資訊清單則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsFunctionImport">
      <summary>取得或設定此函式是否為函式匯入。</summary>
      <returns>如果此函式為函式匯入，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsNiladic">
      <summary>取得或設定函式是否未包含任何引數。</summary>
      <returns>如果函式未包含任何引數則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.Parameters">
      <summary>取得或設定函式參數。</summary>
      <returns>函式參數。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.ParameterTypeSemantics">
      <summary>取得或設定參數類型語意。</summary>
      <returns>參數類型語意。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.ReturnParameters">
      <summary>取得或設定傳回參數。</summary>
      <returns>傳回參數。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.Schema">
      <summary>取得或設定函式結構描述。</summary>
      <returns>函式結構描述。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.StoreFunctionName">
      <summary>取得或設定存放區函式的名稱。</summary>
      <returns>存放區函式的名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection">
      <summary>表示 Edm 空間中項目集合的類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>使用 XMLReader 物件的集合 (其中存在概念結構定義語言 (CSDL) 檔案)，初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> 類別的新執行個體。</summary>
      <param name="xmlReaders">XMLReader 物件的集合，其中存在概念結構定義語言 (CSDL) 檔案。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmModel)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> 類別的新執行個體。</summary>
      <param name="model">實體資料模型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.String[])">
      <summary>使用其中存在概念結構定義語言 (CSDL) 檔的路徑，初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> 類別的新執行個體。</summary>
      <param name="filePaths">其中存在概念結構定義語言 (CSDL) 檔的路徑。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.Create(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> 的 Factory 方法。</summary>
      <returns>如果沒有發生錯誤，則為 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> 執行個體。否則為 null。</returns>
      <param name="xmlReaders">要載入的 CSDL 成品。不得為 null。</param>
      <param name="filePaths">CSDL 成品的路徑。於錯誤訊息中使用。可為 null，在這類情況下，XmlReader 的基底 URI 將做為路徑使用。</param>
      <param name="errors">載入時所發生錯誤的集合。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.EdmVersion">
      <summary>取得此集合的概念模型版本。</summary>
      <returns>此集合的概念模型版本。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes">
      <summary>傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 物件的集合。</summary>
      <returns>ReadOnlyCollection 物件，表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 物件的集合。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes(System.Double)">
      <summary>傳回含指定概念模型版本的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 集合。</summary>
      <returns>ReadOnlyCollection 物件，表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 物件的集合。</returns>
      <param name="edmVersion">概念模型版本。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmMember">
      <summary>表示 edm 成員類別</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.DeclaringType">
      <summary>取得會在其上宣告此成員的類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 物件，表示其上會宣告此成員的類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.IsStoreGeneratedComputed">
      <summary>說明此成員在 EDM 定義中是否標示為計算成員</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.IsStoreGeneratedIdentity">
      <summary>說明此成員的存放區所產生模式是否標示為 EDM 定義中的識別。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.Name">
      <summary>取得或設定屬性的名稱。如果根據存放區空間模型慣例加以設定，將會變更此屬性的資料庫資料行名稱。在概念模型中，這應與實體類別的對應屬性一致且切勿變更。</summary>
      <returns>此成員的名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmMember.ToString">
      <summary>傳回此成員的名稱。</summary>
      <returns>此成員的名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.TypeUsage">
      <summary>取得 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 類別 (Class) 的執行個體 (Instance)，此執行個體會包含此成員的類型以及該類型的 Facet。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件，包含此成員的類型以及該類型的 Facet。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmModel">
      <summary>表示概念模型或存放區模型。此類別可用來存取模型的圖案及其設定方式的相關資訊。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.AssociationType)">
      <summary>將關聯類型加入至模型。</summary>
      <param name="item">要加入的 AssociationType 執行個體。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>將複雜類型加入至模型。</summary>
      <param name="item">要加入的 ComplexType 執行個體。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>將函式加入至模型。</summary>
      <param name="item">要加入的 EdmFunction 執行個體。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>將實體類型加入至模型。</summary>
      <param name="item">要加入的 EntityType 執行個體。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>將列舉類型加入至模型。</summary>
      <param name="item">要加入的 EnumType 執行個體。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.AssociationTypes">
      <summary>取得模型中的關聯類型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.BuiltInTypeKind">
      <summary>取得此類型的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此類型的內建類型種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.ComplexTypes">
      <summary>取得模型中的複雜類型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.Container">
      <summary>取得儲存實體和關聯集的容器，以及函式匯入。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.DataSpace">
      <summary>取得與模型相關聯的資料空間，指出它是概念模型 (DataSpace.CSpace) 或存放區模型 (DataSpace.SSpace)。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.EntityTypes">
      <summary>取得模型中的實體類型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.EnumTypes">
      <summary>取得模型中的列舉類型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.Functions">
      <summary>取得模型中的函式。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.GlobalItems">
      <summary>取得與模型相關聯的全域項目。</summary>
      <returns>與模型相關聯的全域項目。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.AssociationType)">
      <summary>從模型中移除關聯類型。</summary>
      <param name="item">要移除的 AssociationType 執行個體。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>從模型中移除複雜類型。</summary>
      <param name="item">要移除的 ComplexType 執行個體。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>從模型中移除函式。</summary>
      <param name="item">要移除的 EdmFunction 執行個體。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>從模型中移除實體類型。</summary>
      <param name="item">要移除的 EntityType 執行個體。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>從模型中移除列舉類型。</summary>
      <param name="item">要移除的 EnumType 執行個體。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty">
      <summary>在概念空間中，EdmProperty 表示實體的屬性。在存放區空間中，EdmProperty 表示資料表內的資料行。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> 的內建類型種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CollectionKind">
      <summary>取得或設定此模型之集合的類型。</summary>
      <returns>此模型之集合的類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.ComplexType">
      <summary>取得此屬性的複雜類型資訊。</summary>
      <returns>此屬性的複雜類型資訊。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.ConcurrencyMode">
      <summary>取得或設定屬性的並行模式。</summary>
      <returns>屬性的並行模式。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>建立 EdmProperty 類型的新執行個體。</summary>
      <returns>EdmProperty 類型的新執行個體</returns>
      <param name="name">屬性的名稱。</param>
      <param name="typeUsage">屬性 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /></param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreateComplex(System.String,System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>建立新的複雜屬性。</summary>
      <returns>新建立的屬性。</returns>
      <param name="name">屬性的名稱。</param>
      <param name="complexType">此屬性的類型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreateEnum(System.String,System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>建立新的列舉屬性。</summary>
      <returns>新建立的屬性。</returns>
      <param name="name">屬性的名稱。</param>
      <param name="enumType">此屬性的類型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreatePrimitive(System.String,System.Data.Entity.Core.Metadata.Edm.PrimitiveType)">
      <summary>建立新的基本屬性。</summary>
      <returns>新建立的屬性。</returns>
      <param name="name">屬性的名稱。</param>
      <param name="primitiveType">此屬性的類型。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.DefaultValue">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> 的預設值。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> 的預設值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.EnumType">
      <summary>取得此屬性的列舉類型資訊。</summary>
      <returns>此屬性的列舉類型資訊。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsCollectionType">
      <summary>取得屬性是否為集合類型屬性。</summary>
      <returns>如果屬性為集合類型屬性，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsComplexType">
      <summary>取得此屬性是否為複雜類型屬性。</summary>
      <returns>如果此屬性為複雜類型屬性，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsEnumType">
      <summary>取得此屬性是否為列舉類型屬性。</summary>
      <returns>如果此屬性為列舉類型屬性，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsFixedLength">
      <summary>取得或設定此屬性的長度是否固定。</summary>
      <returns>如果此屬性的長度固定則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsFixedLengthConstant">
      <summary>取得固定長度的 Facet 是否為資料庫提供者的常數。</summary>
      <returns>如果 Facet 為常數，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsMaxLength">
      <summary>取得或設定此屬性是否使用提供者所支援的最大長度。</summary>
      <returns>如果此屬性使用提供者所支援的最大長度，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsMaxLengthConstant">
      <summary>取得最大長度的 Facet 是否為資料庫提供者的常數。</summary>
      <returns>如果 Facet 為常數，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsPrecisionConstant">
      <summary>取得 Precision Facet 是否為資料庫提供者的常數。</summary>
      <returns>如果 Facet 為常數，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsPrimitiveType">
      <summary>取得此屬性是否為基本類型。</summary>
      <returns>如果此屬性為基本類型，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsScaleConstant">
      <summary>取得 Scale Facet 是否為資料庫提供者的常數。</summary>
      <returns>如果 Facet 為常數，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnderlyingPrimitiveType">
      <summary>取得此屬性是否為基礎的基本類型。</summary>
      <returns>如果此屬性為基礎的基本類型，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnicode">
      <summary>取得或設定此屬性是否為 Unicode 屬性。</summary>
      <returns>如果此屬性為 Unicode 屬性，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnicodeConstant">
      <summary>取得 Unicode Facet 是否為資料庫提供者的常數。</summary>
      <returns>如果 Facet 為常數，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.MaxLength">
      <summary>取得或設定此屬性的最大長度。</summary>
      <returns>屬性的長度上限。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Nullable">
      <summary>取得值，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> 是否可以具有 null 值。</summary>
      <returns>如果此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> 可以具有 null 值，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Precision">
      <summary>取得或設定此屬性的有效位數。</summary>
      <returns>此屬性的有效位數。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.PrimitiveType">
      <summary>取得此屬性的基本類型資訊。</summary>
      <returns>此屬性的基本類型資訊。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Scale">
      <summary>取得或設定此屬性的小數位數。</summary>
      <returns>此屬性的小數位數。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.SetMetadataProperties(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>設定中繼資料屬性。</summary>
      <param name="metadataProperties">要設定的中繼資料屬性。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.StoreGeneratedPattern">
      <summary>取得或設定與此屬性相關聯的資料行其所在資料庫的資料庫產生方法</summary>
      <returns>屬性的存放區產生模式。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.TypeName">
      <summary>取得屬性的類型名稱。</summary>
      <returns>屬性的類型名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.UnderlyingPrimitiveType">
      <summary>取得此屬性的基礎基本類型資訊。</summary>
      <returns>此屬性的基礎基本類型資訊。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError">
      <summary>此類別會封裝所發生結構描述錯誤的錯誤資訊。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.#ctor(System.String,System.Int32,System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity)">
      <summary>建構 EdmSchemaError 物件。</summary>
      <param name="message">錯誤的說明。</param>
      <param name="errorCode">與此錯誤相關聯的代碼。</param>
      <param name="severity">錯誤的嚴重性。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Column">
      <summary>取得發生錯誤的資料行。</summary>
      <returns>發生錯誤的資料行。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.ErrorCode">
      <summary>取得錯誤碼。</summary>
      <returns>錯誤碼。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Line">
      <summary>取得發生錯誤的行號。</summary>
      <returns>發生錯誤的行號。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.SchemaLocation">
      <summary>取得包含錯誤之結構描述的位置。此字串的結尾也包含結構描述的名稱。</summary>
      <returns>包含錯誤之結構描述的位置。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.SchemaName">
      <summary>取得包含錯誤之結構描述的名稱。</summary>
      <returns>包含錯誤之結構描述的名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Severity">
      <summary>取得錯誤的嚴重性層級。</summary>
      <returns>其中一個 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity" /> 值。預設為 <see cref="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Warning" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.StackTrace">
      <summary>取得錯誤發生時堆疊追蹤的字串表示。</summary>
      <returns>錯誤發生時堆疊追蹤的字串表示。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.ToString">
      <summary>傳回錯誤訊息。</summary>
      <returns>錯誤訊息。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity">
      <summary>定義驗證 Entity Framework 模型時可能發生之錯誤的不同嚴重性。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Error">
      <summary>可防止使用模型的錯誤。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Warning">
      <summary>無法防止使用模型的警告。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmType">
      <summary>所有模型類型的基底 EdmType 類別</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.Abstract">
      <summary>取得表示此類型是否為抽象的值。</summary>
      <returns>如果此類型為抽象則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.BaseType">
      <summary>取得此類型的基底類型 (Base Type)。</summary>
      <returns>此類型的基底類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.FullName">
      <summary>取得此類型的完整名稱。</summary>
      <returns>此類型的完整名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmType.GetCollectionType">
      <summary>傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> 的執行個體 (Instance)，其項目類型為此類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> 物件，其項目類型為此類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.Name">
      <summary>取得此類型的名稱。</summary>
      <returns>此類型的名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.NamespaceName">
      <summary>取得此類型的命名空間 (Namespace)。</summary>
      <returns>此類型的命名空間。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmType.ToString">
      <summary>傳回此類型的完整名稱。</summary>
      <returns>此類型的完整名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer">
      <summary>表示實體容器的類別</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.#ctor(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>建立具有指定名稱及資料空間的實體容器。</summary>
      <param name="name">實體容器的名稱。</param>
      <param name="dataSpace">實體容器的資料空間。</param>
      <exception cref="T:System.ArgumentNullException">如果名稱引數為 null 即擲回。</exception>
      <exception cref="T:System.ArgumentException">如果名稱引數為空字串即擲回。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AddEntitySetBase(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>將指定的實體集加入容器。</summary>
      <param name="entitySetBase">要加入的實體集。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AddFunctionImport(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>將函式匯入加入至容器。</summary>
      <param name="function">要加入的函式匯入。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AssociationSets">
      <summary>取得此實體容器的關聯集。</summary>
      <returns>此實體容器的關聯集。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.BaseEntitySets">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 包含的實體集和關聯集的清單。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 物件，包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 包含的實體集和關聯集的清單。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 的內建類型種類。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.Create(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntitySetBase},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmFunction},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>建構 EntityContainer 物件的 Factory 方法。</summary>
      <returns>EntityContainer 物件。</returns>
      <param name="name">要建立之實體容器的名稱。</param>
      <param name="dataSpace">此實體容器所屬的 DataSpace。</param>
      <param name="entitySets">將會包含在新容器中的實體集。可以是 null。</param>
      <param name="functionImports">將會包含在新容器中的函式。可以是 null。</param>
      <param name="metadataProperties">要與執行個體產生關聯的中繼資料屬性。</param>
      <exception cref="T:System.ArgumentException">如果 name 引數為 null 或空字串，則擲回。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.EntitySets">
      <summary>取得此實體容器的實體集。</summary>
      <returns>此實體容器的實體集。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.FunctionImports">
      <summary>指定 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 項目的集合。每個函式都包含存在於資料庫中的預存程序詳細資訊，或者包含對應至實體及其屬性的對等 CommandText。</summary>
      <returns>包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 項目的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.GetEntitySetByName(System.String,System.Boolean)">
      <summary>使用實體集的指定名稱傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 物件。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 物件，表示具有指定名稱的實體集。</returns>
      <param name="name">所搜尋之實體集的名稱。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.GetRelationshipSetByName(System.String,System.Boolean)">
      <summary>使用關聯性 (Relationship) 集合的指定名稱傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 物件。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 物件，表示具有指定名稱的關聯性集合。</returns>
      <param name="name">所搜尋之關聯性集合的名稱。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.Name">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 的名稱。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 的名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.RemoveEntitySetBase(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>從容器中移除特定實體集。</summary>
      <param name="entitySetBase">要移除的實體集。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.ToString">
      <summary>傳回此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 的名稱。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 的名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.TryGetEntitySetByName(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EntitySet@)">
      <summary>使用實體集的指定名稱傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 物件。</summary>
      <returns>如果有符合搜尋準則的實體集，則為 true，否則為 false。</returns>
      <param name="name">所搜尋之實體集的名稱。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
      <param name="entitySet">在此方法傳回時會包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 物件。如果沒有實體集，此輸出參數會包含 null。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.TryGetRelationshipSetByName(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.RelationshipSet@)">
      <summary>使用關聯性 (Relationship) 集合的指定名稱傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 物件。</summary>
      <returns>如果有符合搜尋準則的關聯性，則為 true，否則為 false。</returns>
      <param name="name">所搜尋之關聯性集合的名稱。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
      <param name="relationshipSet">在此方法傳回時會包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 物件。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntitySet">
      <summary>表示 EntityType 中定義之結構的特定用法。在概念模型中，這表示可查詢及保存實體的集合。在存放區模型中，則表示資料表。根據存放區空間模型慣例，這可用於搭配 <see cref="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Table" /> 屬性設定資料表名稱，以及搭配 <see cref="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Schema" /> 屬性設定資料表結構描述。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySet.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 的內建類型種類。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntitySet.Create(System.String,System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>建構的 EntitySet 物件的 Factory 方法。</summary>
      <returns>EntitySet 物件。</returns>
      <param name="name">EntitySet 的名稱。</param>
      <param name="schema">db 結構描述。可以是 null。</param>
      <param name="table">db 資料表。可以是 null。</param>
      <param name="definingQuery">提供者特定的查詢，應用來擷取此 EntitySet 的資料。可以是 null。</param>
      <param name="entityType">此實體集類型所包含實體的實體類型。</param>
      <param name="metadataProperties">將加入至新建立之 EntitySet 的中繼資料屬性。可以是 null。</param>
      <exception cref="T:System.ArgumentException">如果 name 引數為 null 或空字串，則擲回。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySet.ElementType">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 的實體類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 的實體類型。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase">
      <summary>表示實體集合的類別</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> 的內建類型種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.DefiningQuery">
      <summary>取得描述此實體集的逸出提供者特定 SQL。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.ElementType">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> 的實體類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> 的實體類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.EntityContainer">
      <summary>取得目前的實體或關聯性集合的實體容器。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 物件，表示目前的實體或關聯性集合的實體容器。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Name">
      <summary>取得或設定目前的實體或關聯性集合的名稱。如果從存放區空間變更此屬性，就要一併更新對應層以反映新的名稱。若要變更存放區空間 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 的資料表名稱，請使用 Table 屬性。</summary>
      <returns>目前的實體或關聯性集合的名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Schema">
      <summary>取得或設定此實體集的資料庫結構描述。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Table">
      <summary>取得或設定此實體集的資料庫資料表名稱。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.ToString">
      <summary>傳回目前的實體或關聯性集合的名稱。</summary>
      <returns>目前的實體或關聯性集合的名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityType">
      <summary>表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 的結構。在概念模型中，這表示實體的形狀和結構。在存放區模型中，這表示資料表的結構。若要變更結構描述和資料表名稱，請使用 EntitySet。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.AddNavigationProperty(System.Data.Entity.Core.Metadata.Edm.NavigationProperty)">
      <summary>將指定的導覽屬性加入至此類型的成員。不論唯讀旗標為何，都加入導覽屬性。</summary>
      <param name="property">要加入的導覽屬性。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> 的內建類型種類。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>建構的 EntityType 物件的 Factory 方法。</summary>
      <returns>EntityType 物件。</returns>
      <param name="name">實體類型的名稱。</param>
      <param name="namespaceName">實體類型的命名空間。</param>
      <param name="dataSpace">EntityType 所屬的資料空間。</param>
      <param name="keyMemberNames">類型的索引鍵成員名稱。</param>
      <param name="members">實體類型的成員 (基本和導覽屬性)。</param>
      <param name="metadataProperties">要與執行個體產生關聯的中繼資料屬性。</param>
      <exception cref="T:System.ArgumentException">如果 name 或 namespace 引數為 null 則擲回。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>建構的 EntityType 物件的 Factory 方法。</summary>
      <returns>EntityType 物件。</returns>
      <param name="name">實體類型的名稱。</param>
      <param name="namespaceName">實體類型的命名空間。</param>
      <param name="dataSpace">EntityType 所屬的資料空間。</param>
      <param name="baseType">基底類型。</param>
      <param name="keyMemberNames">類型的索引鍵成員名稱。</param>
      <param name="members">實體類型的成員 (基本和導覽屬性)。</param>
      <param name="metadataProperties">要與執行個體產生關聯的中繼資料屬性。</param>
      <exception cref="T:System.ArgumentException">如果 name 或 namespace 引數為 null 則擲回。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredMembers">
      <summary>取得針對實體類型所宣告的成員集合。</summary>
      <returns>針對實體類型所宣告的成員集合。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredNavigationProperties">
      <summary>取得與實體類型相關聯的已宣告導覽屬性。</summary>
      <returns>與實體類型相關聯的已宣告導覽屬性。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredProperties">
      <summary>取得宣告的實體類型屬性的清單。</summary>
      <returns>宣告的實體類型屬性。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.GetReferenceType">
      <summary>傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> 物件，此物件會參考此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> 物件，會參考此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.NavigationProperties">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> 的導覽屬性。</summary>
      <returns>類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 的集合，其中包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> 的導覽屬性清單。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.Properties">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> 的屬性清單。</summary>
      <returns>類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 的集合，其中包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> 的屬性清單。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase">
      <summary>表示實體類型</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.AddKeyMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>將指定的屬性加入至目前實體的索引鍵清單。</summary>
      <param name="member">要加入的屬性。</param>
      <exception cref="T:System.ArgumentNullException">如果 member 引數為 null</exception>
      <exception cref="T:System.InvalidOperationException">如果 EntityType 有另一個 EntityTypeBase 的基底類型，則擲回。在此情況下，KeyMembers 應加入至基底類型</exception>
      <exception cref="T:System.InvalidOperationException">如果 EntityType 執行個體的狀態為 ReadOnly</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.KeyMembers">
      <summary>取得目前實體或關聯性 (Relationship) 類型的所有索引鍵成員清單。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 物件，表示目前實體或關聯性 (Relationship) 類型的所有索引鍵成員清單。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.KeyProperties">
      <summary>取得此實體類型之所有索引鍵屬性的清單。</summary>
      <returns>此實體類型之所有索引鍵屬性的清單。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.RemoveMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>從集合中移除指定的索引鍵成員。</summary>
      <param name="member">要移除的索引鍵成員。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EnumMember">
      <summary>表示列舉成員。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.BuiltInTypeKind">
      <summary>取得此類型的類型。</summary>
      <returns>此類型的種型。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Byte,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>建立唯讀的 EnumMember 執行個體。</summary>
      <returns>新建立的 EnumMember 執行個體。</returns>
      <param name="name">列舉成員的名稱。</param>
      <param name="value">列舉成員的值。</param>
      <param name="metadataProperties">要與列舉成員產生關聯的中繼資料屬性。</param>
      <exception cref="T:System.ArgumentException">名稱為 null 或空白。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int16,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>建立唯讀的 EnumMember 執行個體。</summary>
      <returns>新建立的 EnumMember 執行個體。</returns>
      <param name="name">列舉成員的名稱。</param>
      <param name="value">列舉成員的值。</param>
      <param name="metadataProperties">要與列舉成員產生關聯的中繼資料屬性。</param>
      <exception cref="T:System.ArgumentException">名稱為 null 或空白。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>建立唯讀的 EnumMember 執行個體。</summary>
      <returns>新建立的 EnumMember 執行個體。</returns>
      <param name="name">列舉成員的名稱。</param>
      <param name="value">列舉成員的值。</param>
      <param name="metadataProperties">要與列舉成員產生關聯的中繼資料屬性。</param>
      <exception cref="T:System.ArgumentException">名稱為 null 或空白。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int64,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>建立唯讀的 EnumMember 執行個體。</summary>
      <returns>新建立的 EnumMember 執行個體。</returns>
      <param name="name">列舉成員的名稱。</param>
      <param name="value">列舉成員的值。</param>
      <param name="metadataProperties">要與列舉成員產生關聯的中繼資料屬性。</param>
      <exception cref="T:System.ArgumentException">名稱為 null 或空白。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.SByte,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>建立唯讀的 EnumMember 執行個體。</summary>
      <returns>新建立的 EnumMember 執行個體。</returns>
      <param name="name">列舉成員的名稱。</param>
      <param name="value">列舉成員的值。</param>
      <param name="metadataProperties">要與列舉成員產生關聯的中繼資料屬性。</param>
      <exception cref="T:System.ArgumentException">名稱為 null 或空白。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.Name">
      <summary>取得此列舉成員的名稱。</summary>
      <returns>此列舉成員的名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.ToString">
      <summary>覆寫 System.Object.ToString，為此類型提供較佳的字串表示。</summary>
      <returns>此列舉成員的名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.Value">
      <summary>取得此列舉成員的值。</summary>
      <returns>此列舉成員的值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EnumType">
      <summary>表示列舉類型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.BuiltInTypeKind">
      <summary>傳回類型的種類</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EnumMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>建立唯讀的 EnumType 執行個體。</summary>
      <returns>新建立的 EnumType 執行個體。</returns>
      <param name="name">列舉類型的名稱。</param>
      <param name="namespaceName">列舉類型的命名空間。</param>
      <param name="underlyingType">列舉類型的基礎類型。</param>
      <param name="isFlags">指出是否可將列舉類型視為位元欄位 (亦即一組旗標)。</param>
      <param name="members">列舉類型的成員。</param>
      <param name="metadataProperties">要與列舉類型產生關聯的中繼資料屬性。</param>
      <exception cref="T:System.ArgumentNullException">underlyingType 為 null。</exception>
      <exception cref="T:System.ArgumentException">名稱為 null 或空白。-或- namespaceName 為 null 或空白。-或- underlyingType 不是支援的基礎類型。-或- 指定的成員沒有唯一的名稱。-或- 指定成員的值不在基礎類型的範圍內。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.IsFlags">
      <summary>取得值，指出是否將列舉類型定義為旗標 (也就是可視為位元欄位)</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.Members">
      <summary>取得此列舉類型之列舉成員的集合。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.UnderlyingType">
      <summary>取得此列舉類型的基礎類型。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.Facet">
      <summary>表示 Facet 物件的類別，此物件不可變 (不僅是設為唯讀)，而且系統的某些部分是根據該行為</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的內建類型種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Description">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的描述。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.FacetDescription" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的描述。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.FacetType">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.IsUnbounded">
      <summary>取得值，表示 Facet 的值是否未繫結。</summary>
      <returns>如果 Facet 的值未繫結，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Name">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的名稱。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Facet.ToString">
      <summary>傳回此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的名稱。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Value">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的值。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.FacetDescription">
      <summary>表示 FacetDescription 物件的類別</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.DefaultValue">
      <summary>取得具有此 Facet 描述的 Facet 預設值。</summary>
      <returns>具有此 Facet 描述的 Facet 預設值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.FacetName">
      <summary>取得此 Facet 的名稱。</summary>
      <returns>此 Facet 的名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.FacetType">
      <summary>取得此 Facet 的類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件，表示此 Facet 的類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.IsConstant">
      <summary>取得值，表示此 Facet 的值是否為常數。</summary>
      <returns>如果此 Facet 為常數，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.IsRequired">
      <summary>取得值，表示此 Facet 是否為必要的 Facet。</summary>
      <returns>如果此 Facet 為必要的 Facet，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.MaxValue">
      <summary>取得此 Facet 的最大值。</summary>
      <returns>此 Facet 的最大值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.MinValue">
      <summary>取得此 Facet 的最小值。</summary>
      <returns>此 Facet 的最小值。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FacetDescription.ToString">
      <summary>傳回此 Facet 的名稱。</summary>
      <returns>此 Facet 的名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter">
      <summary>表示函式參數的類別</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> 的內建類型種類。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Create(System.String,System.Data.Entity.Core.Metadata.Edm.EdmType,System.Data.Entity.Core.Metadata.Edm.ParameterMode)">
      <summary>建構 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> 物件的 Factory 方法。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 類型的新唯讀執行個體。</returns>
      <param name="name">參數名稱。</param>
      <param name="edmType">參數的 EdmType。</param>
      <param name="parameterMode">參數的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.DeclaringFunction">
      <summary>取得 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />，此參數會在其上宣告。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 物件，表示其上會宣告此參數的函式。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsMaxLength">
      <summary>取得參數是否使用資料庫提供者所支援的最大長度。</summary>
      <returns>如果參數使用資料庫提供者所支援的最大長度，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsMaxLengthConstant">
      <summary>取得最大長度的 Facet 是否為資料庫提供者的常數。</summary>
      <returns>如果 Facet 為常數，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsPrecisionConstant">
      <summary>取得 Precision Facet 是否為資料庫提供者的常數。</summary>
      <returns>如果 Facet 為常數，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsScaleConstant">
      <summary>取得 Scale Facet 是否為資料庫提供者的常數。</summary>
      <returns>如果 Facet 為常數，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.MaxLength">
      <summary>取得參數的長度上限。</summary>
      <returns>參數的長度上限。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Mode">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> 的模式。</summary>
      <returns>其中一個 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode" /> 值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Name">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> 的名稱。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> 的名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Precision">
      <summary>取得參數的整數位數值。</summary>
      <returns>參數的整數位數值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Scale">
      <summary>取得參數的小數位數值。</summary>
      <returns>參數的小數位數值。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.ToString">
      <summary>傳回此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> 的名稱。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> 的名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.TypeName">
      <summary>取得此參數的類型名稱。</summary>
      <returns>此參數的類型名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.TypeUsage">
      <summary>取得 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 類別 (Class) 的執行個體 (Instance)，此執行個體包含此參數的類型以及該類型的 Facet。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件，包含此參數的類型以及該類型的 Facet。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem">
      <summary>表示所有中繼資料的基底項目類別</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter">
      <summary>用來取得 <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> 之基礎存放區和概念模型的介面。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter.ConceptualModel">
      <summary>取得概念模型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter.StoreModel">
      <summary>取得存放區模型。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection">
      <summary>表示項目集合的類別。實際維護集合的大部分實作是 MetadataCollection 所完成</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ItemCollection.DataSpace">
      <summary>取得與此項目集合相關聯的資料模型。</summary>
      <returns>與此項目集合相關聯的資料模型。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetEntityContainer(System.String)">
      <summary>使用指定的實體容器名稱傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />。</summary>
      <returns>如果沒有實體容器，此方法會傳回 null，否則會傳回第一個值。</returns>
      <param name="name">實體容器的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetEntityContainer(System.String,System.Boolean)">
      <summary>使用指定的實體容器名稱傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />。</summary>
      <returns>如果沒有實體容器，此方法會傳回 null，否則會傳回第一個實體容器。</returns>
      <param name="name">實體容器的名稱。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.Collections.Generic.Dictionary{System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Metadata.Edm.EdmFunction}},System.String,System.Boolean)">
      <summary>使用此項目集合的指定名稱傳回函式的所有多載。</summary>
      <returns>類型 ReadOnlyCollection 的集合，其中包含所有具有指定名稱的函式。</returns>
      <param name="functionCollection">函式的字典。</param>
      <param name="functionName">函式的全名。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.String)">
      <summary>使用此項目集合的指定名稱傳回函式的所有多載。</summary>
      <returns>類型 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的集合，其中包含所有具有指定名稱的函式。</returns>
      <param name="functionName">函式的全名。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.String,System.Boolean)">
      <summary>使用此項目集合的指定名稱傳回函式的所有多載。</summary>
      <returns>類型 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的集合，其中包含所有具有指定名稱的函式。</returns>
      <param name="functionName">函式的全名。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItem``1(System.String)">
      <summary>使用指定的識別傳回強類型 (Strongly Typed) <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> 物件。</summary>
      <returns>由識別所指定的項目。</returns>
      <param name="identity">項目的識別。</param>
      <typeparam name="T">此方法傳回的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItem``1(System.String,System.Boolean)">
      <summary>藉由以區分大小寫或不區分大小寫的搜尋，使用指定的識別傳回強類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> 物件。</summary>
      <returns>由識別所指定的項目。</returns>
      <param name="identity">項目的識別。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
      <typeparam name="T">此方法傳回的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItems``1">
      <summary>從此項目集合傳回指定類型的所有項目。</summary>
      <returns>類型 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的集合，其中包含指定類型的所有項目。</returns>
      <typeparam name="T">此方法傳回的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetType(System.String,System.String)">
      <summary>使用指定的類型名稱和此項目集合中的命名空間名稱，傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件，表示符合此項目集合中的指定類型名稱和命名空間名稱的類型。如果沒有符合的類型，此方法會傳回 null。</returns>
      <param name="name">類型的名稱。</param>
      <param name="namespaceName">類型的命名空間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetType(System.String,System.String,System.Boolean)">
      <summary>使用指定的類型名稱和此項目集合中的命名空間名稱，傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件，表示符合此項目集合中的指定類型名稱和命名空間名稱的類型。如果沒有符合的類型，此方法會傳回 null。</returns>
      <param name="name">類型的名稱。</param>
      <param name="namespaceName">類型的命名空間。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>使用指定的實體容器名稱傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />。如果沒有實體容器，此輸出參數會包含 null，否則會包含第一個實體容器。</summary>
      <returns>如果有符合搜尋準則的實體容器，則為 true，否則為 false。</returns>
      <param name="name">實體容器的名稱。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
      <param name="entityContainer">在此方法傳回時會包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 物件。如果沒有實體容器，此輸出參數會包含 null，否則會包含第一個實體容器。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>使用指定的實體容器名稱傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />。如果沒有實體容器，輸出參數會包含 null，否則會包含第一個實體容器。</summary>
      <returns>如果有符合搜尋準則的實體容器，則為 true，否則為 false。</returns>
      <param name="name">實體容器的名稱。</param>
      <param name="entityContainer">在此方法傳回時會包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 物件。如果沒有實體容器，此輸出參數會包含 null，否則會包含第一個實體容器。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,System.Boolean,``0@)">
      <summary>使用此項目集合的指定識別傳回強類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> 物件。</summary>
      <returns>如果有符合搜尋準則的項目，則為 true，否則為 false。</returns>
      <param name="identity">項目的識別。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
      <param name="item">在此方法傳回時，輸出參數會包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> 物件。如果在項目集合中沒有指定識別的全域項目，此輸出參數會包含 null。</param>
      <typeparam name="T">此方法傳回的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,``0@)">
      <summary>使用此項目集合的指定識別傳回強類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> 物件。</summary>
      <returns>如果有符合搜尋準則的項目，則為 true，否則為 false。</returns>
      <param name="identity">項目的識別。</param>
      <param name="item">在此方法傳回時，輸出參數會包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> 物件。如果在項目集合中沒有指定識別的全域項目，此輸出參數會包含 null。</param>
      <typeparam name="T">此方法傳回的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>使用指定的類型名稱和此項目集合中的命名空間名稱，傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件。</summary>
      <returns>如果有符合搜尋準則的類型，則為 true，否則為 false。</returns>
      <param name="name">類型的名稱。</param>
      <param name="namespaceName">類型的命名空間。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
      <param name="type">在此方法傳回時，此輸出參數會包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件。如果在此項目集合中沒有指定之名稱和命名空間名稱的類型，此輸出參數會包含 null。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>使用指定的類型名稱和此項目集合中的命名空間名稱，傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件。</summary>
      <returns>如果有符合搜尋準則的類型，則為 true，否則為 false。</returns>
      <param name="name">類型的名稱。</param>
      <param name="namespaceName">類型的命名空間。</param>
      <param name="type">在此方法傳回時，此輸出參數會包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件。如果在此項目集合中沒有指定之名稱和命名空間名稱的類型，此輸出參數會包含 null。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem">
      <summary>表示所有中繼資料的基底項目類別</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.AddAnnotation(System.String,System.Object)">
      <summary>加入或更新具有指定之名稱與值的註釋。</summary>
      <param name="name">註釋屬性的名稱。</param>
      <param name="value">註釋屬性的值。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.BuiltInTypeKind">
      <summary>取得此類型的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此類型的內建類型種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.Documentation">
      <summary>取得或設定與此類型相關聯的文件。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 物件，表示此類型的相關文件。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.GetBuiltInType(System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind)">
      <summary>傳回符合其中一個 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 值的概念模型內建類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件，表示 EDM 中的內建類型種類。</returns>
      <param name="builtInTypeKind">其中一個 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.GetGeneralFacetDescriptions">
      <summary>取得指定類型的一般 Facet 描述清單。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 物件，表示指定類型的一般 Facet 描述清單。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.MetadataProperties">
      <summary>取得目前類型的屬性清單。</summary>
      <returns>類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 的集合，其中包含目前類型的屬性清單。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.RemoveAnnotation(System.String)">
      <summary>移除具有指定之名稱的註釋。</summary>
      <returns>如果已移除註釋，則為 true，否則為 false。</returns>
      <param name="name">註釋屬性的名稱。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty">
      <summary>表示項目之中繼資料屬性的類別</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> 的內建類型種類。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>建構 MetadataProperty 物件的 Factory 方法。</summary>
      <returns>MetadataProperty 物件。</returns>
      <param name="name">中繼資料屬性的名稱。</param>
      <param name="typeUsage">中繼資料屬性的類型使用情況。</param>
      <param name="value">中繼資料屬性的值。</param>
      <exception cref="T:System.NullReferenceException">擲回的 <paramref name="typeUsage" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.CreateAnnotation(System.String,System.Object)">
      <summary>建立具有指定名稱與值的中繼資料註釋。</summary>
      <returns>MetadataProperty 執行個體代表所建立的註釋。</returns>
      <param name="name">註釋名稱。</param>
      <param name="value">註釋值。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.IsAnnotation">
      <summary>取得布林值，此布林值表示中繼資料屬性是否為註釋。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Name">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> 的名稱。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> 的名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.PropertyKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind" /> 的值。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind" /> 的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.TypeUsage">
      <summary>取得 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 類別的執行個體，此執行個體包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> 的類型以及該類型的 Facet。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件，包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> 的類型以及該類型的 Facet。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Value">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> 的值。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> 的值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace">
      <summary>執行階段中繼資料工作空間</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>使用指定的路徑和組件，初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 類別的新執行個體。</summary>
      <param name="paths">工作空間中繼資料的路徑。</param>
      <param name="assembliesToConsider">用來建構工作空間的組件名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Func{System.Data.Entity.Core.Metadata.Edm.EdmItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection},System.Func{System.Data.Entity.Core.Mapping.StorageMappingItemCollection})">
      <summary>使用來自傳統 EDMX 對應之所有項目集合的載入器 (<see cref="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection" />) 建構 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />。將使用預設的 o-space 和 o/c 對應集合。第一次使用給定的集合時，會消極地執行項目集合委派。接受傳遞會回 null 的委派 (如果永遠不會使用集合的話)，但很少會這麼做，而且在這種情況下，若 EF 嘗試使用集合，將會造成例外狀況。</summary>
      <param name="cSpaceLoader">傳回 c-space (CSDL) 項目集合的委派。</param>
      <param name="sSpaceLoader">傳回 s-space (SSDL) 項目集合的委派。</param>
      <param name="csMappingLoader">傳回 c/s 對應 (MSL) 項目集合的委派。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Func{System.Data.Entity.Core.Metadata.Edm.EdmItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection},System.Func{System.Data.Entity.Core.Mapping.StorageMappingItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection})">
      <summary>使用 EF 所需之所有項目集合的載入器 (<see cref="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection" />) (自動根據給定的 o-space 和 c-space 載入器建立的 o/c 對應除外)，建構 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />。第一次使用給定的集合時，會消極地執行項目集合委派。接受傳遞會回 null 的委派 (如果永遠不會使用集合的話)，但很少會這麼做，而且在這種情況下，若 EF 嘗試使用集合，將會造成例外狀況。</summary>
      <param name="cSpaceLoader">傳回 c-space (CSDL) 項目集合的委派。</param>
      <param name="sSpaceLoader">傳回 s-space (SSDL) 項目集合的委派。</param>
      <param name="csMappingLoader">傳回 c/s 對應 (MSL) 項目集合的委派。</param>
      <param name="oSpaceLoader">傳回 o-space 項目集合的委派。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.ClearCache">
      <summary>清除所有的中繼資料快取項目。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.CreateEntitySqlParser">
      <summary>建立設定為使用 <see cref="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSpace" /> 資料空間的 <see cref="T:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser" />。</summary>
      <returns>建立的剖析器物件。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.CreateQueryCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" />，它會根據指定的查詢運算式繫結至此中繼資料工作空間。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" />，指定的運算式為其 <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.Query" /> 屬性。</returns>
      <param name="query">用於定義查詢的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="query" /> 為 null</exception>
      <exception cref="T:System.ArgumentException">如果 <paramref name="query" /> 包含的中繼資料無法在此中繼資料工作空間中解析</exception>
      <exception cref="T:System.ArgumentException">如果 <paramref name="query" /> 因為包含無法解析的變數參考而結構上無效</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 物件，此物件表示符合參數 objectSpaceType 所提供類型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />。</summary>
      <returns>表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 物件。如果沒有符合的類型，此方法會傳回 null。</returns>
      <param name="objectSpaceType">
        <see cref="T:System.Data.Metadata.Edm.EnumlType" />，在物件空間中提供類型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 物件，此物件表示符合參數 objectSpaceType 所提供類型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />。</summary>
      <returns>表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 物件。如果沒有符合的類型，此方法會傳回 null。</returns>
      <param name="objectSpaceType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />，在物件空間中提供類型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>使用指定的實體容器名稱和資料模型傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 物件。</summary>
      <returns>如果沒有實體容器，此方法會傳回 null，否則會傳回第一個實體容器。</returns>
      <param name="name">實體容器的名稱。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
      <param name="dataSpace">要在其中搜尋實體容器的概念模型。</param>
      <exception cref="T:System.ArgumentException">如果空間不是有效的空間則擲回。有效的空間為 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>使用指定的實體容器名稱和資料模型傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 物件。</summary>
      <returns>如果沒有實體容器，此方法會傳回 null，否則會傳回第一個實體容器。</returns>
      <param name="name">實體容器的名稱。</param>
      <param name="dataSpace">要在其中搜尋實體容器的概念模型。</param>
      <exception cref="T:System.ArgumentException">如果空間不是有效的空間則擲回。有效的空間為 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>使用指定名稱、命名空間名稱和資料模型傳回函式的所有多載。</summary>
      <returns>類型 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的集合，其中包含符合指定命名空間和資料模型中的指定名稱的所有函式。</returns>
      <param name="name">函式的名稱。</param>
      <param name="namespaceName">函式的命名空間。</param>
      <param name="dataSpace">要在其中搜尋函式的概念模型。</param>
      <exception cref="T:System.ArgumentException">如果空間不是有效的空間則擲回。有效的空間為 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Boolean)">
      <summary>使用指定名稱、命名空間名稱和資料模型傳回函式的所有多載。</summary>
      <returns>類型 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的集合，其中包含符合指定命名空間和資料模型中的指定名稱的所有函式。</returns>
      <param name="name">函式的名稱。</param>
      <param name="namespaceName">函式的命名空間。</param>
      <param name="dataSpace">要在其中搜尋函式的概念模型。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
      <exception cref="T:System.ArgumentException">如果空間不是有效的空間則擲回。有效的空間為 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>使用指定的識別和資料模型傳回項目。</summary>
      <returns>符合指定資料模型中的指定識別的項目。</returns>
      <param name="identity">項目的識別。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
      <param name="dataSpace">要在其中搜尋項目的概念模型。</param>
      <typeparam name="T">此方法傳回的類型。</typeparam>
      <exception cref="T:System.ArgumentException">如果空間不是有效的空間則擲回。有效的空間為 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>使用指定的識別和資料模型傳回項目。</summary>
      <returns>符合指定資料模型中的指定識別的項目。</returns>
      <param name="identity">項目的識別。</param>
      <param name="dataSpace">要在其中搜尋項目的概念模型。</param>
      <typeparam name="T">此方法傳回的類型。</typeparam>
      <exception cref="T:System.ArgumentException">如果空間不是有效的空間則擲回。有效的空間為 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItemCollection(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>取得 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 項目。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 項目。</returns>
      <param name="dataSpace">要從其中擷取項目的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataSpace" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItems(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>取得指定資料模型中的所有項目。</summary>
      <returns>類型 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的集合，其中包含指定資料模型中的所有項目。</returns>
      <param name="dataSpace">需要項目清單的概念模型。</param>
      <exception cref="T:System.ArgumentException">如果空間不是有效的空間則擲回。有效的空間為 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItems``1(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>取得指定資料模型中的所有項目。</summary>
      <returns>類型 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的集合，其中包含指定資料模型中的所有項目。</returns>
      <param name="dataSpace">需要項目清單的概念模型。</param>
      <typeparam name="T">此方法傳回的類型。</typeparam>
      <exception cref="T:System.ArgumentException">如果空間不是有效的空間則擲回。有效的空間為 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 物件，此物件表示符合參數 edmSpaceType 所提供類型的物件空間類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 物件，表示物件空間類型。如果沒有符合的類型，此方法會傳回 null。</returns>
      <param name="edmSpaceType">表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 物件，此物件表示符合參數 edmSpaceType 所提供類型的物件空間類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 物件，表示物件空間類型。如果沒有符合的類型，此方法會傳回 null。</returns>
      <param name="edmSpaceType">表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetPrimitiveTypes(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>傳回指定資料模型中的基本類型清單。</summary>
      <returns>類型 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的集合，其中包含指定資料模型中的所有基本類型。</returns>
      <param name="dataSpace">需要基本類型清單的資料模型。</param>
      <exception cref="T:System.ArgumentException">如果空間不是有效的空間則擲回。有效的空間為 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetRelevantMembersForUpdate(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase,System.Boolean)">
      <summary>傳回所指定 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> / <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> 的成員，修改實體時需要這些成員的原始值。</summary>
      <returns>需要其原始值的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" />。</returns>
      <param name="entitySet">屬於 C-Space 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />。</param>
      <param name="entityType">參與指定之 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />。</param>
      <param name="partialUpdateSupported">如果實體可部分更新則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetRequiredOriginalValueMembers(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase)">
      <summary>從實體集和實體類型取得原始值成員。</summary>
      <returns>實體集和實體類型中的原始值成員。</returns>
      <param name="entitySet">要從中擷取原始值的實體集。</param>
      <param name="entityType">要擷取原始值的實體類型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>使用指定的類型名稱、命名空間名稱和資料模型傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件。</returns>
      <param name="name">類型的名稱。</param>
      <param name="namespaceName">類型的命名空間。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
      <param name="dataSpace">要在其中搜尋類型的概念模型。</param>
      <exception cref="T:System.ArgumentException">如果空間不是有效的空間則擲回。有效的空間為 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>使用指定的類型名稱、命名空間名稱和資料模型傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件，表示符合指定資料模型中的指定類型名稱和命名空間名稱的類型。如果沒有符合的類型，此方法會傳回 null。</returns>
      <param name="name">類型的名稱。</param>
      <param name="namespaceName">類型的命名空間。</param>
      <param name="dataSpace">要在其中搜尋類型的概念模型。</param>
      <exception cref="T:System.ArgumentException">如果空間不是有效的空間則擲回。有效的空間為 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>從指定的組件 (Assembly) 載入中繼資料。</summary>
      <param name="assembly">會從其載入中繼資料的組件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly,System.Action{System.String})">
      <summary>從指定的組件 (Assembly) 載入中繼資料。</summary>
      <param name="assembly">會從其載入中繼資料的組件。</param>
      <param name="logLoadMessage">記錄載入訊息的委派。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.MaximumEdmVersionSupported">
      <summary>執行階段即將支援的最大 EDM 版本。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.RegisterItemCollection(System.Data.Entity.Core.Metadata.Edm.ItemCollection)">
      <summary>將項目集合註冊到每個相關聯的資料模型。</summary>
      <param name="collection">需要裝滿的輸出參數集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Data.Entity.Core.Metadata.Edm.EnumType@)">
      <summary>透過 out 參數 edmSpaceType 傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 物件，此物件表示符合參數 objectSpaceType 所提供類型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />。</summary>
      <returns>true 表示成功，false 則表示失敗。</returns>
      <param name="objectSpaceType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 物件，表示物件空間類型。</param>
      <param name="edmSpaceType">此方法傳回時，包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 物件，此物件代表 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />。此參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Data.Entity.Core.Metadata.Edm.StructuralType@)">
      <summary>透過 out 參數 edmSpaceType 傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 物件，此物件表示符合參數 objectSpaceType 所提供類型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />。</summary>
      <returns>如果有符合搜尋準則的類型，則為 true，否則為 false。</returns>
      <param name="objectSpaceType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 物件，表示物件空間類型。</param>
      <param name="edmSpaceType">此方法傳回時，包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 物件，此物件代表 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />。此參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>使用指定的實體容器名稱和資料模型傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 物件。</summary>
      <returns>如果有符合搜尋準則的實體容器，則為 true，否則為 false。</returns>
      <param name="name">實體容器的名稱。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
      <param name="dataSpace">要在其中搜尋實體容器的概念模型。</param>
      <param name="entityContainer">在此方法傳回時會包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 物件。如果沒有實體容器，此輸出參數會包含 null，否則會傳回第一個實體容器。此參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>使用指定的實體容器名稱和資料模型傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 物件。</summary>
      <returns>如果有符合搜尋準則的實體容器，則為 true，否則為 false。</returns>
      <param name="name">實體容器的名稱。</param>
      <param name="dataSpace">要在其中搜尋實體容器的概念模型。</param>
      <param name="entityContainer">在此方法傳回時會包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 物件。如果沒有實體容器，此輸出參數會包含 null，否則會傳回第一個實體容器。此參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,``0@)">
      <summary>使用指定的識別和資料模型傳回項目。</summary>
      <returns>如果有符合搜尋準則的項目，則為 true，否則為 false。</returns>
      <param name="identity">要在其中搜尋項目的概念模型。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
      <param name="dataSpace">要在其中搜尋項目的概念模型。</param>
      <param name="item">在此方法傳回時會包含 <see cref="T:System.Data.Metadata.Edm.GlobalIem" /> 物件。此參數會以未初始化的狀態傳遞。</param>
      <typeparam name="T">此方法傳回的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,``0@)">
      <summary>使用指定的識別和資料模型傳回項目。</summary>
      <returns>如果有符合搜尋準則的項目，則為 true，否則為 false。</returns>
      <param name="identity">要在其中搜尋項目的概念模型。</param>
      <param name="space">要在其中搜尋項目的概念模型。</param>
      <param name="item">在此方法傳回時會包含 <see cref="T:System.Data.Metadata.Edm.GlobalIem" /> 物件。此參數會以未初始化的狀態傳遞。</param>
      <typeparam name="T">此方法傳回的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItemCollection(System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.ItemCollection@)">
      <summary>測試擷取 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />。</summary>
      <returns>如果擷取成功則為 true，否則為 false。</returns>
      <param name="dataSpace">要從中嘗試擷取 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataSpace" />。</param>
      <param name="collection">當此方法傳回時，會包含項目集合。此參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Data.Entity.Core.Metadata.Edm.EnumType@)">
      <summary>透過 out 參數 objectSpaceType 傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 物件，此物件表示符合參數 edmSpaceType 所提供 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 的類型。</summary>
      <returns>如果有符合搜尋準則的類型，則為 true，否則為 false。</returns>
      <param name="edmSpaceType">表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 物件。</param>
      <param name="objectSpaceType">當此方法傳回時，會包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 物件，此物件代表物件空間類型。此參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Data.Entity.Core.Metadata.Edm.StructuralType@)">
      <summary>透過 out 參數 objectSpaceType 傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 物件，此物件表示符合參數 edmSpaceType 所提供 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 的類型。</summary>
      <returns>如果有符合搜尋準則的類型，則為 true，否則為 false。</returns>
      <param name="edmSpaceType">表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 物件。</param>
      <param name="objectSpaceType">當此方法傳回時，會包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 物件，此物件代表物件空間類型。此參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>使用指定的類型名稱、命名空間名稱和資料模型傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件。</summary>
      <returns>如果有符合搜尋準則的類型，則為 true，否則為 false。</returns>
      <param name="name">類型的名稱。</param>
      <param name="namespaceName">類型的命名空間。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
      <param name="dataSpace">要在其中搜尋類型的概念模型。</param>
      <param name="type">在此方法傳回時會包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件。此參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>使用指定的類型名稱、命名空間名稱和資料模型傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件。</summary>
      <returns>如果有符合搜尋準則的類型，則為 true，否則為 false。</returns>
      <param name="name">類型的名稱。</param>
      <param name="namespaceName">類型的命名空間。</param>
      <param name="dataSpace">要在其中搜尋類型的概念模型。</param>
      <param name="type">在此方法傳回時會包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件。此參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty">
      <summary>表示 edm 導覽屬性類別</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty" /> 的內建類型種類。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>從指定的參數建立 NavigationProperty 執行個體。</summary>
      <returns>新建立的 NavigationProperty 執行個體。</returns>
      <param name="name">導覽屬性的名稱。</param>
      <param name="typeUsage">指定導覽屬性類型及其 Facet。</param>
      <param name="relationshipType">導覽的關聯性類型。</param>
      <param name="from">導覽中的來源 End 成員。</param>
      <param name="to">導覽中的目標 End 成員。</param>
      <param name="metadataProperties">導覽屬性的中繼資料屬性。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.FromEndMember">
      <summary>取得此導覽的 "from" 關聯性端點成員。</summary>
      <returns>此導覽的 "from" 關聯性端點成員。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.GetDependentProperties">
      <summary>只要指定的導覽屬性位於參考限制式的相依端點上，則傳回外部索引鍵屬性。否則，傳回空集合。我們會依照主體端點索引鍵屬性的順序傳回成員。</summary>
      <returns>外部索引鍵屬性的集合。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.RelationshipType">
      <summary>取得此導覽屬性要在其上作業的關聯性類型。</summary>
      <returns>此導覽屬性要在其上作業的關聯性類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.ToEndMember">
      <summary>取得此導覽的 "to" 關聯性端點成員。</summary>
      <returns>此導覽的 "to" 關聯性端點成員。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection">
      <summary>表示物件層之項目集合的類別。實際維護集合的大部分實作是 ItemCollection 所完成</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>此方法會傳回所指定 OSpace 類型引數的基礎 CLR 類型。如果參數的 DataSpace 不是 OSpace，則會擲回 ArgumentException。</summary>
      <returns>OSpace 引數的 CLR 類型。</returns>
      <param name="objectSpaceType">要查閱的 OSpace 類型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>傳回 CLR 類型，此類型對應到由 objectSpaceType 參數所提供的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />。</summary>
      <returns>OSpace 引數的 CLR 類型。</returns>
      <param name="objectSpaceType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />，表示物件空間類型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetItems``1">
      <summary>從此項目集合傳回指定類型的所有項目。</summary>
      <returns>類型 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的集合，其中包含指定類型的所有項目。</returns>
      <typeparam name="T">此方法傳回的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetPrimitiveTypes">
      <summary>傳回基本類型物件的集合。</summary>
      <returns>基本類型物件的集合。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>從指定的組件 (Assembly) 載入中繼資料。</summary>
      <param name="assembly">會從其載入中繼資料的組件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Entity.Core.Metadata.Edm.EdmItemCollection)">
      <summary>從指定的組件載入中繼資料。</summary>
      <param name="assembly">會從其載入中繼資料的組件。</param>
      <param name="edmItemCollection">O 空間中繼資料的 EDM 中繼資料來源。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Action{System.String})">
      <summary>從指定的組件 (Assembly) 載入中繼資料。</summary>
      <param name="assembly">會從其載入中繼資料的組件。</param>
      <param name="edmItemCollection">O 空間中繼資料的 EDM 中繼資料來源。</param>
      <param name="logLoadMessage">將記錄訊息傳送至其中的目標委派。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Type@)">
      <summary>傳回所指定 OSpace 列舉類型引數的基礎 CLR 類型。如果參數的 DataSpace 不是 OSpace，此方法會傳回 false，並將 out 參數設定為 null。</summary>
      <returns>true 表示成功，false 則表示失敗</returns>
      <param name="objectSpaceType">要查詢的 OSpace 列舉類型</param>
      <param name="clrType">OSpace 引數的 CLR 列舉類型</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Type@)">
      <summary>傳回 CLR 類型，此類型對應到由 objectSpaceType 參數所提供的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />。</summary>
      <returns>如果有符合搜尋準則的類型，則為 true，否則為 false。</returns>
      <param name="objectSpaceType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />，表示物件空間類型。</param>
      <param name="clrType">CLR 類型。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.OperationAction">
      <summary>表示刪除作業的可能動作清單</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.OperationAction.Cascade">
      <summary>與其他結尾重疊</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.OperationAction.None">
      <summary>不執行任何動作</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode">
      <summary>定義參數模式的列舉</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.In">
      <summary>In 參數</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.InOut">
      <summary>in 和 out 參數</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.Out">
      <summary>Out 參數</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.ReturnValue">
      <summary>Return 參數</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics">
      <summary>列舉類型，可定義用來解決函式多載的類型語意。這些旗標會在每個函式定義的提供者資訊清單中定義。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.AllowImplicitConversion">
      <summary>允許在指定和型式引數類型 (預設) 之間的隱含轉換。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.AllowImplicitPromotion">
      <summary>允許在指定和型式引數類型之間的類型提升。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.ExactMatchOnly">
      <summary>僅使用嚴格等價。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType">
      <summary>表示基本類型的類別</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 的內建類型種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.ClrEquivalentType">
      <summary>傳回與此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 對等的 Common Language Runtime (CLR) 類型。請注意，<see cref="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.ClrEquivalentType" /> 屬性永遠會傳回非可為 Null 類型的值。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示與此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 對等的 Common Language Runtime (CLR) 類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.FacetDescriptions">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 的 Facet 描述清單。</summary>
      <returns>類型 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的集合，其中包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 的 Facet 描述清單。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType">
      <summary>傳回與此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 對等的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件，與此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 對等。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 的對等 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件，它是指定之 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 的對等用法。</returns>
      <param name="primitiveTypeKind">類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveTypes">
      <summary>傳回基本類型的清單。</summary>
      <returns>類型 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的集合，其中包含基本類型的清單。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.PrimitiveTypeKind">
      <summary>取得 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind" /> 列舉值，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 的基本類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind" /> 列舉值，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 的基本類型。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind">
      <summary>EDM 所定義的基本類型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Binary">
      <summary>Binary 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Boolean">
      <summary>Boolean 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Byte">
      <summary>Byte 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.DateTime">
      <summary>DateTime 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.DateTimeOffset">
      <summary>DateTimeOffset 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Decimal">
      <summary>Decimal 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Double">
      <summary>Double 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Geography">
      <summary>Geography 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyCollection">
      <summary>Geographic collection 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyLineString">
      <summary>Geographic linestring 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiLineString">
      <summary>Geographic multi-linestring 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPoint">
      <summary>Geographic multi-point 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPolygon">
      <summary>Geographic multi-polygon 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyPoint">
      <summary>Geographic point 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyPolygon">
      <summary>Geographic polygon 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Geometry">
      <summary>Geometry 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryCollection">
      <summary>Geometric collection 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryLineString">
      <summary>Geometric linestring 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiLineString">
      <summary>Geometric multi-linestring 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPoint">
      <summary>Geometric multi-point 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPolygon">
      <summary>Geometric multi-polygon 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryPoint">
      <summary>Geometric point 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryPolygon">
      <summary>Geometric polygon 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Guid">
      <summary>Guid 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int16">
      <summary>Int16 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int32">
      <summary>Int32 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int64">
      <summary>Int64 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.SByte">
      <summary>SByte 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Single">
      <summary>Single 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.String">
      <summary>String 類型種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Time">
      <summary>Time 類型種類</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind">
      <summary>指定概念模型中的項目屬性類型。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PropertyKind.Extended">
      <summary>列舉成員，表示項目屬性為 Extended。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PropertyKind.System">
      <summary>列舉成員，表示項目屬性為 System</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1">
      <summary>表示 MetadataCollection 周圍之唯讀包裝函式的類別</summary>
      <typeparam name="T">此集合中項目的類型</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Contains(System.String)">
      <summary>判斷集合是否包含具有指定識別的項目。</summary>
      <returns>如果集合包含要搜尋的項目則為 true，否則為 false。預設為 false。</returns>
      <param name="identity">項目的識別。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.GetEnumerator">
      <summary>傳回可逐一查看此集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" />，可用來逐一查看此 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.GetValue(System.String,System.Boolean)">
      <summary>使用指定的識別從此集合擷取項目。</summary>
      <returns>集合的項目。</returns>
      <param name="identity">所搜尋之項目的識別。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.IndexOf(`0)">
      <summary>傳回集合中指定值的索引。</summary>
      <returns>集合中指定值的索引。</returns>
      <param name="value">要搜尋的值。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.IsReadOnly">
      <summary>取得表示此集合是否為唯讀的值。</summary>
      <returns>如果此集合為唯讀，則傳回 true；否則傳回 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Item(System.String)">
      <summary>使用指定的識別從此集合取得項目。</summary>
      <returns>集合的項目。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.TryGetValue(System.String,System.Boolean,`0@)">
      <summary>使用指定的識別從此集合擷取項目。</summary>
      <returns>如果有符合搜尋準則的項目，則為 true，否則為 false。</returns>
      <param name="identity">所搜尋之項目的識別。</param>
      <param name="ignoreCase">若要執行不區分大小寫的搜尋，則為 true，否則為 false。</param>
      <param name="item">在此方法傳回時，此輸出參數會包含集合中的項目。如果沒有符合的項目，此輸出參數會包含 null。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator">
      <summary>MetadataCollection 的列舉值</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Current">
      <summary>取得目前位置的成員。</summary>
      <returns>目前位置的成員。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Dispose">
      <summary>處置此列舉值。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.MoveNext">
      <summary>移到類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" /> 集合中的下一個成員。</summary>
      <returns>如果列舉值移到類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.EnumeratortaCollection" /> 的集合中即為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Reset">
      <summary>將列舉值置於類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 的集合中第一個位置之前。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>取得目前位置的成員</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint">
      <summary>此類別表示兩個實體間指定其關聯性之「目的」端和「來源」端的參考限制式。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.#ctor(System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>建構關聯性的新限制式</summary>
      <param name="fromRole">產生關聯性的來源角色</param>
      <param name="toRole">關聯性所連結/做為目標的角色</param>
      <param name="fromProperties">目標角色的實體類型上參與限制式的屬性</param>
      <param name="toProperties">來源角色的實體類型上參與限制式的屬性</param>
      <exception cref="T:System.ArgumentNullException">如果有任何引數為 null，則為引數 Null 例外狀況</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> 的內建類型種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromProperties">
      <summary>取得其上定義此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> 的 "from role" 的屬性清單。</summary>
      <returns>類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 的集合，此集合包含其上定義此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> 的 "from role" 的屬性清單。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole">
      <summary>取得參與此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> 的 "from role"。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" /> 物件，表示參與此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> 的 "from role"。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToProperties">
      <summary>取得其上定義此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> 的 "to role" 的屬性清單。</summary>
      <returns>類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 的集合，此集合包含其上定義此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> 的 “to role” 的屬性清單。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole">
      <summary>取得參與此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> 的 “to role”。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" /> 物件，表示參與此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> 的 "to role"。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToString">
      <summary>傳回 <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole" /> 和 <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole" /> 名稱的組合。</summary>
      <returns>
        <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole" /> 和 <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole" /> 名稱的組合。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RefType">
      <summary>表示參考類型的類別。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RefType.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> 的內建類型種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RefType.ElementType">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> 所參考的實體類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> 所參考的實體類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RefType.Equals(System.Object)">
      <summary>判斷指定物件是否等於目前的執行個體。</summary>
      <returns>如果指定的物件等於目前的執行個體，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RefType.GetHashCode">
      <summary>傳回目前執行個體的雜湊碼。</summary>
      <returns>目前執行個體的雜湊碼。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember">
      <summary>初始化 RelationshipEndMember 類別的新執行個體</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.DeleteBehavior">
      <summary>取得此關聯性端點成員的作業行為。</summary>
      <returns>其中一個 <see cref="T:System.Data.Entity.Core.Metadata.Edm.OperationAction" /> 值。預設為 <see cref="P:System.Data.Entity.Core.Metadata.Edm.OperationAction.None" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.GetEntityType">
      <summary>存取關聯中 EndMember 的 EntityType。</summary>
      <returns>關聯中 EndMember 的 EntityType。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.RelationshipMultiplicity">
      <summary>取得此關聯性端點成員的重數。</summary>
      <returns>其中一個 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity">
      <summary>表示有關關聯性類型之 End 的多重性資訊。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many">
      <summary>下限為零，上限為 null</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.One">
      <summary>下限和上限都為一</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne">
      <summary>下限為零，上限為一</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet">
      <summary>表示關聯性集合的類別</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipSet.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 的內建類型種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipSet.ElementType">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 的關聯性 (Relationship) 類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipType" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 的關聯性類型。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipType">
      <summary>表示關聯性類型</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipType.RelationshipEndMembers">
      <summary>取得此關聯性類型的端點清單。</summary>
      <returns>類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 的集合，其中包含此關聯性類型的端點清單。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RowType">
      <summary>表示 Edm 資料列類型</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> 的內建類型種類。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RowType.Create(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>建構 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> 物件的 Factory 方法。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> 物件的新唯讀執行個體。</returns>
      <param name="properties">資料列類型物件的屬性。</param>
      <param name="metadataProperties">將加入至函式的中繼資料屬性。可以是 null。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.DeclaredProperties">
      <summary>取得目前類型所定義之屬性的集合。</summary>
      <returns>目前類型所定義之屬性的集合。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.Properties">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> 的屬性清單。</summary>
      <returns>類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 的集合，其中包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> 的屬性清單。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.SimpleType">
      <summary>表示簡單類型的類別</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer">
      <summary>提供將 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> 之儲存 (資料庫) 區段序列化為 XML 的方法。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer" /> 類別的新執行個體。</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.OnError">
      <summary>在序列化模型遇到錯誤時發生。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.String,System.String,System.String,System.Xml.XmlWriter,System.Boolean)">
      <summary>將 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> 序列化至 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <returns>若模型可以序列化，則為 true，否則為 false。</returns>
      <param name="dbDatabase">要序列化的 EdmModel。</param>
      <param name="namespaceName">Schema 項目的命名空間名稱。</param>
      <param name="provider">Schema 項目的提供者資訊。</param>
      <param name="providerManifestToken">Schema 項目的 ProviderManifestToken 資訊。</param>
      <param name="xmlWriter">序列化的目標 XmlWriter。</param>
      <param name="serializeDefaultNullability">此值表示當可為 null 的屬性設定為預設值時，是否要序列化這些屬性。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.String,System.String,System.Xml.XmlWriter,System.Boolean)">
      <summary>將 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> 序列化至 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <returns>若模型可以序列化，則為 true，否則為 false。</returns>
      <param name="dbDatabase">要序列化的 EdmModel。</param>
      <param name="provider">Schema 項目的提供者資訊。</param>
      <param name="providerManifestToken">Schema 項目的 ProviderManifestToken 資訊。</param>
      <param name="xmlWriter">序列化的目標 XmlWriter。</param>
      <param name="serializeDefaultNullability">此值表示當可為 null 的屬性設定為預設值時，是否要序列化這些屬性。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern">
      <summary>伺服器所產生屬性的模式。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.Computed">
      <summary>在 INSERT 和 UPDATE 時都會產生值。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.Identity">
      <summary>在 INSERT 時會產生值，並在更新時保持不變。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.None">
      <summary>不是伺服器產生的屬性。這是預設值。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection">
      <summary>表示存放區空間中項目集合的類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>使用指定的 XMLReader，初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 類別的新執行個體。</summary>
      <param name="xmlReaders">用來建立中繼資料的 XMLReader。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmModel)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 類別的新執行個體。</summary>
      <param name="model">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 的模型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.String[])">
      <summary>使用指定的檔案路徑，初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 類別的新執行個體。</summary>
      <param name="filePaths">用來建立中繼資料的檔案路徑。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.Create(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 的 Factory 方法。</summary>
      <returns>如果沒有發生錯誤，則為 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 執行個體。否則為 null。</returns>
      <param name="xmlReaders">要載入的 SSDL 成品。不得為 null。</param>
      <param name="filePaths">SSDL 成品的路徑。於錯誤訊息中使用。可為 null，在這類情況下，XmlReader 的基底 URI 將做為路徑使用。</param>
      <param name="resolver">自訂解析程式。目前用來解析 DbProviderServices 實作。如果為 null，則會使用預設解析程式。</param>
      <param name="errors">載入時所發生錯誤的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.GetPrimitiveTypes">
      <summary>傳回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 物件的集合。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 物件，表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 物件的集合。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderFactory">
      <summary>取得 StoreItemCollection 的提供者 Factory。</summary>
      <returns>StoreItemCollection 的提供者 Factory。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderInvariantName">
      <summary>取得 StoreItemCollection 的非變異名稱。</summary>
      <returns>StoreItemCollection 的非變異名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderManifest">
      <summary>取得 StoreItemCollection 的提供者資訊清單。</summary>
      <returns>StoreItemCollection 的提供者資訊清單。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderManifestToken">
      <summary>取得 StoreItemCollection 的資訊清單語彙基元。</summary>
      <returns>StoreItemCollection 的資訊清單語彙基元。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.StoreSchemaVersion">
      <summary>取得此集合的存放結構版本。</summary>
      <returns>此集合的存放結構版本。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StructuralType">
      <summary>表示結構化類型</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StructuralType.AddMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>將成員加入至此類型</summary>
      <param name="member">要加入的成員</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StructuralType.Members">
      <summary>取得此類型的屬性清單。</summary>
      <returns>類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 的集合，其中包含此類型的成員集。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StructuralType.RemoveMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>從此類型中移除成員。</summary>
      <param name="member">要移除的成員。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage">
      <summary>表示項目之類型資訊的類別</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.BuiltInTypeKind">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 的內建類型種類。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 的內建類型種類。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.Create(System.Data.Entity.Core.Metadata.Edm.EdmType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.Facet})">
      <summary>建立具有指定的 EdmType 和 Facet 之 TypeUsage 的 Factory 方法</summary>
      <returns>新的 TypeUsage 執行個體</returns>
      <param name="edmType">要為其建立類型使用情況的 EdmType</param>
      <param name="facets">要複製到新 TypeUsage 中的 Facet</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean)">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件，以使用指定的 Facet 值來描述二進位類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件，使用指定的 Facet 值來描述二進位類型。</returns>
      <param name="primitiveType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />，會針對其建立 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件。</param>
      <param name="isFixedLength">如果要將二進位類型的長度設定為固定，則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Int32)">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件，以使用指定的 Facet 值來描述二進位類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件，使用指定的 Facet 值來描述二進位類型。</returns>
      <param name="primitiveType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />，會針對其建立 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件。</param>
      <param name="isFixedLength">如果要將二進位類型的長度設定為固定，則為 true，否則為 false。</param>
      <param name="maxLength">二進位類型的最大長度。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDateTimeOffsetTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>建立 <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> 物件，其類型為參數描述的類型。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> 物件。</returns>
      <param name="primitiveType">可定義位移之度量單位的簡單類型。</param>
      <param name="precision">
        <see cref="T:System." /> DateTimeOffset 的資料粒度程度，以秒數的分數為單位 (視支援的小數位數數目而定)。例如，有效位數為 3 表示支援的資料粒度為毫秒。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDateTimeTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>建立 <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> 物件，其類型為參數描述的類型。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> 物件。</returns>
      <param name="primitiveType">可定義 <see cref="T:System." /> DateTime 物件之度量單位的簡單類型。</param>
      <param name="precision">
        <see cref="T:System." /> DateTimeOffset 的資料粒度程度，以秒數的分數為單位 (視支援的小數位數數目而定)。例如，有效位數為 3 表示支援的資料粒度為毫秒。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType)">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件，以描述具有無限制的精確度和小數點位數 Facet 值的十進位類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件，描述具有無限制的精確度及小數點位數 Facet 值的十進位類型。</returns>
      <param name="primitiveType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />，會針對其建立 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Byte,System.Byte)">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件，以使用指定的 Facet 值來描述十進位類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件，使用指定的 Facet 值來描述十進位類型。</returns>
      <param name="primitiveType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />，會針對其建立 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件。</param>
      <param name="precision">如同類型 <see cref="T:System.Byte" /> 之十進位類型的整數位數。</param>
      <param name="scale">如同類型 <see cref="T:System.Byte" /> 之十進位類型的小數位數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDefaultTypeUsage(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>使用指定的概念模型類型，建立 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件，具有指定的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 預設 Facet 值。</returns>
      <param name="edmType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />，會針對其建立 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean)">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件，以使用指定的 Facet 值和無限制的 MaxLength 來描述字串類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件，使用指定的 Facet 值和無限制的 MaxLength 來描述字串類型。</returns>
      <param name="primitiveType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />，會針對其建立 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件。</param>
      <param name="isUnicode">如果要將字串類型的長度設定為固定，則為 Unicode，則為 true，否則為 false。</param>
      <param name="isFixedLength">如果要將字串類型的長度設定為固定，則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean,System.Int32)">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件，以使用指定的 Facet 值來描述字串類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件，使用指定的 Facet 值來描述字串類型。</returns>
      <param name="primitiveType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />，會針對其建立 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件。</param>
      <param name="isUnicode">如果要將字串類型的長度設定為固定，則為 Unicode，則為 true，否則為 false。</param>
      <param name="isFixedLength">如果要將字串類型的長度設定為固定，則為 Unicode，則為 true，否則為 false。</param>
      <param name="maxLength">如果要將字串類型的長度設定為固定，則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateTimeTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>建立 <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> 物件，其類型為參數描述的類型。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> 物件。</returns>
      <param name="primitiveType">可定義 <see cref="T:System." /> DateTime 物件之度量單位的簡單類型。</param>
      <param name="precision">
        <see cref="T:System." /> DateTimeOffset 的資料粒度程度，以秒數的分數為單位 (視支援的小數位數數目而定)。例如，有效位數為 3 表示支援的資料粒度為毫秒。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.EdmType">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 所描述的類型資訊。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 物件，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 所描述的類型資訊。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.Facets">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 所描述類型的 Facet 清單。</summary>
      <returns>類型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 的集合，其中包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 所描述類型的 Facet 清單。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.IsSubtypeOf(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>檢查此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 是否為指定的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 的子類型。</summary>
      <returns>如果此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 是指定的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 的子類型，則為 true，否則為 false。</returns>
      <param name="typeUsage">要檢查的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 物件。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.ModelTypeUsage">
      <summary>傳回提供者類型的 Model 類型使用情況</summary>
      <returns>Model (CSpace) 類型使用情況</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.ToString">
      <summary>傳回此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 所描述類型的完整名稱。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 描述為字串之類型的完整名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.CompiledQuery">
      <summary>快取 ELinq 查詢</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
      <summary>建立新委派以表示編譯的 LINQ to Entities 查詢。</summary>
      <returns>
        <see cref="T:System.Func`10" />，表示編譯的 LINQ to Entities 查詢的泛型委派。</returns>
      <param name="query">要編譯的 Lambda 運算式。</param>
      <typeparam name="TArg0">衍生自 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的類型。</typeparam>
      <typeparam name="TArg1">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg1 必須為基本類型。</typeparam>
      <typeparam name="TArg2">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg2 必須為基本類型。</typeparam>
      <typeparam name="TArg3">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg3 必須為基本類型。</typeparam>
      <typeparam name="TArg4">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg4 必須為基本類型。</typeparam>
      <typeparam name="TArg5">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg5 必須為基本類型。</typeparam>
      <typeparam name="TArg6">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg6 必須為基本類型。</typeparam>
      <typeparam name="TArg7">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg7 必須為基本類型。</typeparam>
      <typeparam name="TArg8">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg8 必須為基本類型。</typeparam>
      <typeparam name="TResult">查詢結果的類型 T，這些查詢結果是由執行 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})" /> 方法所傳回的委派而傳回。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
      <summary>建立新委派以表示編譯的 LINQ to Entities 查詢。</summary>
      <returns>
        <see cref="T:System.Func`11" />，表示編譯的 LINQ to Entities 查詢的泛型委派。</returns>
      <param name="query">要編譯的 Lambda 運算式。</param>
      <typeparam name="TArg0">衍生自 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的類型。</typeparam>
      <typeparam name="TArg1">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg1 必須為基本類型。</typeparam>
      <typeparam name="TArg2">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg2 必須為基本類型。</typeparam>
      <typeparam name="TArg3">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg3 必須為基本類型。</typeparam>
      <typeparam name="TArg4">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg4 必須為基本類型。</typeparam>
      <typeparam name="TArg5">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg5 必須為基本類型。</typeparam>
      <typeparam name="TArg6">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg6 必須為基本類型。</typeparam>
      <typeparam name="TArg7">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg7 必須為基本類型。</typeparam>
      <typeparam name="TArg8">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg8 必須為基本類型。</typeparam>
      <typeparam name="TArg9">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg9 必須為基本類型。</typeparam>
      <typeparam name="TResult">查詢結果的類型 T，這些查詢結果是由執行 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})" /> 方法所傳回的委派而傳回。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
      <summary>建立新委派以表示編譯的 LINQ to Entities 查詢。</summary>
      <returns>
        <see cref="T:System.Func`12" />，表示編譯的 LINQ to Entities 查詢的泛型委派。</returns>
      <param name="query">要編譯的 Lambda 運算式。</param>
      <typeparam name="TArg0">衍生自 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的類型。</typeparam>
      <typeparam name="TArg1">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg1 必須為基本類型。</typeparam>
      <typeparam name="TArg2">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg2 必須為基本類型。</typeparam>
      <typeparam name="TArg3">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg3 必須為基本類型。</typeparam>
      <typeparam name="TArg4">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg4 必須為基本類型。</typeparam>
      <typeparam name="TArg5">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg5 必須為基本類型。</typeparam>
      <typeparam name="TArg6">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg6 必須為基本類型。</typeparam>
      <typeparam name="TArg7">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg7 必須為基本類型。</typeparam>
      <typeparam name="TArg8">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg8 必須為基本類型。</typeparam>
      <typeparam name="TArg9">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg9 必須為基本類型。</typeparam>
      <typeparam name="TArg10">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg10 必須為基本類型。</typeparam>
      <typeparam name="TResult">查詢結果的類型 T，這些查詢結果是由執行 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})" /> 方法所傳回的委派而傳回。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
      <summary>建立新委派以表示編譯的 LINQ to Entities 查詢。</summary>
      <returns>
        <see cref="T:System.Func`13" />，表示編譯的 LINQ to Entities 查詢的泛型委派。</returns>
      <param name="query">要編譯的 Lambda 運算式。</param>
      <typeparam name="TArg0">衍生自 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的類型。</typeparam>
      <typeparam name="TArg1">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg1 必須為基本類型。</typeparam>
      <typeparam name="TArg2">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg2 必須為基本類型。</typeparam>
      <typeparam name="TArg3">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg3 必須為基本類型。</typeparam>
      <typeparam name="TArg4">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg4 必須為基本類型。</typeparam>
      <typeparam name="TArg5">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg5 必須為基本類型。</typeparam>
      <typeparam name="TArg6">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg6 必須為基本類型。</typeparam>
      <typeparam name="TArg7">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg7 必須為基本類型。</typeparam>
      <typeparam name="TArg8">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg8 必須為基本類型。</typeparam>
      <typeparam name="TArg9">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg9 必須為基本類型。</typeparam>
      <typeparam name="TArg10">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg10 必須為基本類型。</typeparam>
      <typeparam name="TArg11">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg11 必須為基本類型。</typeparam>
      <typeparam name="TResult">查詢結果的類型 T，這些查詢結果是由執行 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})" /> 方法所傳回的委派而傳回。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
      <summary>建立新委派以表示編譯的 LINQ to Entities 查詢。</summary>
      <returns>
        <see cref="T:System.Func`14" />，表示編譯的 LINQ to Entities 查詢的泛型委派。</returns>
      <param name="query">要編譯的 Lambda 運算式。</param>
      <typeparam name="TArg0">衍生自 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的類型。</typeparam>
      <typeparam name="TArg1">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg1 必須為基本類型。</typeparam>
      <typeparam name="TArg2">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg2 必須為基本類型。</typeparam>
      <typeparam name="TArg3">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg3 必須為基本類型。</typeparam>
      <typeparam name="TArg4">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg4 必須為基本類型。</typeparam>
      <typeparam name="TArg5">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg5 必須為基本類型。</typeparam>
      <typeparam name="TArg6">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg6 必須為基本類型。</typeparam>
      <typeparam name="TArg7">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg7 必須為基本類型。</typeparam>
      <typeparam name="TArg8">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg8 必須為基本類型。</typeparam>
      <typeparam name="TArg9">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg9 必須為基本類型。</typeparam>
      <typeparam name="TArg10">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg10 必須為基本類型。</typeparam>
      <typeparam name="TArg11">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg11 必須為基本類型。</typeparam>
      <typeparam name="TArg12">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg12 必須為基本類型。</typeparam>
      <typeparam name="TResult">查詢結果的類型 T，這些查詢結果是由執行 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})" /> 方法所傳回的委派而傳回。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
      <summary>建立新委派以表示編譯的 LINQ to Entities 查詢。</summary>
      <returns>
        <see cref="T:System.Func`15" />，表示編譯的 LINQ to Entities 查詢的泛型委派。</returns>
      <param name="query">要編譯的 Lambda 運算式。</param>
      <typeparam name="TArg0">衍生自 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的類型。</typeparam>
      <typeparam name="TArg1">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg1 必須為基本類型。</typeparam>
      <typeparam name="TArg2">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg2 必須為基本類型。</typeparam>
      <typeparam name="TArg3">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg3 必須為基本類型。</typeparam>
      <typeparam name="TArg4">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg4 必須為基本類型。</typeparam>
      <typeparam name="TArg5">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg5 必須為基本類型。</typeparam>
      <typeparam name="TArg6">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg6 必須為基本類型。</typeparam>
      <typeparam name="TArg7">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg7 必須為基本類型。</typeparam>
      <typeparam name="TArg8">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg8 必須為基本類型。</typeparam>
      <typeparam name="TArg9">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg9 必須為基本類型。</typeparam>
      <typeparam name="TArg10">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg10 必須為基本類型。</typeparam>
      <typeparam name="TArg11">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg11 必須為基本類型。</typeparam>
      <typeparam name="TArg12">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg12 必須為基本類型。</typeparam>
      <typeparam name="TArg13">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg13 必須為基本類型。</typeparam>
      <typeparam name="TResult">查詢結果的類型 T，這些查詢結果是由執行 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})" /> 方法所傳回的委派而傳回。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
      <summary>建立新委派以表示編譯的 LINQ to Entities 查詢。</summary>
      <returns>
        <see cref="T:System.Func`16" />，表示編譯的 LINQ to Entities 查詢的泛型委派。</returns>
      <param name="query">要編譯的 Lambda 運算式。</param>
      <typeparam name="TArg0">衍生自 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的類型。</typeparam>
      <typeparam name="TArg1">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg1 必須為基本類型。</typeparam>
      <typeparam name="TArg2">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg2 必須為基本類型。</typeparam>
      <typeparam name="TArg3">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg3 必須為基本類型。</typeparam>
      <typeparam name="TArg4">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg4 必須為基本類型。</typeparam>
      <typeparam name="TArg5">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg5 必須為基本類型。</typeparam>
      <typeparam name="TArg6">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg6 必須為基本類型。</typeparam>
      <typeparam name="TArg7">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg7 必須為基本類型。</typeparam>
      <typeparam name="TArg8">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg8 必須為基本類型。</typeparam>
      <typeparam name="TArg9">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg9 必須為基本類型。</typeparam>
      <typeparam name="TArg10">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg10 必須為基本類型。</typeparam>
      <typeparam name="TArg11">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg11 必須為基本類型。</typeparam>
      <typeparam name="TArg12">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg12 必須為基本類型。</typeparam>
      <typeparam name="TArg13">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg13 必須為基本類型。</typeparam>
      <typeparam name="TArg14">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg14 必須為基本類型。</typeparam>
      <typeparam name="TResult">查詢結果的類型 T，這些查詢結果是由執行 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})" /> 方法所傳回的委派而傳回。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
      <summary>建立新委派以表示編譯的 LINQ to Entities 查詢。</summary>
      <returns>
        <see cref="T:System.Func`17" />，表示編譯的 LINQ to Entities 查詢的泛型委派。</returns>
      <param name="query">要編譯的 Lambda 運算式。</param>
      <typeparam name="TArg0">衍生自 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的類型。</typeparam>
      <typeparam name="TArg1">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg1 必須為基本類型。</typeparam>
      <typeparam name="TArg2">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg2 必須為基本類型。</typeparam>
      <typeparam name="TArg3">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg3 必須為基本類型。</typeparam>
      <typeparam name="TArg4">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg4 必須為基本類型。</typeparam>
      <typeparam name="TArg5">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg5 必須為基本類型。</typeparam>
      <typeparam name="TArg6">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg6 必須為基本類型。</typeparam>
      <typeparam name="TArg7">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg7 必須為基本類型。</typeparam>
      <typeparam name="TArg8">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg8 必須為基本類型。</typeparam>
      <typeparam name="TArg9">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg9 必須為基本類型。</typeparam>
      <typeparam name="TArg10">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg10 必須為基本類型。</typeparam>
      <typeparam name="TArg11">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg11 必須為基本類型。</typeparam>
      <typeparam name="TArg12">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg12 必須為基本類型。</typeparam>
      <typeparam name="TArg13">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg13 必須為基本類型。</typeparam>
      <typeparam name="TArg14">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg14 必須為基本類型。</typeparam>
      <typeparam name="TArg15">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg15 必須為基本類型。</typeparam>
      <typeparam name="TResult">查詢結果的類型 T，這些查詢結果是由執行 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})" /> 方法所傳回的委派而傳回。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>建立新委派以表示編譯的 LINQ to Entities 查詢。</summary>
      <returns>
        <see cref="T:System.Func`2" />，表示編譯的 LINQ to Entities 查詢的泛型委派。</returns>
      <param name="query">要編譯的 Lambda 運算式。</param>
      <typeparam name="TArg0">衍生自 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的類型。</typeparam>
      <typeparam name="TResult">查詢結果的類型 T，這些查詢結果是由執行 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法所傳回的委派而傳回。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>建立新委派以表示編譯的 LINQ to Entities 查詢。</summary>
      <returns>
        <see cref="T:System.Func`3" />，表示編譯的 LINQ to Entities 查詢的泛型委派。</returns>
      <param name="query">要編譯的 Lambda 運算式。</param>
      <typeparam name="TArg0">衍生自 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的類型。</typeparam>
      <typeparam name="TArg1">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg1 必須為基本類型。</typeparam>
      <typeparam name="TResult">查詢結果的類型 T，這些查詢結果是由執行 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" /> 方法所傳回的委派而傳回。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
      <summary>建立新委派以表示編譯的 LINQ to Entities 查詢。</summary>
      <returns>
        <see cref="T:System.Func`4" />，表示編譯的 LINQ to Entities 查詢的泛型委派。</returns>
      <param name="query">要編譯的 Lambda 運算式。</param>
      <typeparam name="TArg0">衍生自 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的類型。</typeparam>
      <typeparam name="TArg1">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg1 必須為基本類型。</typeparam>
      <typeparam name="TArg2">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg2 必須為基本類型。</typeparam>
      <typeparam name="TResult">查詢結果的類型 T，這些查詢結果是由執行 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})" /> 方法所傳回的委派而傳回。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
      <summary>建立新委派以表示編譯的 LINQ to Entities 查詢。</summary>
      <returns>
        <see cref="T:System.Func`5" />，表示編譯的 LINQ to Entities 查詢的泛型委派。</returns>
      <param name="query">要編譯的 Lambda 運算式。</param>
      <typeparam name="TArg0">衍生自 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的類型。</typeparam>
      <typeparam name="TArg1">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg1 必須為基本類型。</typeparam>
      <typeparam name="TArg2">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg2 必須為基本類型。</typeparam>
      <typeparam name="TArg3">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg3 必須為基本類型。</typeparam>
      <typeparam name="TResult">查詢結果的類型 T，這些查詢結果是由執行 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})" /> 方法所傳回的委派而傳回。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
      <summary>建立新委派以表示編譯的 LINQ to Entities 查詢。</summary>
      <returns>
        <see cref="T:System.Func`6" />，表示編譯的 LINQ to Entities 查詢的泛型委派。</returns>
      <param name="query">要編譯的 Lambda 運算式。</param>
      <typeparam name="TArg0">衍生自 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的類型。</typeparam>
      <typeparam name="TArg1">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg1 必須為基本類型。</typeparam>
      <typeparam name="TArg2">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg2 必須為基本類型。</typeparam>
      <typeparam name="TArg3">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg3 必須為基本類型。</typeparam>
      <typeparam name="TArg4">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg4 必須為基本類型。</typeparam>
      <typeparam name="TResult">查詢結果的類型 T，這些查詢結果是由執行 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})" /> 方法所傳回的委派而傳回。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
      <summary>建立新委派以表示編譯的 LINQ to Entities 查詢。</summary>
      <returns>
        <see cref="T:System.Func`7" />，表示編譯的 LINQ to Entities 查詢的泛型委派。</returns>
      <param name="query">要編譯的 Lambda 運算式。</param>
      <typeparam name="TArg0">衍生自 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的類型。</typeparam>
      <typeparam name="TArg1">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg1 必須為基本類型。</typeparam>
      <typeparam name="TArg2">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg2 必須為基本類型。</typeparam>
      <typeparam name="TArg3">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg3 必須為基本類型。</typeparam>
      <typeparam name="TArg4">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg4 必須為基本類型。</typeparam>
      <typeparam name="TArg5">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg5 必須為基本類型。</typeparam>
      <typeparam name="TResult">查詢結果的類型 T，這些查詢結果是由執行 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})" /> 方法所傳回的委派而傳回。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
      <summary>建立新委派以表示編譯的 LINQ to Entities 查詢。</summary>
      <returns>
        <see cref="T:System.Func`8" />，表示編譯的 LINQ to Entities 查詢的泛型委派。</returns>
      <param name="query">要編譯的 Lambda 運算式。</param>
      <typeparam name="TArg0">衍生自 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的類型。</typeparam>
      <typeparam name="TArg1">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg1 必須為基本類型。</typeparam>
      <typeparam name="TArg2">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg2 必須為基本類型。</typeparam>
      <typeparam name="TArg3">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg3 必須為基本類型。</typeparam>
      <typeparam name="TArg4">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg4 必須為基本類型。</typeparam>
      <typeparam name="TArg5">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg5 必須為基本類型。</typeparam>
      <typeparam name="TArg6">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg6 必須為基本類型。</typeparam>
      <typeparam name="TResult">查詢結果的類型 T，這些查詢結果是由執行 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})" /> 方法所傳回的委派而傳回。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
      <summary>建立新委派以表示編譯的 LINQ to Entities 查詢。</summary>
      <returns>
        <see cref="T:System.Func`9" />，表示編譯的 LINQ to Entities 查詢的泛型委派。</returns>
      <param name="query">要編譯的 Lambda 運算式。</param>
      <typeparam name="TArg0">衍生自 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的類型。</typeparam>
      <typeparam name="TArg1">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg1 必須為基本類型。</typeparam>
      <typeparam name="TArg2">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg2 必須為基本類型。</typeparam>
      <typeparam name="TArg3">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg3 必須為基本類型。</typeparam>
      <typeparam name="TArg4">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg4 必須為基本類型。</typeparam>
      <typeparam name="TArg5">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg5 必須為基本類型。</typeparam>
      <typeparam name="TArg6">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg6 必須為基本類型。</typeparam>
      <typeparam name="TArg7">表示在執行由此方法所傳回的委派時，所必須傳入的參數類型。TArg7 必須為基本類型。</typeparam>
      <typeparam name="TResult">查詢結果的類型 T，這些查詢結果是由執行 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})" /> 方法所傳回的委派而傳回。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.CurrentValueRecord">
      <summary>目前已指派給實體之屬性的值。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DbUpdatableDataRecord">
      <summary>提供物件資料之原始值的存取權。DbUpdatableDataRecord 會實作允許更新物件原始值的方法。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.DataRecordInfo">
      <summary>取得資料錄資訊。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.DataRecordInfo" /> 物件。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.FieldCount">
      <summary>取得資料錄中的欄位數目。</summary>
      <returns>成為欄位計數的整數值。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetBoolean(System.Int32)">
      <summary>將欄位值擷取成布林值 (Boolean)。</summary>
      <returns>成為布林值的欄位值。</returns>
      <param name="i">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetByte(System.Int32)">
      <summary>將欄位值擷取成位元組。</summary>
      <returns>成為位元組的欄位值。</returns>
      <param name="i">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>將欄位值擷取成位元組陣列。</summary>
      <returns>已複製的位元組數目。</returns>
      <param name="i">欄位的序數。</param>
      <param name="dataIndex">要開始複製資料的索引。</param>
      <param name="buffer">要將資料複製到其中的目的端緩衝區。</param>
      <param name="bufferIndex">目的端緩衝區中開始複製的索引。</param>
      <param name="length">要複製的位元組數目。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetChar(System.Int32)">
      <summary>將欄位值擷取成字元 (Char)。</summary>
      <returns>成為字元的欄位值。</returns>
      <param name="i">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>將欄位值擷取成字元陣列。</summary>
      <returns>複製的字元數目。</returns>
      <param name="i">欄位的序數。</param>
      <param name="dataIndex">要開始複製資料的索引。</param>
      <param name="buffer">要將資料複製到其中的目的端緩衝區。</param>
      <param name="bufferIndex">目的端緩衝區中開始複製的索引。</param>
      <param name="length">要複製的字元數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataReader(System.Int32)">
      <summary>將欄位值擷取成 <see cref="T:System.Common.DbDataReader" />。</summary>
      <returns>成為 <see cref="T:System.Data.Common.DbDataReader" /> 的欄位值。</returns>
      <param name="i">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataRecord(System.Int32)">
      <summary>將欄位值擷取成 <see cref="T:System.Data.Common.DbDataRecord" />。</summary>
      <returns>成為 <see cref="T:System.Data.Common.DbDataRecord" /> 的欄位值。</returns>
      <param name="i">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataTypeName(System.Int32)">
      <summary>擷取欄位資料類型的名稱。</summary>
      <returns>欄位資料類型的名稱。</returns>
      <param name="i">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDateTime(System.Int32)">
      <summary>將欄位值擷取成 <see cref="T:System.DateTime" />。</summary>
      <returns>成為 <see cref="T:System.DateTime" /> 的欄位值。</returns>
      <param name="i">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDbDataReader(System.Int32)">
      <summary>將欄位值擷取成 <see cref="T:System.Common.DbDataReader" />。</summary>
      <returns>成為 <see cref="T:System.Data.Common.DbDataReader" /> 的欄位值。</returns>
      <param name="i">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDecimal(System.Int32)">
      <summary>將欄位值擷取成十進位。</summary>
      <returns>成為十進位的欄位值。</returns>
      <param name="i">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDouble(System.Int32)">
      <summary>將欄位值擷取成雙精度浮點數 (Double)。</summary>
      <returns>成為雙精度浮點數的欄位值。</returns>
      <param name="i">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetFieldType(System.Int32)">
      <summary>擷取欄位的類型。</summary>
      <returns>欄位類型。</returns>
      <param name="i">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetFloat(System.Int32)">
      <summary>將欄位值擷取成浮點數 (Float)。</summary>
      <returns>成為浮點數的欄位值。</returns>
      <param name="i">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetGuid(System.Int32)">
      <summary>將欄位值擷取成 <see cref="T:System.Guid" />。</summary>
      <returns>成為 <see cref="T:System.Guid" /> 的欄位值。</returns>
      <param name="i">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt16(System.Int32)">
      <summary>將欄位值擷取成 <see cref="T:System.Int16" />。</summary>
      <returns>成為 <see cref="T:System.Int16" /> 的欄位值。</returns>
      <param name="i">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt32(System.Int32)">
      <summary>將欄位值擷取成 <see cref="T:System.Int32" />。</summary>
      <returns>成為 <see cref="T:System.Int32" /> 的欄位值。</returns>
      <param name="i">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt64(System.Int32)">
      <summary>將欄位值擷取成 <see cref="T:System.Int64" />。</summary>
      <returns>成為 <see cref="T:System.Int64" /> 的欄位值。</returns>
      <param name="i">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetName(System.Int32)">
      <summary>擷取欄位的名稱。</summary>
      <returns>欄位名稱。</returns>
      <param name="i">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetOrdinal(System.String)">
      <summary>使用欄位的名稱擷取欄位的序數。</summary>
      <returns>欄位的序數。</returns>
      <param name="name">欄位名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetRecordValue(System.Int32)">
      <summary>擷取欄位的值。</summary>
      <returns>欄位值。</returns>
      <param name="ordinal">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetString(System.Int32)">
      <summary>將欄位值擷取成字串。</summary>
      <returns>欄位值。</returns>
      <param name="i">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetValue(System.Int32)">
      <summary>擷取欄位的值。</summary>
      <returns>欄位值。</returns>
      <param name="i">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetValues(System.Object[])">
      <summary>使用目前資料錄的欄位值填入物件陣列。</summary>
      <returns>傳回之欄位值的數目。</returns>
      <param name="values">要儲存欄位值的物件陣列。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.IsDBNull(System.Int32)">
      <summary>傳回指定的欄位是否設定為 <see cref="T:System.DBNull" />。</summary>
      <returns>如果欄位設定為 <see cref="T:System.DBNull" /> 則為 true，否則為 false。</returns>
      <param name="i">欄位的序數。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.Item(System.Int32)">
      <summary>傳回具有所指定欄位序數的值。</summary>
      <returns>具有所指定欄位序數的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.Item(System.String)">
      <summary>取得具有所指定欄位名稱的值。</summary>
      <returns>欄位值。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetBoolean(System.Int32,System.Boolean)">
      <summary>設定記錄中某個欄位的值。</summary>
      <param name="ordinal">欄位的序數。</param>
      <param name="value">欄位的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetByte(System.Int32,System.Byte)">
      <summary>設定記錄中某個欄位的值。</summary>
      <param name="ordinal">欄位的序數。</param>
      <param name="value">欄位的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetChar(System.Int32,System.Char)">
      <summary>設定記錄中某個欄位的值。</summary>
      <param name="ordinal">欄位的序數。</param>
      <param name="value">欄位的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDataRecord(System.Int32,System.Data.IDataRecord)">
      <summary>設定記錄中某個欄位的值。</summary>
      <param name="ordinal">欄位的序數。</param>
      <param name="value">欄位的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDateTime(System.Int32,System.DateTime)">
      <summary>設定記錄中某個欄位的值。</summary>
      <param name="ordinal">欄位的序數。</param>
      <param name="value">欄位的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDBNull(System.Int32)">
      <summary>將欄位設定為 <see cref="T:System.DBNull" /> 值。</summary>
      <param name="ordinal">欄位的序數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDecimal(System.Int32,System.Decimal)">
      <summary>設定記錄中某個欄位的值。</summary>
      <param name="ordinal">欄位的序數。</param>
      <param name="value">欄位的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDouble(System.Int32,System.Double)">
      <summary>設定記錄中某個欄位的值。</summary>
      <param name="ordinal">欄位的序數。</param>
      <param name="value">欄位的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetFloat(System.Int32,System.Single)">
      <summary>設定記錄中某個欄位的值。</summary>
      <param name="ordinal">欄位的序數。</param>
      <param name="value">欄位的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetGuid(System.Int32,System.Guid)">
      <summary>設定記錄中某個欄位的值。</summary>
      <param name="ordinal">欄位的序數。</param>
      <param name="value">欄位的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt16(System.Int32,System.Int16)">
      <summary>設定記錄中某個欄位的值。</summary>
      <param name="ordinal">欄位的序數。</param>
      <param name="value">欄位的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt32(System.Int32,System.Int32)">
      <summary>設定記錄中某個欄位的值。</summary>
      <param name="ordinal">欄位的序數。</param>
      <param name="value">欄位的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt64(System.Int32,System.Int64)">
      <summary>設定記錄中某個欄位的值。</summary>
      <param name="ordinal">欄位的序數。</param>
      <param name="value">欄位的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetRecordValue(System.Int32,System.Object)">
      <summary>設定記錄中某個欄位的值。</summary>
      <param name="ordinal">欄位的序數。</param>
      <param name="value">欄位的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetString(System.Int32,System.String)">
      <summary>設定記錄中某個欄位的值。</summary>
      <param name="ordinal">欄位的序數。</param>
      <param name="value">欄位的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetValue(System.Int32,System.Object)">
      <summary>設定記錄中某個欄位的值。</summary>
      <param name="ordinal">欄位的序數。</param>
      <param name="value">欄位的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetValues(System.Object[])">
      <summary>設定記錄中的欄位值。</summary>
      <returns>已設定的欄位數目。</returns>
      <param name="values">此欄位的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>將欄位值擷取成 <see cref="T:System.Data.IDataReader" />。</summary>
      <returns>成為 <see cref="T:System.Data.IDataReader" /> 的欄位值。</returns>
      <param name="ordinal">欄位的序數。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.EntityFunctions">
      <summary>提供公開 (Expose) EDM 標準函式以用於 <see cref="T:System.Data.Entity.DbContext" /> 或 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> LINQ to Entities 查詢的 Common Language Runtime (CLR) 方法。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddDays 將指定的天數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="dateValue">輸入日期/時間。</param>
      <param name="addValue">要加入的天數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddDays 將指定的天數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="dateValue">輸入日期/時間。</param>
      <param name="addValue">要加入的天數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddHours 將指定的時數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的時數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddHours 將指定的時數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的時數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddHours 將指定的時數加入至時間範圍。</summary>
      <returns>產生的時間範圍。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的時數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMicroseconds 將指定的微秒數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的微秒數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMicroseconds 將指定的微秒數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的微秒數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMicroseconds 將指定的微秒數加入至時間範圍。</summary>
      <returns>產生的時間範圍。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的微秒數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMilliseconds 將指定的毫秒數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的毫秒數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMilliseconds 將指定的毫秒數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的毫秒數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMilliseconds 將指定的毫秒數加入至時間範圍。</summary>
      <returns>產生的時間範圍。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的毫秒數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMinutes 將指定的分鐘數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的分鐘數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMinutes 將指定的分鐘數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的分鐘數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMinutes 將指定的分鐘數加入至時間範圍。</summary>
      <returns>產生的時間範圍。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的分鐘數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMonths 將指定的月數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="dateValue">輸入日期/時間。</param>
      <param name="addValue">要加入的月數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddMonths 將指定的月數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="dateValue">輸入日期/時間。</param>
      <param name="addValue">要加入的月數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddNanoseconds 將指定的奈秒數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的奈秒數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddNanoseconds 將指定的奈秒數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的奈秒數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddNanoseconds 將指定的奈秒數加入至時間範圍。</summary>
      <returns>產生的時間範圍。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的奈秒數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddSeconds 將指定的秒數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的秒數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddSeconds 將指定的秒數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的秒數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddSeconds 將指定的秒數加入至時間範圍。</summary>
      <returns>產生的時間範圍。</returns>
      <param name="timeValue">輸入日期/時間。</param>
      <param name="addValue">要加入的秒數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddYears 將指定的年數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="dateValue">輸入日期/時間。</param>
      <param name="addValue">要加入的年數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 AddYears 將指定的年數加入至日期/時間。</summary>
      <returns>產生的日期/時間。</returns>
      <param name="dateValue">輸入日期/時間。</param>
      <param name="addValue">要加入的年數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AsNonUnicode(System.String)">
      <summary>用於 LINQ to Entities 查詢時，此方法會當做運算子，藉此確保將輸入視為非 Unicode 字串。</summary>
      <returns>視為非 Unicode 字串的輸入字串。</returns>
      <param name="value">輸入字串。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AsUnicode(System.String)">
      <summary>用於 LINQ to Entities 查詢時，此方法會當做運算子，藉此確保將輸入視為 Unicode 字串。</summary>
      <returns>視為 Unicode 字串的輸入字串。</returns>
      <param name="value">輸入字串。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 CreateDateTime 以建立新的 <see cref="T:System.DateTime" /> 物件。</summary>
      <returns>新的日期/時間。</returns>
      <param name="year">年。</param>
      <param name="month">月 (以 1 起始)。</param>
      <param name="day">日 (以 1 起始)。</param>
      <param name="hour">小時。</param>
      <param name="minute">分鐘。</param>
      <param name="second">秒鐘，必要時可包括秒值的小數部分。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 CreateDateTimeOffset 以建立新的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>新的日期/時間。</returns>
      <param name="year">年。</param>
      <param name="month">月 (以 1 起始)。</param>
      <param name="day">日 (以 1 起始)。</param>
      <param name="hour">小時。</param>
      <param name="minute">分鐘。</param>
      <param name="second">秒鐘，必要時可包括秒值的小數部分。</param>
      <param name="timeZoneOffset">新日期的時區位移部分。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 CreateTime 以建立新的 <see cref="T:System.TimeSpan" /> 物件。</summary>
      <returns>新的時間範圍。</returns>
      <param name="hour">小時。</param>
      <param name="minute">分鐘。</param>
      <param name="second">秒鐘，必要時可包括秒值的小數部分。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffDays 以計算兩個日期/時間的相距天數。</summary>
      <returns>第一個和第二個日期/時間的相距天數。</returns>
      <param name="dateValue1">第一個日期/時間。</param>
      <param name="dateValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffDays 以計算兩個日期/時間的相距天數。</summary>
      <returns>第一個和第二個日期/時間的相距天數。</returns>
      <param name="dateValue1">第一個日期/時間。</param>
      <param name="dateValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffHours 以計算兩個日期/時間的相距時數。</summary>
      <returns>第一個和第二個日期/時間的相距時數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffHours 以計算兩個日期/時間的相距時數。</summary>
      <returns>第一個和第二個日期/時間的相距時數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffHours 以計算兩個時間範圍的相距時數。</summary>
      <returns>第一個和第二個時間範圍的相距時數。</returns>
      <param name="timeValue1">第一個時間範圍。</param>
      <param name="timeValue2">第二個時間範圍。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMicroseconds 以計算兩個日期/時間的相距微秒數。</summary>
      <returns>第一個和第二個日期/時間的相距微秒數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMicroseconds 以計算兩個日期/時間的相距微秒數。</summary>
      <returns>第一個和第二個日期/時間的相距微秒數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMicroseconds 以計算兩個時間範圍的相距微秒數。</summary>
      <returns>第一個和第二個時間範圍的相距微秒數。</returns>
      <param name="timeValue1">第一個時間範圍。</param>
      <param name="timeValue2">第二個時間範圍。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMilliseconds 以計算兩個日期/時間的相距毫秒數。</summary>
      <returns>第一個和第二個日期/時間的相距毫秒數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMilliseconds 以計算兩個日期/時間的相距毫秒數。</summary>
      <returns>第一個和第二個日期/時間的相距毫秒數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMilliseconds 以計算兩個時間範圍的相距毫秒數。</summary>
      <returns>第一個和第二個時間範圍的相距毫秒數。</returns>
      <param name="timeValue1">第一個時間範圍。</param>
      <param name="timeValue2">第二個時間範圍。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMinutes 以計算兩個日期/時間的相距分鐘數。</summary>
      <returns>第一個和第二個日期/時間的相距分鐘數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMinutes 以計算兩個日期/時間的相距分鐘數。</summary>
      <returns>第一個和第二個日期/時間的相距分鐘數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMinutes 以計算兩個時間範圍的相距分鐘數。</summary>
      <returns>第一個和第二個時間範圍的相距分鐘數。</returns>
      <param name="timeValue1">第一個時間範圍。</param>
      <param name="timeValue2">第二個時間範圍。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMonths 以計算兩個日期/時間的相距月數。</summary>
      <returns>第一個和第二個日期/時間的相距月數。</returns>
      <param name="dateValue1">第一個日期/時間。</param>
      <param name="dateValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffMonths 以計算兩個日期/時間的相距月數。</summary>
      <returns>第一個和第二個日期/時間的相距月數。</returns>
      <param name="dateValue1">第一個日期/時間。</param>
      <param name="dateValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffNanoseconds 以計算兩個日期/時間的相距奈秒數。</summary>
      <returns>第一個和第二個日期/時間的相距奈秒數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffNanoseconds 以計算兩個日期/時間的相距奈秒數。</summary>
      <returns>第一個和第二個日期/時間的相距奈秒數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffNanoseconds 以計算兩個時間範圍的相距奈秒數。</summary>
      <returns>第一個和第二個時間範圍的相距奈秒數。</returns>
      <param name="timeValue1">第一個時間範圍。</param>
      <param name="timeValue2">第二個時間範圍。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffSeconds 以計算兩個日期/時間的相距秒數。</summary>
      <returns>第一個和第二個日期/時間的相距秒數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffSeconds 以計算兩個日期/時間的相距秒數。</summary>
      <returns>第一個和第二個日期/時間的相距秒數。</returns>
      <param name="timeValue1">第一個日期/時間。</param>
      <param name="timeValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffSeconds 以計算兩個時間範圍的相距秒數。</summary>
      <returns>第一個和第二個時間範圍的相距秒數。</returns>
      <param name="timeValue1">第一個時間範圍。</param>
      <param name="timeValue2">第二個時間範圍。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffYears 以計算兩個日期/時間的相距年數。</summary>
      <returns>第一個和第二個日期/時間的相距年數。</returns>
      <param name="dateValue1">第一個日期/時間。</param>
      <param name="dateValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 DiffYears 以計算兩個日期/時間的相距年數。</summary>
      <returns>第一個和第二個日期/時間的相距年數。</returns>
      <param name="dateValue1">第一個日期/時間。</param>
      <param name="dateValue2">第二個日期/時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 GetTotalOffsetMinutes 以傳回指定的日期/時間與 UTC 相差的分鐘數。此值通常介於 +780 到 -780 之間 (+ 或 - 13 小時)。</summary>
      <returns>輸入與 UTC 之間的位移。</returns>
      <param name="dateTimeOffsetArgument">要使用的日期/時間值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Left 以傳回某字串最左邊指定之數目的字元。</summary>
      <returns>包含從輸入字串左邊算起，長度達指定之字元數的字串。</returns>
      <param name="stringArgument">輸入字串。</param>
      <param name="length">要傳回的字元數</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Reverse(System.String)">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Reverse 以反向字元的順序傳回指定的字串。</summary>
      <returns>具有反向字元順序的輸入字串。</returns>
      <param name="stringArgument">輸入字串。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Right 以傳回某字串最右邊指定之數目的字元。</summary>
      <returns>包含從輸入字串右邊算起，長度達指定之字元數的字串。</returns>
      <param name="stringArgument">輸入字串。</param>
      <param name="length">要傳回的字元數</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDev 以計算集合的標準差。</summary>
      <returns>標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDev 以計算集合的標準差。</summary>
      <returns>標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDev 以計算集合的標準差。</summary>
      <returns>標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDev 以計算集合的標準差。</summary>
      <returns>標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDev 以計算集合的標準差。</summary>
      <returns>標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDev 以計算集合的標準差。</summary>
      <returns>標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDev 以計算集合的標準差。</summary>
      <returns>標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDev 以計算集合的標準差。</summary>
      <returns>標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDevP 以計算母體擴展的標準差。</summary>
      <returns>母體擴展標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDevP 以計算母體擴展的標準差。</summary>
      <returns>母體擴展標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDevP 以計算母體擴展的標準差。</summary>
      <returns>母體擴展標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDevP 以計算母體擴展的標準差。</summary>
      <returns>母體擴展標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDevP 以計算母體擴展的標準差。</summary>
      <returns>母體擴展標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDevP 以計算母體擴展的標準差。</summary>
      <returns>母體擴展標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDevP 以計算母體擴展的標準差。</summary>
      <returns>母體擴展標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 StDevP 以計算母體擴展的標準差。</summary>
      <returns>母體擴展標準差。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Truncate 將指定的值截斷至指定的位數。</summary>
      <returns>已截斷的值。</returns>
      <param name="value">要截斷的值。</param>
      <param name="digits">要保留的位數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Truncate 將指定的值截斷至指定的位數。</summary>
      <returns>已截斷的值。</returns>
      <param name="value">要截斷的值。</param>
      <param name="digits">要保留的位數。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 TruncateTime 以傳回指定的日期清除時間部分之後的結果。</summary>
      <returns>已清除時間部分的輸入日期。</returns>
      <param name="dateValue">要使用的日期/時間值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 TruncateTime 以傳回指定的日期清除時間部分之後的結果。</summary>
      <returns>已清除時間部分的輸入日期。</returns>
      <param name="dateValue">要使用的日期/時間值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Var 以計算集合的差異。</summary>
      <returns>差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Var 以計算集合的差異。</summary>
      <returns>差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Var 以計算集合的差異。</summary>
      <returns>差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Var 以計算集合的差異。</summary>
      <returns>差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Var 以計算集合的差異。</summary>
      <returns>差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Var 以計算集合的差異。</summary>
      <returns>差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Var 以計算集合的差異。</summary>
      <returns>差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 Var 以計算集合的差異。</summary>
      <returns>差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 VarP 以計算母體擴展的差異。</summary>
      <returns>母體擴展差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 VarP 以計算母體擴展的差異。</summary>
      <returns>母體擴展差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 VarP 以計算母體擴展的差異。</summary>
      <returns>母體擴展差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 VarP 以計算母體擴展的差異。</summary>
      <returns>母體擴展差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 VarP 以計算母體擴展的差異。</summary>
      <returns>母體擴展差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 VarP 以計算母體擴展的差異。</summary>
      <returns>母體擴展差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 VarP 以計算母體擴展的差異。</summary>
      <returns>母體擴展差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>用於 LINQ to Entities 查詢時，此方法會叫用標準 EDM 函式 VarP 以計算母體擴展的差異。</summary>
      <returns>母體擴展差異。</returns>
      <param name="collection">要執行此項計算的集合。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ExecutionOptions">
      <summary>表示執行查詢的選項。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.#ctor(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Objects.ExecutionOptions" /> 的新執行個體。</summary>
      <param name="mergeOption">用於實體結果的合併選項。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.#ctor(System.Data.Entity.Core.Objects.MergeOption,System.Boolean)">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Objects.ExecutionOptions" /> 的新執行個體。</summary>
      <param name="mergeOption">用於實體結果的合併選項。</param>
      <param name="streaming">如果查詢會是資料流或緩衝，則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.GetHashCode">
      <summary>做為特定類型的雜湊函式。</summary>
      <returns>目前物件的雜湊碼。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ExecutionOptions.MergeOption">
      <summary>取得用於實體結果的合併選項。</summary>
      <returns>用於實體結果的合併選項。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.op_Equality(System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ExecutionOptions)">
      <summary>判斷指定的物件是否相等。</summary>
      <returns>如果兩個物件相等，則為 true，否則為 false。</returns>
      <param name="left">要比較的左邊物件。</param>
      <param name="right">要比較的右邊物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.op_Inequality(System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ExecutionOptions)">
      <summary>判斷指定的物件是否不相等。</summary>
      <returns>如果兩個物件不相等，則為 true，否則為 false。</returns>
      <param name="left">要比較的左邊物件。</param>
      <param name="right">要比較的右邊物件。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ExecutionOptions.Streaming">
      <summary>取得值，指出此查詢為資料流或緩衝。</summary>
      <returns>若查詢為資料流，則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.IObjectSet`1">
      <summary>定義允許對結果集的成員資格進行修改的 IQueryable 實作行為。</summary>
      <typeparam name="TEntity">從可查詢項目傳回的實體類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.AddObject(`0)">
      <summary>通知集合必須將代表新實體的物件加入至集合中。</summary>
      <param name="entity">要加入至集合的新物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.Attach(`0)">
      <summary>通知集合必須將代表現有實體的物件加入至集合中。</summary>
      <param name="entity">要加入至集合的現有物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.DeleteObject(`0)">
      <summary>通知集合必須從集合中刪除代表現有實體的物件。</summary>
      <param name="entity">要從集合刪除的現有物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.Detach(`0)">
      <summary>通知集合必須從集合中卸離代表現有實體的物件。</summary>
      <param name="entity">要從集合卸離的物件。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.MergeOption">
      <summary>可讓從資料庫載入的新物件與記憶體中已存在的物件合併的不同方式。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly">
      <summary>只會附加新 (最上層唯一) 的資料列。這是預設行為。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking">
      <summary>將不會修改快取。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.OverwriteChanges">
      <summary>與 LoadOption.OverwriteChanges 相同的行為。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.PreserveChanges">
      <summary>與 LoadOption.PreserveChanges 相同的行為。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectContext">
      <summary>ObjectContext 是最上層物件，會封裝 CLR 與資料庫之間的連接，當做建立、讀取、更新和刪除作業的閘道。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection)">
      <summary>使用給定的連接，初始化 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 類別的新執行個體。在建構期間，系統會從 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 物件中擷取中繼資料工作空間。</summary>
      <param name="connection">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />，其中包含模型的參考與資料來源連接的參考。</param>
      <exception cref="T:System.ArgumentNullException">connection 是 null。</exception>
      <exception cref="T:System.ArgumentException">連接無效或中繼資料工作空間無效。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection,System.Boolean)">
      <summary>建立具有指定連接和中繼資料工作空間的 ObjectContext。</summary>
      <param name="connection">存放區的連接</param>
      <param name="contextOwnsConnection">如果設定為 true，則處置內容時也會處置此連接，否則呼叫端必須處置此連接。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection,System.String)">
      <summary>使用給定的連接和實體容器名稱，初始化 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 類別的新執行個體。</summary>
      <param name="connection">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />，其中包含模型的參考與資料來源連接的參考。</param>
      <param name="defaultContainerName">預設實體容器的名稱。當您透過此方法設定 defaultContainerName 時，此屬性會變成唯讀的。</param>
      <exception cref="T:System.ArgumentNullException">connection 是 null。</exception>
      <exception cref="T:System.ArgumentException">connection、defaultContainerName 或中繼資料工作空間無效。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.String)">
      <summary>使用給定的連接字串和預設實體容器名稱，初始化 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 類別的新執行個體。</summary>
      <param name="connectionString">連接字串，它也會提供中繼資料資訊的存取權。</param>
      <exception cref="T:System.ArgumentNullException">connectionString 是 null。</exception>
      <exception cref="T:System.ArgumentException">connectionString 無效或中繼資料工作空間無效。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.String,System.String)">
      <summary>使用給定的連接字串 (Connection String) 和實體容器 (Container) 名稱，初始化 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 類別的新執行個體。</summary>
      <param name="connectionString">連接字串，它也會提供中繼資料資訊的存取權。</param>
      <param name="defaultContainerName">預設實體容器的名稱。當您透過此方法設定 defaultContainerName 時，此屬性會變成唯讀的。</param>
      <exception cref="T:System.ArgumentNullException">connectionString 是 null。</exception>
      <exception cref="T:System.ArgumentException">connectionString、defaultContainerName 或中繼資料工作空間無效。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AcceptAllChanges">
      <summary>接受對物件內容中之物件所做的所有變更。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AddObject(System.String,System.Object)">
      <summary>將物件加入至物件內容。</summary>
      <param name="entitySetName">表示實體集名稱 (可能會選擇性地由實體容器名稱限定)。</param>
      <param name="entity">要加入的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">entity 參數為 null 或 entitySetName 不是完整限定名稱。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)">
      <summary>將純量值從提供的物件複製到 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 中具有相同索引鍵的物件。</summary>
      <returns>更新的物件。</returns>
      <param name="entitySetName">此物件所屬之實體集的名稱。</param>
      <param name="currentEntity">具有要套用至原始物件之屬性更新的已中斷連結物件。currentEntity 的實體索引鍵必須符合 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 中項目的 <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> 屬性。</param>
      <typeparam name="TEntity">物件的實體類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">entitySetName 或 current 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">entitySetName 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 不符合物件 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />，或者物件不在 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 中，或者物件的狀態為 <see cref="F:System.Data.Entity.EntityState.Detached" />，或者給定物件的實體索引鍵無效。</exception>
      <exception cref="T:System.ArgumentException">entitySetName 為空字串。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)">
      <summary>從提供的物件將純量值複製至 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 中具有相同索引鍵之物件的原始值組。</summary>
      <returns>更新的物件。</returns>
      <param name="entitySetName">此物件所屬之實體集的名稱。</param>
      <param name="originalEntity">具有要套用至物件之原始值的已卸離物件。originalEntity 的實體索引鍵必須符合 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 中項目的 <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> 屬性。</param>
      <typeparam name="TEntity">實體物件的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">entitySetName 或 original 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">entitySetName 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 不符合物件 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />，或者 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 中找不到物件的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />，或者物件的狀態為 <see cref="F:System.Data.Entity.EntityState.Added" /> 或 <see cref="F:System.Data.Entity.EntityState.Detached" />，或者給定物件的實體索引鍵無效或具有屬性變更。</exception>
      <exception cref="T:System.ArgumentException">entitySetName 為空字串。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)">
      <summary>將已中斷連結物件中的屬性變更套用至已經附加至物件內容的物件。</summary>
      <param name="entitySetName">此物件所屬之實體集的名稱。</param>
      <param name="changed">具有要套用至原始物件之屬性更新的已中斷連結物件。</param>
      <exception cref="T:System.ArgumentNullException">當 entitySetName 為 null 或空字串，或者 changed 為 null 時。</exception>
      <exception cref="T:System.InvalidOperationException">當 entitySetName 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 不符合物件 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />，或者物件處於 <see cref="F:System.Data.Entity.EntityState.Modified" /> 或 <see cref="F:System.Data.Entity.EntityState.Unchanged" /> 以外的狀態，或者原始物件並未附加至內容時。</exception>
      <exception cref="T:System.ArgumentException">當 changed 物件的類型與原始物件的類型不同時。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey)">
      <summary>當物件具有實體索引鍵時，將物件或物件圖形附加至物件內容。</summary>
      <param name="entity">要附加的物件。</param>
      <exception cref="T:System.ArgumentNullException">entity 是 null。</exception>
      <exception cref="T:System.InvalidOperationException">無效的實體索引鍵。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AttachTo(System.String,System.Object)">
      <summary>將物件或物件圖形附加至位於特定實體集中的物件內容。</summary>
      <param name="entitySetName">表示實體集名稱 (可能會選擇性地由實體容器名稱限定)。</param>
      <param name="entity">要附加的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">entity 是 null。</exception>
      <exception cref="T:System.InvalidOperationException">無效的實體集或物件有暫時索引鍵，或者物件有 <see cref="T:System.Data.Entity.Core.EntityKey" /> 且 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 與當做方法之引數傳入的實體集不符，或者物件沒有 <see cref="T:System.Data.Entity.Core.EntityKey" /> 且沒有提供任何實體集，或者來自物件圖形的所有物件都有暫時 <see cref="T:System.Data.Entity.Core.EntityKey" />，或者來自物件圖形的所有物件都有無效的 <see cref="T:System.Data.Entity.Core.EntityKey" /> (例如，索引鍵中的值與物件中的值不符)，或者給定的 entitySetName 名稱和實體容器名稱中找不到實體集，或者來自物件圖形的所有物件都已經存在於其他狀態管理員中。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.CommandTimeout">
      <summary>取得或設定所有物件內容作業的逾時值 (以秒為單位)。null 值表示將會使用基礎提供者的預設值。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，它是逾時值 (以秒為單位)。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.Connection">
      <summary>取得物件內容所使用的連接。</summary>
      <returns>成為連接的 <see cref="T:System.Data.Common.DbConnection" /> 物件。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.ContextOptions">
      <summary>取得 <see cref="T:System.Data.Entity.Core.Objects.ObjectContextOptions" /> 執行個體，其中包含影響 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 行為的選項。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContextOptions" /> 執行個體，其中包含影響 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 行為的選項。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateDatabase">
      <summary>使用目前資料來源連接和 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 中的中繼資料，建立資料庫。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateDatabaseScript">
      <summary>產生資料定義語言 (DDL) 指令碼，此指令碼會針對 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 中的中繼資料建立結構描述物件 (資料表、主索引鍵、外部索引鍵)。<see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 會從存放結構定義語言 (SSDL) 檔載入中繼資料。</summary>
      <returns>DDL 指令碼，此指令碼會針對 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 中的中繼資料建立結構描述物件。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)">
      <summary>建立特定物件的實體索引鍵，或傳回實體索引鍵 (如果已經存在的話)。</summary>
      <returns>物件的 <see cref="T:System.Data.Entity.Core.EntityKey" />。</returns>
      <param name="entitySetName">此實體物件所屬之實體集的完整限定名稱。</param>
      <param name="entity">要擷取其實體索引鍵的物件。</param>
      <exception cref="T:System.ArgumentNullException">當其中一個參數是 null 時。</exception>
      <exception cref="T:System.ArgumentException">當 entitySetName 為空字串，或者實體集中不存在實體物件的類型，或者 entitySetName 不是完整限定名稱時。</exception>
      <exception cref="T:System.InvalidOperationException">無法根據提供的參數成功建構實體索引鍵時。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObject``1">
      <summary>建立和傳回所要求之類型的執行個體。</summary>
      <returns>所要求之類型 T 的執行個體，或可讓 T 與 Entity Framework 一起使用之衍生類型的執行個體。傳回的物件是所要求類型的執行個體，或是可讓要求的類型與 Entity Framework 搭配使用的衍生類型執行個體。</returns>
      <typeparam name="T">要傳回的物件類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObjectSet``1">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 執行個體，此執行個體用來查詢、加入、修改和刪除指定之實體類型的物件。</summary>
      <returns>新 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 執行個體。</returns>
      <typeparam name="TEntity">所要求之 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 的實體類型。</typeparam>
      <exception cref="T:System.InvalidOperationException">未設定 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的 <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> 屬性，或者指定的類型屬於多個實體集。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObjectSet``1(System.String)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 執行個體，此執行個體用來查詢、加入、修改和刪除具有指定之類型和指定之實體集名稱的物件。</summary>
      <returns>新 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 執行個體。</returns>
      <param name="entitySetName">所傳回之 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 的實體集名稱。如果未設定 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的 <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> 屬性，則必須由預設容器名稱來限定字串。</param>
      <typeparam name="TEntity">所要求之 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 的實體類型。</typeparam>
      <exception cref="T:System.InvalidOperationException">entitySetName 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 不符合物件 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />，或者未設定 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的 <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> 屬性且名稱不是 entitySetName 參數的完整限定名稱，或者指定的類型屬於多個實體集。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>針對所提供之列舉中的每一個類型，產生可以與 Entity Framework 一起使用的對等類型。</summary>
      <param name="types">
        <see cref="T:System.Type" /> 物件的列舉，這些物件表示對應至概念模型的自訂資料類別。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>使用指定的查詢字串，在目前的物件內容中建立 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />。</summary>
      <returns>指定之類型的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />。</returns>
      <param name="queryString">要執行的查詢字串。</param>
      <param name="parameters">要傳遞給查詢的參數。</param>
      <typeparam name="T">傳回之 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 的實體類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">queryString 或 parameters 參數是 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DatabaseExists">
      <summary>檢查在目前存放區連接中指定為資料庫的資料庫是否存在存放區上。大部分的實際工作是由目前存放區連接的 DbProviderServices 實作所完成。</summary>
      <returns>如果資料庫存在則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName">
      <summary>取得或設定預設容器名稱。</summary>
      <returns>
        <see cref="T:System.String" />，它是預設容器名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DeleteDatabase">
      <summary>刪除在目前資料來源連接中指定為資料庫的資料庫。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DeleteObject(System.Object)">
      <summary>將物件標記為待刪除。</summary>
      <param name="entity">指定要刪除之實體的物件。此物件可以處於任何狀態中，但 <see cref="F:System.Data.Entity.EntityState.Detached" /> 除外。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Detach(System.Object)">
      <summary>從物件內容中移除物件。</summary>
      <param name="entity">要中斷連結的物件。只會移除實體。如果有任何由相同 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 所追蹤的相關物件存在，這些物件將不會自動中斷連結。</param>
      <exception cref="T:System.ArgumentNullException">entity 是 null。</exception>
      <exception cref="T:System.InvalidOperationException">entity 沒有與此 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 相關聯 (例如，新建立而且尚未與任何內容相關聯，或者透過某些其他內容取得，或者已經中斷連結)。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DetectChanges">
      <summary>確保 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 變更與 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 所追蹤之所有物件中的變更同步化。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Dispose">
      <summary>釋放物件內容所使用的資源。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Dispose(System.Boolean)">
      <summary>釋放物件內容所使用的資源。</summary>
      <param name="disposing">true 表示會同時釋放 Managed 和 Unmanaged 資源，false 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>在預設容器上執行給定的函式。</summary>
      <returns>表示執行此函式結果的物件。</returns>
      <param name="functionName">函式的名稱。可能包含容器 (例如ContainerName.FunctionName) 或只有函式名稱 (已知 DefaultContainerName 時)。</param>
      <param name="executionOptions">執行此函式的選項。</param>
      <param name="parameters">要用於函式的參數值。如果使用了輸出參數，在完全讀取結果之前，這些參數的值將無法使用。這是由於 DbDataReader 的基礎行為所造成，請參閱 http://go.microsoft.com/fwlink/?LinkID=398589 以取得詳細資料。</param>
      <typeparam name="TElement">函式結果的元素類型。</typeparam>
      <exception cref="T:System.ArgumentException">如果 function 為 null 或空白</exception>
      <exception cref="T:System.InvalidOperationException">如果函式無效 (語法、不存在、所參考函式的傳回類型與 T 不相容)</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.MergeOption,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>使用指定的參數和合併選項，執行資料來源中所定義和以概念模型表示之指定的預存程序或函式。傳回具類型的 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />。</summary>
      <returns>預存程序所傳回之資料的 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />。</returns>
      <param name="functionName">預存程序或函式的名稱。這個名稱可以包含容器名稱，例如 &lt;Container Name&gt;.&lt;Function Name&gt;。已知預設容器名稱時，只需要函式名稱。</param>
      <param name="mergeOption">要在執行查詢時使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。</param>
      <param name="parameters">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 物件的陣列。如果使用了輸出參數，在完全讀取結果之前，這些參數的值將無法使用。這是由於 DbDataReader 的基礎行為所造成，請參閱 http://go.microsoft.com/fwlink/?LinkID=398589 以取得詳細資料。</param>
      <typeparam name="TElement">針對資料來源執行此函式時，所傳回之 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> 的實體類型。此類型必須實作 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker" />。</typeparam>
      <exception cref="T:System.ArgumentException">function 為 null 或空白，或者找不到 function。</exception>
      <exception cref="T:System.InvalidOperationException">實體讀取器不支援此函式，或者讀取器與函式的類型不符。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>使用指定的參數，執行資料來源中所定義且在概念模型中有所對應的預存程序或函式。傳回具類型的 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />。</summary>
      <returns>預存程序所傳回之資料的 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />。</returns>
      <param name="functionName">預存程序或函式的名稱。這個名稱可以包含容器名稱，例如 &lt;Container Name&gt;.&lt;Function Name&gt;。已知預設容器名稱時，只需要函式名稱。</param>
      <param name="parameters">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 物件的陣列。如果使用了輸出參數，在完全讀取結果之前，這些參數的值將無法使用。這是由於 DbDataReader 的基礎行為所造成，請參閱 http://go.microsoft.com/fwlink/?LinkID=398589 以取得詳細資料。</param>
      <typeparam name="TElement">針對資料來源執行此函式時，所傳回之 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> 的實體類型。此類型必須實作 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker" />。</typeparam>
      <exception cref="T:System.ArgumentException">function 為 null 或空白，或者找不到 function。</exception>
      <exception cref="T:System.InvalidOperationException">實體讀取器不支援此函式，或者讀取器與函式的類型不符。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>執行資料來源中所定義和以概念模型表示的預存程序或函式、捨棄函式傳回的任何結果，然後傳回受執行所影響的資料列數目。</summary>
      <returns>受影響的資料列數目。</returns>
      <param name="functionName">預存程序或函式的名稱。這個名稱可以包含容器名稱，例如 &lt;Container Name&gt;.&lt;Function Name&gt;。已知預設容器名稱時，只需要函式名稱。</param>
      <param name="parameters">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 物件的陣列。如果使用了輸出參數，在完全讀取結果之前，這些參數的值將無法使用。這是由於 DbDataReader 的基礎行為所造成，請參閱 http://go.microsoft.com/fwlink/?LinkID=398589 以取得詳細資料。</param>
      <exception cref="T:System.ArgumentException">function 為 null 或空白，或者找不到 function。</exception>
      <exception cref="T:System.InvalidOperationException">實體讀取器不支援此函式，或者讀取器與函式的類型不符。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommand(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>使用現有的連接，直接針對資料來源執行任意命令。此命令是使用伺服器的原生查詢語言 (例如 SQL) 指定。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor)。或者，您也可以建構 DbParameter 再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor))。</summary>
      <returns>受影響的資料列數目。</returns>
      <param name="transactionalBehavior">控制此命令的交易建立作業。</param>
      <param name="commandText">使用伺服器的原生查詢語言指定的命令。</param>
      <param name="parameters">要用於查詢的參數值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])">
      <summary>使用現有的連接，直接針對資料來源執行任意命令。此命令是使用伺服器的原生查詢語言 (例如 SQL) 指定。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor)。或者，您也可以建構 DbParameter 再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor))。</summary>
      <returns>受影響的資料列數目。</returns>
      <param name="commandText">使用伺服器的原生查詢語言指定的命令。</param>
      <param name="parameters">要用於查詢的參數值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>使用現有的連接，以非同步方式直接針對資料來源執行任意命令。此命令是使用伺服器的原生查詢語言 (例如 SQL) 指定。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor)。或者，您也可以建構 DbParameter 再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor))。</summary>
      <returns>表示非同步作業的工作。工作結果包含受影響的資料列數。</returns>
      <param name="transactionalBehavior">控制此命令的交易建立作業。</param>
      <param name="commandText">使用伺服器的原生查詢語言指定的命令。</param>
      <param name="parameters">要用於查詢的參數值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>使用現有的連接，以非同步方式直接針對資料來源執行任意命令。此命令是使用伺服器的原生查詢語言 (例如 SQL) 指定。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor)。或者，您也可以建構 DbParameter 再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor))。</summary>
      <returns>表示非同步作業的工作。工作結果包含受影響的資料列數。</returns>
      <param name="transactionalBehavior">控制此命令的交易建立作業。</param>
      <param name="commandText">使用伺服器的原生查詢語言指定的命令。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">要用於查詢的參數值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.String,System.Object[])">
      <summary>使用現有的連接，以非同步方式直接針對資料來源執行任意命令。此命令是使用伺服器的原生查詢語言 (例如 SQL) 指定。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor)。或者，您也可以建構 DbParameter 再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor))。</summary>
      <returns>表示非同步作業的工作。工作結果包含受影響的資料列數。</returns>
      <param name="commandText">使用伺服器的原生查詢語言指定的命令。</param>
      <param name="parameters">要用於查詢的參數值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>使用現有的連接，以非同步方式直接針對資料來源執行任意命令。此命令是使用伺服器的原生查詢語言 (例如 SQL) 指定。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor)。或者，您也可以建構 DbParameter 再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor))。</summary>
      <returns>表示非同步作業的工作。工作結果包含受影響的資料列數。</returns>
      <param name="commandText">使用伺服器的原生查詢語言指定的命令。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">要用於查詢的參數值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>直接針對資料來源執行查詢，並傳回具類型之結果的序列。此查詢是使用伺服器的原生查詢語言 (例如 SQL) 指定。內容並不會追蹤結果，請使用可指定實體集名稱的多載來追蹤結果。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);。或者，您也可以建構 DbParameter，再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>
        <paramref name="TElement" /> 類型的物件列舉。</returns>
      <param name="commandText">使用伺服器的原生查詢語言指定的查詢。</param>
      <param name="executionOptions">執行此查詢的選項。</param>
      <param name="parameters">要用於查詢的參數值。如果使用了輸出參數，在完全讀取結果之前，這些參數的值將無法使用。這是由於 DbDataReader 的基礎行為所造成，請參閱 http://go.microsoft.com/fwlink/?LinkID=398589 以取得詳細資料。</param>
      <typeparam name="TElement">結果序列的元素類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])">
      <summary>直接針對資料來源執行查詢，並傳回具類型之結果的序列。此查詢是使用伺服器的原生查詢語言 (例如 SQL) 指定。內容並不會追蹤結果，請使用可指定實體集名稱的多載來追蹤結果。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);。或者，您也可以建構 DbParameter，再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>
        <paramref name="TElement" /> 類型的物件列舉。</returns>
      <param name="commandText">使用伺服器的原生查詢語言指定的查詢。</param>
      <param name="parameters">要用於查詢的參數值。如果使用了輸出參數，在完全讀取結果之前，這些參數的值將無法使用。這是由於 DbDataReader 的基礎行為所造成，請參閱 http://go.microsoft.com/fwlink/?LinkID=398589 以取得詳細資料。</param>
      <typeparam name="TElement">結果序列的元素類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>直接針對資料來源執行查詢，並傳回具類型之結果的序列。此查詢是使用伺服器的原生查詢語言 (例如 SQL) 指定。如果已指定實體集名稱，內容就會追蹤結果。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);。或者，您也可以建構 DbParameter，再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>
        <paramref name="TElement" /> 類型的物件列舉。</returns>
      <param name="commandText">使用伺服器的原生查詢語言指定的查詢。</param>
      <param name="entitySetName">TResult 類型的實體集。如果未提供實體集名稱，則不會追蹤結果。</param>
      <param name="executionOptions">執行此查詢的選項。</param>
      <param name="parameters">要用於查詢的參數值。如果使用了輸出參數，在完全讀取結果之前，這些參數的值將無法使用。這是由於 DbDataReader 的基礎行為所造成，請參閱 http://go.microsoft.com/fwlink/?LinkID=398589 以取得詳細資料。</param>
      <typeparam name="TElement">結果序列的元素類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Entity.Core.Objects.MergeOption,System.Object[])">
      <summary>直接針對資料來源執行查詢，並傳回具類型之結果的序列。此查詢是使用伺服器的原生查詢語言 (例如 SQL) 指定。如果已指定實體集名稱，內容就會追蹤結果。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);。或者，您也可以建構 DbParameter，再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>
        <paramref name="TElement" /> 類型的物件列舉。</returns>
      <param name="commandText">使用伺服器的原生查詢語言指定的查詢。</param>
      <param name="entitySetName">TResult 類型的實體集。如果未提供實體集名稱，則不會追蹤結果。</param>
      <param name="mergeOption">要在執行查詢時使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。預設為 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />。</param>
      <param name="parameters">要用於查詢的參數值。如果使用了輸出參數，在完全讀取結果之前，這些參數的值將無法使用。這是由於 DbDataReader 的基礎行為所造成，請參閱 http://go.microsoft.com/fwlink/?LinkID=398589 以取得詳細資料。</param>
      <typeparam name="TElement">結果序列的元素類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>以非同步方式直接針對資料來源執行查詢，並傳回具類型之結果的序列。此查詢是使用伺服器的原生查詢語言 (例如 SQL) 指定。內容並不會追蹤結果，請使用可指定實體集名稱的多載來追蹤結果。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);。或者，您也可以建構 DbParameter，再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示非同步作業的工作。工作結果包含 <paramref name="TElement" /> 類型的物件列舉。</returns>
      <param name="commandText">使用伺服器的原生查詢語言指定的查詢。</param>
      <param name="executionOptions">執行此查詢的選項。</param>
      <param name="parameters">要用於查詢的參數值。如果使用了輸出參數，在完全讀取結果之前，這些參數的值將無法使用。這是由於 DbDataReader 的基礎行為所造成，請參閱 http://go.microsoft.com/fwlink/?LinkID=398589 以取得詳細資料。</param>
      <typeparam name="TElement">結果序列的元素類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Threading.CancellationToken,System.Object[])">
      <summary>以非同步方式直接針對資料來源執行查詢，並傳回具類型之結果的序列。此查詢是使用伺服器的原生查詢語言 (例如 SQL) 指定。內容並不會追蹤結果，請使用可指定實體集名稱的多載來追蹤結果。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);。或者，您也可以建構 DbParameter，再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示非同步作業的工作。工作結果包含 <paramref name="TElement" /> 類型的物件列舉。</returns>
      <param name="commandText">使用伺服器的原生查詢語言指定的查詢。</param>
      <param name="executionOptions">執行此查詢的選項。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">要用於查詢的參數值。如果使用了輸出參數，在完全讀取結果之前，這些參數的值將無法使用。這是由於 DbDataReader 的基礎行為所造成，請參閱 http://go.microsoft.com/fwlink/?LinkID=398589 以取得詳細資料。</param>
      <typeparam name="TElement">結果序列的元素類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Object[])">
      <summary>以非同步方式直接針對資料來源執行查詢，並傳回具類型之結果的序列。此查詢是使用伺服器的原生查詢語言 (例如 SQL) 指定。內容並不會追蹤結果，請使用可指定實體集名稱的多載來追蹤結果。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);。或者，您也可以建構 DbParameter，再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示非同步作業的工作。工作結果包含 <paramref name="TElement" /> 類型的物件列舉。</returns>
      <param name="commandText">使用伺服器的原生查詢語言指定的查詢。</param>
      <param name="parameters">要用於查詢的參數值。如果使用了輸出參數，在完全讀取結果之前，這些參數的值將無法使用。這是由於 DbDataReader 的基礎行為所造成，請參閱 http://go.microsoft.com/fwlink/?LinkID=398589 以取得詳細資料。</param>
      <typeparam name="TElement">結果序列的元素類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>以非同步方式直接針對資料來源執行查詢，並傳回具類型之結果的序列。此查詢是使用伺服器的原生查詢語言 (例如 SQL) 指定。如果已指定實體集名稱，內容就會追蹤結果。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);。或者，您也可以建構 DbParameter，再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示非同步作業的工作。工作結果包含 <paramref name="TElement" /> 類型的物件列舉。</returns>
      <param name="commandText">使用伺服器的原生查詢語言指定的查詢。</param>
      <param name="entitySetName">TResult 類型的實體集。如果未提供實體集名稱，則不會追蹤結果。</param>
      <param name="executionOptions">執行此查詢的選項。</param>
      <param name="parameters">要用於查詢的參數值。如果使用了輸出參數，在完全讀取結果之前，這些參數的值將無法使用。這是由於 DbDataReader 的基礎行為所造成，請參閱 http://go.microsoft.com/fwlink/?LinkID=398589 以取得詳細資料。</param>
      <typeparam name="TElement">結果序列的元素類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Threading.CancellationToken,System.Object[])">
      <summary>以非同步方式直接針對資料來源執行查詢，並傳回具類型之結果的序列。此查詢是使用伺服器的原生查詢語言 (例如 SQL) 指定。如果已指定實體集名稱，內容就會追蹤結果。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);。或者，您也可以建構 DbParameter，再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示非同步作業的工作。工作結果包含 <paramref name="TElement" /> 類型的物件列舉。</returns>
      <param name="commandText">使用伺服器的原生查詢語言指定的查詢。</param>
      <param name="entitySetName">TResult 類型的實體集。如果未提供實體集名稱，則不會追蹤結果。</param>
      <param name="executionOptions">執行此查詢的選項。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">要用於查詢的參數值。如果使用了輸出參數，在完全讀取結果之前，這些參數的值將無法使用。這是由於 DbDataReader 的基礎行為所造成，請參閱 http://go.microsoft.com/fwlink/?LinkID=398589 以取得詳細資料。</param>
      <typeparam name="TElement">結果序列的元素類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>以非同步方式直接針對資料來源執行查詢，並傳回具類型之結果的序列。此查詢是使用伺服器的原生查詢語言 (例如 SQL) 指定。內容並不會追蹤結果，請使用可指定實體集名稱的多載來追蹤結果。如同所有接受 SQL 的應用程式開發介面，任何使用者輸入都務必進行參數化以防範 SQL 插入式攻擊。您可在 SQL 查詢字串中加入參數預留位置，然後再以其他引數提供參數值。您所提供的任何參數值都將自動轉換為 DbParameter。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);。或者，您也可以建構 DbParameter，再將其提供給 SqlQuery。如此您便能在 SQL 查詢字串中使用具名參數。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示非同步作業的工作。工作結果包含 <paramref name="TElement" /> 類型的物件列舉。</returns>
      <param name="commandText">使用伺服器的原生查詢語言指定的查詢。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">要用於查詢的參數值。如果使用了輸出參數，在完全讀取結果之前，這些參數的值將無法使用。這是由於 DbDataReader 的基礎行為所造成，請參閱 http://go.microsoft.com/fwlink/?LinkID=398589 以取得詳細資料。</param>
      <typeparam name="TElement">結果序列的元素類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Finalize">
      <summary>終結 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 類別的執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetKnownProxyTypes">
      <summary>傳回所有現有的 Proxy 類型。</summary>
      <returns>所有現有 Proxy 類型的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetObjectByKey(System.Data.Entity.Core.EntityKey)">
      <summary>傳回具有指定之實體索引鍵的物件。</summary>
      <returns>
        <see cref="T:System.Object" />，它是實體類型的執行個體。</returns>
      <param name="key">要尋找之物件的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">key 參數是 null。</exception>
      <exception cref="T:System.Data.Entity.Core.ObjectNotFoundException">在 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 或資料來源中找不到此物件。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetObjectType(System.Type)">
      <summary>傳回與所指定類型的 Proxy 物件相關聯的 POCO 實體的實體類型。</summary>
      <returns>相關聯 POCO 實體的 <see cref="T:System.Type" />。</returns>
      <param name="type">Proxy 物件的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.InterceptionContext">
      <summary>傳回此內容目前所使用的 <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty(System.Object,System.String)">
      <summary>由指定的導覽屬性和使用預設合併選項，明確地載入所提供之物件的相關物件。</summary>
      <param name="entity">要載入相關物件的目標實體。</param>
      <param name="navigationProperty">導覽屬性的名稱，此屬性會傳回要載入的相關物件。</param>
      <exception cref="T:System.InvalidOperationException">實體的狀態為 <see cref="F:System.Data.Entity.EntityState.Detached" />、<see cref="F:System.Data.Entity.EntityState.Added," /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" />，或者實體已附加至 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的其他執行個體。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>由指定的導覽屬性和使用指定的合併選項，明確地載入所提供之物件的相關物件。</summary>
      <param name="entity">要載入相關物件的目標實體。</param>
      <param name="navigationProperty">導覽屬性的名稱，此屬性會傳回要載入的相關物件。</param>
      <param name="mergeOption">在您載入相關物件時所要使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 值。</param>
      <exception cref="T:System.InvalidOperationException">實體的狀態為 <see cref="F:System.Data.Entity.EntityState.Detached" />、<see cref="F:System.Data.Entity.EntityState.Added," /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" />，或者實體已附加至 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的其他執行個體。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>由指定的 LINQ 查詢和使用預設的合併選項，明確地載入所提供之物件的相關物件。</summary>
      <param name="entity">要載入相關物件的來源物件。</param>
      <param name="selector">定義要載入之相關物件的 LINQ 運算式。</param>
      <typeparam name="TEntity">實體的類型。</typeparam>
      <exception cref="T:System.ArgumentException">selector 並未提供有效的輸入參數。</exception>
      <exception cref="T:System.ArgumentNullException">selector 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">實體的狀態為 <see cref="F:System.Data.Entity.EntityState.Detached" />、<see cref="F:System.Data.Entity.EntityState.Added," /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" />，或者實體已附加至 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的其他執行個體。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Entity.Core.Objects.MergeOption)">
      <summary>由指定的 LINQ 查詢和使用指定的合併選項，明確地載入所提供之物件的相關物件。</summary>
      <param name="entity">要載入相關物件的來源物件。</param>
      <param name="selector">定義要載入之相關物件的 LINQ 運算式。</param>
      <param name="mergeOption">在您載入相關物件時所要使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 值。</param>
      <typeparam name="TEntity">實體的類型。</typeparam>
      <exception cref="T:System.ArgumentException">selector 並未提供有效的輸入參數。</exception>
      <exception cref="T:System.ArgumentNullException">selector 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">實體的狀態為 <see cref="F:System.Data.Entity.EntityState.Detached" />、<see cref="F:System.Data.Entity.EntityState.Added," /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" />，或者實體已附加至 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的其他執行個體。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.MetadataWorkspace">
      <summary>取得物件內容所使用的中繼資料工作空間。</summary>
      <returns>與此 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 相關聯的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 物件。</returns>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectContext.ObjectMaterialized">
      <summary>在查詢或載入作業中，從資料來源中的資料建立新的實體物件時發生。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.ObjectStateManager">
      <summary>取得物件內容用來追蹤物件變更的物件狀態管理員。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 所使用的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.QueryProvider">
      <summary>取得與此物件內容相關聯的 LINQ 查詢提供者。</summary>
      <returns>此物件內容所使用的 <see cref="T:System.Linq.IQueryProvider" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Refresh(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>使用資料庫中的資料，更新物件內容中的物件集合。</summary>
      <param name="refreshMode">
        <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 值，指出是否會以資料庫中的屬性值覆寫物件內容中的屬性變更。</param>
      <param name="collection">要重新整理之物件的 <see cref="T:System.Collections.IEnumerable" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">collection 是 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode 無效。</exception>
      <exception cref="T:System.ArgumentException">collection 為空白，或者物件沒有附加至內容。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Refresh(System.Data.Entity.Core.Objects.RefreshMode,System.Object)">
      <summary>使用資料庫中的資料，更新物件內容中的物件。</summary>
      <param name="refreshMode">
        <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 值，指出是否會以資料庫中的屬性值覆寫物件內容中的屬性變更。</param>
      <param name="entity">要重新整理的物件。</param>
      <exception cref="T:System.ArgumentNullException">entity 是 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode 無效。</exception>
      <exception cref="T:System.ArgumentException">實體未附加至內容。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>使用資料庫中的資料，以非同步方式更新物件內容中的物件集合。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="refreshMode">
        <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 值，指出是否會以資料庫中的屬性值覆寫物件內容中的屬性變更。</param>
      <param name="collection">要重新整理之物件的 <see cref="T:System.Collections.IEnumerable" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">collection 是 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode 無效。</exception>
      <exception cref="T:System.ArgumentException">collection 為空白，或者物件沒有附加至內容。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable,System.Threading.CancellationToken)">
      <summary>使用資料庫中的資料，以非同步方式更新物件內容中的物件集合。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="refreshMode">
        <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 值，指出是否會以資料庫中的屬性值覆寫物件內容中的屬性變更。</param>
      <param name="collection">要重新整理之物件的 <see cref="T:System.Collections.IEnumerable" /> 集合。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">collection 是 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode 無效。</exception>
      <exception cref="T:System.ArgumentException">collection 為空白，或者物件沒有附加至內容。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Object)">
      <summary>使用資料庫中的資料，以非同步方式更新物件內容中的物件。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="refreshMode">
        <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 值，指出是否會以資料庫中的屬性值覆寫物件內容中的屬性變更。</param>
      <param name="entity">要重新整理的物件。</param>
      <exception cref="T:System.ArgumentNullException">entity 是 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode 無效。</exception>
      <exception cref="T:System.ArgumentException">實體未附加至內容。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Object,System.Threading.CancellationToken)">
      <summary>使用資料庫中的資料，以非同步方式更新物件內容中的物件。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="refreshMode">
        <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 值，指出是否會以資料庫中的屬性值覆寫物件內容中的屬性變更。</param>
      <param name="entity">要重新整理的物件。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">entity 是 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode 無效。</exception>
      <exception cref="T:System.ArgumentException">實體未附加至內容。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges">
      <summary>將所有更新保存至資料庫並且重設物件內容中的變更追蹤。</summary>
      <returns>呼叫 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> 時處於 <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 狀態中的物件數目。</returns>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">儲存變更期間發生開放式並行存取違規。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)">
      <summary>將所有更新保存至資料庫，並且選擇性地重設物件內容中的變更追蹤。</summary>
      <returns>呼叫 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> 時處於 <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 狀態中的物件數目。</returns>
      <param name="acceptChangesDuringSave">用戶端交易支援需要此參數。如果為 true，就會在 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)" /> 完成之後，重設所有物件的變更追蹤。如果為 false，您就必須在 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)" /> 之後呼叫 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.AcceptAllChanges" /> 方法。</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">儲存變更期間發生開放式並行存取違規。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Data.Entity.Core.Objects.SaveOptions)">
      <summary>將所有更新保存至資料庫，並且選擇性地重設物件內容中的變更追蹤。</summary>
      <returns>呼叫 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> 時處於 <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 狀態中的物件數目。</returns>
      <param name="options">決定作業行為的 <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" /> 值。</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">儲存變更期間發生開放式並行存取違規。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync">
      <summary>以非同步方式將所有更新保存至資料庫，並且重設物件內容中的變更追蹤。</summary>
      <returns>表示非同步作業的工作。工作結果包含呼叫 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> 時處於 <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 狀態中的物件數目。</returns>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">儲存變更期間發生開放式並行存取違規。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Data.Entity.Core.Objects.SaveOptions)">
      <summary>以非同步方式將所有更新保存至資料庫，並且選擇性地重設物件內容中的變更追蹤。</summary>
      <returns>表示非同步作業的工作。工作結果包含呼叫 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> 時處於 <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 狀態中的物件數目。</returns>
      <param name="options">決定作業行為的 <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" /> 值。</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">儲存變更期間發生開放式並行存取違規。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Data.Entity.Core.Objects.SaveOptions,System.Threading.CancellationToken)">
      <summary>以非同步方式將所有更新保存至資料庫，並且選擇性地重設物件內容中的變更追蹤。</summary>
      <returns>表示非同步作業的工作。工作結果包含呼叫 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> 時處於 <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 狀態中的物件數目。</returns>
      <param name="options">決定作業行為的 <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" /> 值。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">儲存變更期間發生開放式並行存取違規。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Threading.CancellationToken)">
      <summary>以非同步方式將所有更新保存至資料庫，並且重設物件內容中的變更追蹤。</summary>
      <returns>表示非同步作業的工作。工作結果包含呼叫 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> 時處於 <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 狀態中的物件數目。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">儲存變更期間發生開放式並行存取違規。</exception>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectContext.SavingChanges">
      <summary>當變更儲存至資料來源時發生。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>傳回本身。ObjectContext 會實作 <see cref="T:System.Data.Entity.Infrastructure.IObjectContextAdapter" />，為 <see cref="T:System.Data.Entity.DbContext" /> 和 ObjectContext 的提供通用介面，這兩者都會傳回基礎 ObjectContext。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.TransactionHandler">
      <summary>取得此內容所使用的交易處理常式。如果尚未開始交易，這就可能是空白值。</summary>
      <returns>交易處理常式。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>將包含實體資料之資料列的 <see cref="T:System.Data.Common.DbDataReader" />，轉譯成所要求的實體類型。</summary>
      <returns>TResult 類型的物件列舉。</returns>
      <param name="reader">
        <see cref="T:System.Data.Common.DbDataReader" />，包含要轉譯為實體物件的實體資料。</param>
      <typeparam name="TElement">實體類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 reader 為 null 時。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>在特定的實體集並使用指定的合併選項，將包含實體資料之資料列的 <see cref="T:System.Data.Common.DbDataReader" /> 轉譯為所要求之實體類型的物件。</summary>
      <returns>TResult 類型的物件列舉。</returns>
      <param name="reader">
        <see cref="T:System.Data.Common.DbDataReader" />，包含要轉譯為實體物件的實體資料。</param>
      <param name="entitySetName">TResult 類型的實體集。</param>
      <param name="mergeOption">在轉譯的物件加入至物件內容時所要使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。預設為 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />。</param>
      <typeparam name="TEntity">實體類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 reader 為 null 時。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">當提供的 mergeOption 不是有效的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 值時。</exception>
      <exception cref="T:System.InvalidOperationException">當提供的 entitySetName 不是 TResult 類型的有效實體集時。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.TryGetObjectByKey(System.Data.Entity.Core.EntityKey,System.Object@)">
      <summary>傳回具有指定之實體索引鍵的物件。</summary>
      <returns>如果擷取物件成功則為 true。如果 key 是暫存的、connection 為 null 或 value 為 null，則為 false。</returns>
      <param name="key">要尋找之物件的索引鍵。</param>
      <param name="value">在此方法傳回時，它會包含此物件。</param>
      <exception cref="T:System.ArgumentException">key 的中繼資料不相容。</exception>
      <exception cref="T:System.ArgumentNullException">key 為 null。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectContextOptions">
      <summary>定義影響 ObjectContext 行為的選項。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.EnsureTransactionsForFunctionsAndCommands">
      <summary>取得或設定值，以指定交易中是否一律要執行 SQL 函式及命令。</summary>
      <returns>預設的交易行為。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.LazyLoadingEnabled">
      <summary>取得或設定布林值，此值決定在存取巡覽屬性時，是否自動載入相關的物件。</summary>
      <returns>如果啟用消極式載入則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.ProxyCreationEnabled">
      <summary>取得或設布林值，此值決定是否對非持續性的自訂資料類別建立 Proxy 執行個體。</summary>
      <returns>如果已建立 Proxy 則為 true，否則為 false預設值為 true。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseConsistentNullReferenceBehavior">
      <summary>取得或設定布林值，用於判斷是否使用一致的 NullReference 行為。</summary>
      <returns>如果應該使用一致的 NullReference 行為則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseCSharpNullComparisonBehavior">
      <summary>取得或設定布林值，用於判斷是否使用 C# NullComparison 行為。</summary>
      <returns>如果應該使用 C# NullComparison 行為，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseLegacyPreserveChangesBehavior">
      <summary>取得或設定布林值，此值決定是否使用舊版 PreserveChanges 行為。</summary>
      <returns>如果應該使用舊有 PreserveChanges 行為則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectMaterializedEventArgs">
      <summary>ObjectMaterialized 事件的 EventArgs。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectMaterializedEventArgs.Entity">
      <summary>取得已建立的實體物件。</summary>
      <returns>已建立的實體物件。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectMaterializedEventHandler">
      <summary>ObjectMaterialized 事件的委派。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectParameter">
      <summary>此類別表示位於物件層的查詢參數，由名稱、類型和值所組成。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameter.#ctor(System.String,System.Object)">
      <summary>使用指定的名稱和值，初始化 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 類別的新執行個體。</summary>
      <param name="name">參數名稱。此名稱不應該包含在 Entity SQL 陳述式中使用的 "@" 參數標記，而應該只包含實際名稱。運算式的第一個字元必須是字母。運算式中的任何後續字元必須是字母、數字或底線 (_) 字元。</param>
      <param name="value">參數的初始值 (以及原本的類型)。</param>
      <exception cref="T:System.ArgumentNullException">如果任何一個引數的值為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">如果名稱引數的值無效。參數名稱必須以字母為開頭，而且只能包含字母、數字和底線。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameter.#ctor(System.String,System.Type)">
      <summary>使用指定的名稱和類型，初始化 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 類別的新執行個體。</summary>
      <param name="name">參數名稱。此名稱不應該包含在 Entity SQL 陳述式中使用的 "@" 參數標記，而應該只包含實際名稱。運算式的第一個字元必須是字母。運算式中的任何後續字元必須是字母、數字或底線 (_) 字元。</param>
      <param name="type">參數的 Common Language Runtime (CLR) 類型。</param>
      <exception cref="T:System.ArgumentNullException">如果任何一個引數的值為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">如果名稱引數的值無效。參數名稱必須以字母為開頭，而且只能包含字母、數字和底線。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.Name">
      <summary>取得參數名稱 (只能透過建構函式設定)。</summary>
      <returns>參數名稱 (只能透過建構函式設定)。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.ParameterType">
      <summary>取得參數類型。</summary>
      <returns>參數的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.Value">
      <summary>取得或設定參數值。</summary>
      <returns>參數值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectParameterCollection">
      <summary>表示位於物件層的查詢參數集合。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Add(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>將指定的 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 加入至集合。</summary>
      <param name="item">要加入至集合的參數。</param>
      <exception cref="T:System.ArgumentNullException">parameter 引數是 null。</exception>
      <exception cref="T:System.ArgumentException">parameter 引數已經存在集合中。此行為與大部分允許重複項目之集合的行為不同。或者，另一個與參數引數名稱相同的參數已存在集合中。請注意，查閱不區分大小寫。此行為與大部分集合的行為不同，而且比較類似 <see cref="T:System.Collections.Generic.Dictionary" /> 的行為。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">parameter 的類型無效。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Clear">
      <summary>從集合中刪除所有 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Contains(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>以傳址方式檢查指定的 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 是否存在集合中。</summary>
      <returns>如果在集合中找到此參數物件，就會傳回 true，否則便傳回 false。</returns>
      <param name="item">要在集合中尋找的 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />。</param>
      <exception cref="T:System.ArgumentNullException">parameter 引數是 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Contains(System.String)">
      <summary>判斷具有指定名稱的 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 物件是否位於此集合中。</summary>
      <returns>若在集合中找到具有指定名稱的參數，會傳回 true，否則會傳回 false。</returns>
      <param name="name">要在集合中尋找的參數名稱。此名稱不應該包含在 Entity SQL 陳述式中使用的 "@" 參數標記，而應該只包含實際名稱。</param>
      <exception cref="T:System.ArgumentNullException">name 參數是 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.CopyTo(System.Data.Entity.Core.Objects.ObjectParameter[],System.Int32)">
      <summary>允許將集合中的參數複製到提供的陣列中，從位於指定索引處的物件開始。</summary>
      <param name="array">要將參數複製到其中的陣列。</param>
      <param name="arrayIndex">陣列中要開始複製參數的索引。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.Count">
      <summary>取得目前位於集合中的參數數目。</summary>
      <returns>目前位於集合中的 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 物件數目。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.GetEnumerator">
      <summary>會傳回列舉值執行個體，可逐一查看和周遊集合。</summary>
      <returns>可以用來逐一查看集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 物件。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.Item(System.String)">
      <summary>取得索引子 (Indexer)，讓呼叫端能夠依名稱擷取參數。</summary>
      <returns>索引子 (Indexer)，讓呼叫端能夠依名稱擷取參數。</returns>
      <param name="name">項目名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Remove(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>以傳址方式從集合中移除 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 的執行個體 (如果它存在集合中的話)。</summary>
      <returns>若在集合中找到此參數物件並從中移除，會傳回 true，否則會傳回 false。</returns>
      <param name="item">要從集合中移除的物件。</param>
      <exception cref="T:System.ArgumentNullException">parameter 引數是 null。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，此值表示 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 是唯讀的，則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回集合中不具類型的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 執行個體。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectQuery">
      <summary>此類別會在物件層實作不具類型的查詢。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.CommandText">
      <summary>傳回查詢的命令文字。</summary>
      <returns>字串值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Context">
      <summary>取得與此物件查詢相關聯的物件內容。</summary>
      <returns>與此 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 執行個體 (Instance) 相關聯的 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.EnablePlanCaching">
      <summary>取得或設定值，此值會指出是否應該快取查詢計畫。</summary>
      <returns>值，此值會指出是否應該快取查詢計畫。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.Execute(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>使用指定的合併選項執行不具類型的物件查詢。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />，其中包含查詢所傳回之實體物件的集合。</returns>
      <param name="mergeOption">要在執行查詢時使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。預設為 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>以非同步方式，使用指定的合併選項執行不具類型的物件查詢。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />，後者包含查詢傳回的實體物件集合。</returns>
      <param name="mergeOption">要在執行查詢時使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。預設為 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>以非同步方式，使用指定的合併選項執行不具類型的物件查詢。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />，後者包含查詢傳回的實體物件集合。</returns>
      <param name="mergeOption">要在執行查詢時使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。預設為 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.GetResultType">
      <summary>傳回查詢之結果類型的相關資訊。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 值，其中包含查詢之結果類型的相關資訊。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.MergeOption">
      <summary>取得或設定從查詢傳回的物件如何加入至物件內容。</summary>
      <returns>查詢 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Parameters">
      <summary>取得此物件查詢的參數集合。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 的參數集合。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Streaming">
      <summary>查詢會是資料流或緩衝</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可以用來逐一查看集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>取得值，指出此查詢是否包含查詢物件的集合。</summary>
      <returns>如果此查詢包含查詢物件的集合，則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#ComponentModel#IListSource#GetList">
      <summary>傳回集合當做用於資料繫結 (Data Binding) 的 <see cref="T:System.Collections.IList" />。</summary>
      <returns>實體物件的 <see cref="T:System.Collections.IList" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>傳回 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" />，其在列舉時會對資料庫執行指定的 SQL 查詢。</summary>
      <returns>查詢結果。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#ElementType">
      <summary>取得此查詢執行個體的結果項目類型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#Expression">
      <summary>取得描述此查詢的運算式。若為使用 LINQ 產生器模式所建置的查詢，就會傳回完整的 LINQ 運算式樹狀架構，否則，會傳回包裝此查詢的常數運算式。請注意，系統不會快取預設運算式。這讓就能區別 LINQ 與 Entity-SQL 查詢。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#Provider">
      <summary>取得與此查詢執行個體相關聯的 <see cref="T:System.Linq.IQueryProvider" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ToTraceString">
      <summary>傳回要針對資料來源執行的命令。</summary>
      <returns>string，代表查詢針對資料來源執行的命令。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectQuery`1">
      <summary>ObjectQuery 會在物件層實作強類型查詢。查詢是使用 Entity-SQL 字串指定，而且可透過呼叫 ObjectQuery 宣告的 Entity-SQL 式查詢產生器方法建立。</summary>
      <typeparam name="T">此 ObjectQuery 的結果類型</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>使用指定的 Entity SQL 命令當做初始查詢，建立新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 執行個體。</summary>
      <param name="commandText">Entity SQL 查詢。</param>
      <param name="context">要在上面執行查詢的 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Entity.Core.Objects.ObjectContext,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>使用指定的 Entity SQL 命令當做初始查詢和指定的合併選項，建立新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 執行個體。</summary>
      <param name="commandText">Entity SQL 查詢。</param>
      <param name="context">要在上面執行查詢的 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />。</param>
      <param name="mergeOption">指定透過此查詢所擷取的實體如何與已經從先前針對相同 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的查詢所傳回的實體合併。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Distinct">
      <summary>將查詢限制為唯一的結果。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 執行個體，它就相當於套用了 SELECT DISTINCT 的原始執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Except(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>此查詢產生器方法會建立新查詢，其結果是此查詢的所有結果，但不包括同時為另一個所指定查詢之一部分的結果。</summary>
      <returns>新的 ObjectQuery 執行個體。</returns>
      <param name="query">表示要排除之結果的查詢。</param>
      <exception cref="T:System.ArgumentNullException">如果 query 參數是 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Execute(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>使用指定的合併選項執行物件查詢。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />，其中包含查詢所傳回之實體物件的集合。</returns>
      <param name="mergeOption">要在執行查詢時使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。預設為 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>以非同步方式，使用指定的合併選項執行物件查詢。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />，後者包含查詢傳回的實體物件集合。</returns>
      <param name="mergeOption">要在執行查詢時使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。預設為 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>以非同步方式，使用指定的合併選項執行物件查詢。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />，後者包含查詢傳回的實體物件集合。</returns>
      <param name="mergeOption">要在執行查詢時使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。預設為 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>依據指定的準則，分組查詢結果。</summary>
      <returns>類型為 <see cref="T:System.Data.Common.DbDataRecord" /> 的新 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 執行個體，它就相當於套用了 GROUP BY 的原始執行個體。</returns>
      <param name="keys">分組結果所依據的索引鍵資料行。</param>
      <param name="projection">定義投影之選取屬性的清單。</param>
      <param name="parameters">此方法所使用的零個或多個參數。</param>
      <exception cref="T:System.ArgumentNullException">query 參數為 null 或空字串，或者 projection 參數為 null 或空字串。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Include(System.String)">
      <summary>指定要包含在查詢結果中的相關物件。</summary>
      <returns>含有已定義之查詢路徑的新 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />。</returns>
      <param name="path">要在查詢結果中傳回之相關物件的點分隔清單。</param>
      <exception cref="T:System.ArgumentNullException">path 是 null。</exception>
      <exception cref="T:System.ArgumentException">path 是 empty。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Intersect(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>此查詢產生器方法會建立新查詢，其結果是同時在此查詢和另一個所指定查詢中的結果。</summary>
      <returns>新的 ObjectQuery 執行個體。</returns>
      <param name="query">表示要產生交集之結果的查詢。</param>
      <exception cref="T:System.ArgumentNullException">如果 query 參數是 null。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery`1.Name">
      <summary>取得或設定此物件查詢的名稱。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 名稱的字串值。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.OfType``1">
      <summary>將查詢限制為只有特定類型的結果。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 執行個體，它就相當於套用了 OFTYPE 的原始執行個體。</returns>
      <typeparam name="TResultType">使用套用的篩選執行查詢時所傳回之 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> 的類型。</typeparam>
      <exception cref="T:System.Data.Entity.Core.EntitySqlException">指定的類型無效。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>依據指定的準則，排序查詢結果。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 執行個體，它就相當於套用了 ORDER BY 的原始執行個體。</returns>
      <param name="keys">排序結果所依據的索引鍵資料行。</param>
      <param name="parameters">此方法所使用的零個或多個參數。</param>
      <exception cref="T:System.ArgumentNullException">keys 或 parameters 參數是 null。</exception>
      <exception cref="T:System.ArgumentException">key 是空字串。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Select(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>將查詢結果限制為只有定義在指定之投影中的屬性。</summary>
      <returns>類型為 <see cref="T:System.Data.Common.DbDataRecord" /> 的新 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 執行個體，它就相當於套用了 SELECT 的原始執行個體。</returns>
      <param name="projection">定義投影之選取屬性的清單。</param>
      <param name="parameters">此方法所使用的零個或多個參數。</param>
      <exception cref="T:System.ArgumentNullException">projection 或參數為 null。</exception>
      <exception cref="T:System.ArgumentException">projection 是空字串。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>將查詢結果限制為只有投影中指定的屬性。</summary>
      <returns>類型與特定投影相容的新 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 執行個體。傳回的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 就相當於套用了 SELECT VALUE 的原始執行個體。</returns>
      <param name="projection">投影清單。</param>
      <param name="parameters">一組選擇性的查詢參數，這些參數在剖析時應該位於範圍中。</param>
      <typeparam name="TResultType">
        <see cref="M:System.Data.Entity.Core.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])" /> 方法所傳回之 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">projection 或參數為 null。</exception>
      <exception cref="T:System.ArgumentException">projection 是空字串。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>依據指定的準則，排序查詢結果，並且略過指定的結果數目。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 執行個體，它就相當於套用了 ORDER BY 和 SKIP 的原始執行個體。</returns>
      <param name="keys">排序結果所依據的索引鍵資料行。</param>
      <param name="count">要略過的結果數目。此數字必須是常數或參數參考。</param>
      <param name="parameters">一組選擇性的查詢參數，這些參數在剖析時應該位於範圍中。</param>
      <exception cref="T:System.ArgumentNullException">任何引數是 null。</exception>
      <exception cref="T:System.ArgumentException">keys 或 count 是空字串。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.Generic.IEnumerator`1" />，其在列舉時會對資料庫執行指定的 SQL 查詢。</summary>
      <returns>查詢結果。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>傳回 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" />，其在列舉時會對資料庫執行指定的 SQL 查詢。</summary>
      <returns>查詢結果。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Top(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>將查詢結果限制為指定的項目數。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 執行個體，它就相當於套用了 TOP 的原始執行個體。</returns>
      <param name="count">結果中的項目數 (成為字串)。</param>
      <param name="parameters">一組選擇性的查詢參數，這些參數在剖析時應該位於範圍中。</param>
      <exception cref="T:System.ArgumentNullException">count 是 null。</exception>
      <exception cref="T:System.ArgumentException">count 是空字串。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Union(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>此查詢產生器方法會建立新查詢，其結果是此查詢的所有結果，加上另一個查詢的所有結果，且兩者不重複 (也就是說，結果是唯一的)。</summary>
      <returns>新的 ObjectQuery 執行個體。</returns>
      <param name="query">表示要加入之結果的查詢。</param>
      <exception cref="T:System.ArgumentNullException">如果 query 參數是 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.UnionAll(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>此查詢產生器方法會建立新查詢，其結果是此查詢的所有結果，加上另一個查詢的所有結果，包含任何重複 (也就是說，結果不一定是唯一的)。</summary>
      <returns>新的 ObjectQuery 執行個體。</returns>
      <param name="query">表示要加入之結果的查詢。</param>
      <exception cref="T:System.ArgumentNullException">如果 query 參數是 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Where(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>將查詢限制為符合指定之篩選準則的結果。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 執行個體，它就相當於套用了 WHERE 的原始執行個體。</returns>
      <param name="predicate">篩選述詞 (Predicate)。</param>
      <param name="parameters">此方法所使用的零個或多個參數。</param>
      <exception cref="T:System.ArgumentNullException">predicate 或參數為 null。</exception>
      <exception cref="T:System.ArgumentException">predicate 為空字串。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectResult">
      <summary>此類別會實作 IEnumerable 和 IDisposable。此類別的執行個體會從 ObjectQuery.Execute 方法傳回。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.#ctor">
      <summary>這個建構函式的用途，在供建立測試複本之用，會覆寫具有 Mock 或 Fake 行為的成員。將這個建構函式用於其他用途，可能會導致未預期的行為，包括但不限於擲回 <see cref="T:System.NullReferenceException" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.Dispose">
      <summary>執行與釋出、釋放或重設資源相關聯的工作。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.Dispose(System.Boolean)">
      <summary>釋放物件結果所使用的資源。</summary>
      <param name="disposing">true 表示同時釋放 Managed 和 Unmanaged 資源，false 表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult.ElementType">
      <summary>在衍生類別中覆寫時，會取得泛型 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> 的類型。</summary>
      <returns>泛型 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> 的類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.GetNextResult``1">
      <summary>取得預存程序的下一個結果集。</summary>
      <returns>列舉下一個結果集之值的 ObjectResult。如果沒有其他值，或者如果 ObjectResult 不是預存程序呼叫的結果，則為 null。</returns>
      <typeparam name="TElement">項目的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看查詢結果的列舉值。</summary>
      <returns>逐一查看查詢結果的列舉值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>IListSource.ContainsListCollection 實作。一律傳回 false。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#ComponentModel#IListSource#GetList">
      <summary>以適用於資料繫結 (Data Binding) 的格式傳回結果。</summary>
      <returns>實體物件的 <see cref="T:System.Collections.IList" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>傳回逐一查看查詢結果的非同步列舉值。</summary>
      <returns>逐一查看查詢結果的非同步列舉值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectResult`1">
      <summary>此類別表示 <see cref="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Execute(System.Data.Entity.Core.Objects.MergeOption)" /> 方法的結果。</summary>
      <typeparam name="T">結果的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.#ctor">
      <summary>這個建構函式的用途，在供建立測試複本之用，會覆寫具有 Mock 或 Fake 行為的成員。將這個建構函式用於其他用途，可能會導致未預期的行為，包括但不限於擲回 <see cref="T:System.NullReferenceException" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">true 表示釋放 Managed 和 Unmanaged 資源，false 表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult`1.ElementType">
      <summary>取得 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> 的類型。</summary>
      <returns>
        <see cref="T:System.Type" />，它是 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> 的類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.GetEnumerator">
      <summary>傳回逐一查看查詢結果的列舉值。</summary>
      <returns>逐一查看查詢結果的列舉值。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>非同步取得可逐一查看 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> 的列舉值。</summary>
      <returns>可逐一查看 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> 的列舉值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectSet`1">
      <summary>表示用來執行建立、讀取、更新和刪除作業的具類型實體集。</summary>
      <typeparam name="TEntity">實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.AddObject(`0)">
      <summary>將物件加入至目前實體集中的物件內容。</summary>
      <param name="entity">要加入的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.ApplyCurrentValues(`0)">
      <summary>將純量值從提供的物件複製到 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 中具有相同索引鍵的物件。</summary>
      <returns>更新的物件。</returns>
      <param name="currentEntity">具有要套用至原始物件之屬性更新的已中斷連結物件。currentEntity 的實體索引鍵必須符合 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 中項目的 <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> 屬性。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.ApplyOriginalValues(`0)">
      <summary>設定 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 的 <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.OriginalValues" /> 屬性，以符合所提供物件的屬性值。</summary>
      <returns>更新的物件。</returns>
      <param name="originalEntity">具有要套用至原始物件之屬性更新的已中斷連結物件。originalEntity 的實體索引鍵必須符合 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 中項目的 <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> 屬性。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.Attach(`0)">
      <summary>將物件或物件圖形附加至目前實體集中的物件內容。</summary>
      <param name="entity">要附加的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.CreateObject``1">
      <summary>建立指定類型的執行個體。</summary>
      <returns>所要求類型 T 的執行個體，或者是對應到類型 T 的 Proxy 類型執行個體。</returns>
      <typeparam name="T">要傳回的物件類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.CreateObject">
      <summary>建立新的實體類型物件。</summary>
      <returns>新的實體類型物件，或者是對應到實體類型的 Proxy 類型執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.DeleteObject(`0)">
      <summary>將物件標記為待刪除。</summary>
      <param name="entity">表示要刪除之實體的物件。此物件可以處於任何狀態中，但 <see cref="F:System.Data.Entity.EntityState.Detached" /> 除外。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.Detach(`0)">
      <summary>從物件內容中移除物件。</summary>
      <param name="entity">要中斷連結的物件。只會移除實體。如果有任何由相同 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 所追蹤的相關物件存在，這些物件將不會自動中斷連結。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectSet`1.EntitySet">
      <summary>取得此 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 執行個體所表示之實體集的中繼資料。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 物件。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectStateEntry">
      <summary>表示實體、實體虛設常式或關聯性</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.AcceptChanges">
      <summary>接受目前值當做原始值。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)">
      <summary>設定項目的目前值，以符合所提供物件的屬性值。</summary>
      <param name="currentEntity">所中斷連結的物件，其中具有要套用至物件的更新值。currentEntity 也可以是物件的實體索引鍵。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)">
      <summary>設定項目的原始值，以符合所提供物件的屬性值。</summary>
      <param name="originalEntity">具有要套用至物件之原始值的已卸離物件。originalEntity 也可以是物件的實體索引鍵。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ChangeState(System.Data.Entity.EntityState)">
      <summary>將項目狀態變更成指定的 <see cref="T:System.Data.Entity.EntityState" /> 值。</summary>
      <param name="state">要對項目的 <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.State" /> 屬性所設定的 <see cref="T:System.Data.Entity.EntityState" /> 值。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.CurrentValues">
      <summary>取得與此 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 相關聯之物件或關聯性的目前屬性值。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.CurrentValueRecord" />，其中包含與此 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 相關聯之物件或關聯性的目前值。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.Delete">
      <summary>將實體標記為已刪除。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.Entity">
      <summary>取得實體物件。</summary>
      <returns>實體物件。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey">
      <summary>取得實體索引鍵。</summary>
      <returns>實體索引鍵。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntitySet">
      <summary>取得物件或關聯性的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />。</summary>
      <returns>物件或關聯性的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.GetModifiedProperties">
      <summary>傳回自從上一次呼叫 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> 以來已經變更之物件屬性的名稱。</summary>
      <returns>做為字串之名稱的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.GetUpdatableOriginalValues">
      <summary>取得與此 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 相關聯之物件的可更新原始值版本。</summary>
      <returns>物件資料的可更新原始值。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.IsPropertyChanged(System.String)">
      <summary>使用 DetectChanges 來判斷具有指定名稱之屬性的目前值是否與其原始值不同。請注意，這可能與標記為已修改的屬性不同，因為未變更的屬性仍可標記為已修改。</summary>
      <returns>如果屬性已變更，則為 true，否則為 false。</returns>
      <param name="propertyName">屬性的名稱。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.IsRelationship">
      <summary>取得值，指出 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 是否表示關聯性。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 是表示關聯性則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.ObjectStateManager">
      <summary>取得 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.OriginalValues">
      <summary>取得物件或關聯性的唯讀版原始值。</summary>
      <returns>關聯性集項目或實體的原始值的唯讀版本。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.RejectPropertyChanges(System.String)">
      <summary>拒絕上次載入、附加、儲存屬性或接受屬性變更後，對指定名稱之屬性所做的任何變更。屬性的原始值已儲存，且該屬性將不會再標記為已修改。</summary>
      <param name="propertyName">要變更的屬性名稱。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.RelationshipManager">
      <summary>取得項目所表示之物件的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 執行個體。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.SetModified">
      <summary>設定要修改之物件或關聯性的狀態。</summary>
      <exception cref="T:System.InvalidOperationException">如果狀態不是 Modified 或 Unchanged</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.SetModifiedProperty(System.String)">
      <summary>將指定的屬性標記為已修改。</summary>
      <param name="propertyName">屬性的名稱。</param>
      <exception cref="T:System.InvalidOperationException">如果狀態不是 Modified 或 Unchanged</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.State">
      <summary>取得 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 的狀態。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 的狀態。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>用來報告複雜屬性已變更。EntityMemberChanging 期間快取的屬性值現在會加入至 OriginalValues</summary>
      <param name="entityMemberName">已變更的最上層實體屬性名稱</param>
      <param name="complexObject">包含已變更之屬性的複雜物件</param>
      <param name="complexObjectMemberName">complexObject 上已變更的屬性名稱</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>用來報告複雜屬性將會變更。呼叫此方法時會快取所指定屬性的目前值。</summary>
      <param name="entityMemberName">將要變更之最上層實體屬性的名稱</param>
      <param name="complexObject">包含將要變更之屬性的複雜物件</param>
      <param name="complexObjectMemberName">complexObject 上將要變更的屬性名稱</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanged(System.String)">
      <summary>用來報告純量屬性已變更。EntityMemberChanging 期間快取的屬性值現在會加入至 OriginalValues</summary>
      <param name="entityMemberName">已變更之實體屬性的名稱</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanging(System.String)">
      <summary>用來報告純量實體屬性將會變更。呼叫此方法時會快取所指定屬性的目前值。</summary>
      <param name="entityMemberName">將要變更的實體屬性名稱</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityState">
      <summary>從 ObjectStateEntry 傳回 EntityState</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectStateManager">
      <summary>維護實體 (Entity) 類型執行個體 (Instance) 和關聯性 (Relationship) 執行個體的物件狀態與識別 (Identity) 管理。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 類別的新執行個體。</summary>
      <param name="metadataWorkspace">提供對應和中繼資料 (Metadata) 資訊的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeObjectState(System.Object,System.Data.Entity.EntityState)">
      <summary>將指定物件的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 狀態變更為指定的 entityState。</summary>
      <returns>所提供之實體的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</returns>
      <param name="entity">必須對其變更狀態的物件。</param>
      <param name="entityState">物件的新狀態。</param>
      <exception cref="T:System.ArgumentNullException">當實體為 null 時。</exception>
      <exception cref="T:System.InvalidOperationException">當物件尚未卸離而且在狀態管理員中也沒有實體時；或者您嘗試將狀態從其他任何 <see cref="T:System.Data.Entity.EntityState." /> 變更為 <see cref="F:System.Data.Entity.EntityState.Detached" />；或者狀態不是有效的 <see cref="T:System.Data.Entity.EntityState" /> 值時。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.Data.Entity.EntityState)">
      <summary>變更兩個實體物件之間關聯性的狀態，其中的關聯性狀態是依據兩個相關物件和巡覽屬性名稱而指定的。</summary>
      <returns>已變更之關聯性的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</returns>
      <param name="sourceEntity">位於關聯性其中一端之來源實體的物件執行個體或 <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="targetEntity">位於關聯性另一端之目標實體的物件執行個體或 <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="navigationProperty">傳回指定目標之來源的導覽屬性名稱。</param>
      <param name="relationshipState">指定之關聯性的要求 <see cref="T:System.Data.Entity.EntityState" />。</param>
      <exception cref="T:System.ArgumentNullException">當來源或目標為 null 時。</exception>
      <exception cref="T:System.InvalidOperationException">當來源或目標的狀態為 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 時，嘗試將關聯性的狀態變更為 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 或 <see cref="F:System.Data.Entity.EntityState.Detached" /> 以外的值；或者當來源或目標的狀態為 <see cref="F:System.Data.Entity.EntityState.Added" /> 時，嘗試將關聯性的狀態變更為 <see cref="F:System.Data.Entity.EntityState.Added" /> 或 <see cref="F:System.Data.Entity.EntityState.Detached" /> 以外的值；或者當狀態不是有效的 <see cref="T:System.Data.Entity.EntityState" /> 值時</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.String,System.Data.Entity.EntityState)">
      <summary>變更兩個實體物件之間關聯性的狀態，其中的關聯性狀態是依據兩個相關物件和關聯性屬性而指定的。</summary>
      <returns>已變更之關聯性的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</returns>
      <param name="sourceEntity">位於關聯性其中一端之來源實體的物件執行個體或 <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="targetEntity">位於關聯性另一端之目標實體的物件執行個體或 <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="relationshipName">關聯性的名稱。</param>
      <param name="targetRoleName">位於關聯性目標端的角色名稱。</param>
      <param name="relationshipState">指定之關聯性的要求 <see cref="T:System.Data.Entity.EntityState" />。</param>
      <exception cref="T:System.ArgumentNullException">當來源或目標為 null 時。</exception>
      <exception cref="T:System.InvalidOperationException">當來源或目標的狀態為 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 時，嘗試將關聯性的狀態變更為 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 或 <see cref="F:System.Data.Entity.EntityState.Detached" /> 以外的值；或者當來源或目標的狀態為 <see cref="F:System.Data.Entity.EntityState.Added" /> 時，嘗試將關聯性的狀態變更為 <see cref="F:System.Data.Entity.EntityState.Added" /> 或 <see cref="F:System.Data.Entity.EntityState.Detached" /> 以外的值；或者當狀態不是有效的 <see cref="T:System.Data.Entity.EntityState" /> 值時</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState``1(``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Entity.EntityState)">
      <summary>變更兩個實體物件之間關聯性的狀態，其中的關聯性狀態是依據兩個相關物件和定義巡覽屬性的 LINQ 運算式而指定的。</summary>
      <returns>已變更之關聯性的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</returns>
      <param name="sourceEntity">位於關聯性其中一端之來源實體的物件執行個體或 <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="targetEntity">位於關聯性另一端之目標實體的物件執行個體或 <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="navigationPropertySelector">LINQ 運算式，此運算式會選取傳回所指定目標之來源的導覽屬性。</param>
      <param name="relationshipState">指定之關聯性的要求 <see cref="T:System.Data.Entity.EntityState" />。</param>
      <typeparam name="TEntity">來源物件的實體類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">當來源、目標或選取器為 null 時。</exception>
      <exception cref="T:System.ArgumentException">選取器格式不正確，或者無法傳回導覽屬性。</exception>
      <exception cref="T:System.InvalidOperationException">當來源或目標的狀態為 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 時，嘗試將關聯性的狀態變更為 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 或 <see cref="F:System.Data.Entity.EntityState.Detached" /> 以外的值；或者當來源或目標的狀態為 <see cref="F:System.Data.Entity.EntityState.Added" /> 時，嘗試將關聯性的狀態變更為 <see cref="F:System.Data.Entity.EntityState.Added" /> 或 <see cref="F:System.Data.Entity.EntityState.Detached" /> 以外的值；或者當狀態不是有效的 <see cref="T:System.Data.Entity.EntityState" /> 值時</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntries(System.Data.Entity.EntityState)">
      <summary>傳回具有給定狀態之物件或關聯性的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 物件集合。</summary>
      <returns>處於給定 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 中的 <see cref="T:System.Data.Entity.EntityState" /> 物件集合。</returns>
      <param name="state">用來篩選傳回之 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 物件的 <see cref="T:System.Data.Entity.EntityState" />。</param>
      <exception cref="T:System.ArgumentException">當狀態為 <see cref="F:System.Data.Entity.EntityState.Detached" /> 時。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntry(System.Data.Entity.Core.EntityKey)">
      <summary>傳回具有指定之索引鍵的物件或關聯性項目的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</summary>
      <returns>給定 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的對應 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</returns>
      <param name="key">
        <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <exception cref="T:System.ArgumentNullException">當索引鍵為 null 時。</exception>
      <exception cref="T:System.ArgumentException">當狀態管理員中找不到指定的索引鍵時。</exception>
      <exception cref="T:System.InvalidOperationException">具有指定之 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的實體不存在 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 中。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntry(System.Object)">
      <summary>傳回指定之物件的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</summary>
      <returns>給定 <see cref="T:System.Object" /> 的對應 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</returns>
      <param name="entity">已擷取之 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 所屬的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.InvalidOperationException">指定之 <see cref="T:System.Object" /> 的實體不存在 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 中。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetRelationshipManager(System.Object)">
      <summary>傳回指定物件所使用的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />。</summary>
      <returns>指定物件的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />。</returns>
      <param name="entity">要為其傳回 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 的物件。</param>
      <exception cref="T:System.InvalidOperationException">實體不會實作 IEntityWithRelationships 且不是由此 ObjectStateManager 追蹤</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateManager.MetadataWorkspace">
      <summary>取得與此狀態管理員相關聯的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />。</summary>
      <returns>與此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 相關聯的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />。</returns>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectStateManager.ObjectStateManagerChanged">
      <summary>在狀態管理員中加入或移除實體時發生。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.Objects.ObjectStateEntry@)">
      <summary>嘗試擷取具有指定之 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的物件或關聯性的對應 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</summary>
      <returns>布林值，如果具有給定 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的對應 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />，則為 true，否則為 false。</returns>
      <param name="key">給定的 <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="entry">當此方法傳回時，就會包含給定 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。此參數會在未初始化的狀態下傳遞。</param>
      <exception cref="T:System.ArgumentNullException">為索引鍵提供了 null (在 Visual Basic 中則為 Nothing) 值。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Object,System.Data.Entity.Core.Objects.ObjectStateEntry@)">
      <summary>嘗試擷取指定之 <see cref="T:System.Object" /> 的對應 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</summary>
      <returns>布林值，如果具有給定物件的對應 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />，則為 true，否則為 false。</returns>
      <param name="entity">已擷取之 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 所屬的 <see cref="T:System.Object" />。</param>
      <param name="entry">當此方法傳回時，就會包含給定 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。此參數會在未初始化的狀態下傳遞。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetRelationshipManager(System.Object,System.Data.Entity.Core.Objects.DataClasses.RelationshipManager@)">
      <summary>傳回指定物件所使用的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />。</summary>
      <returns>如果已為所提供的實體傳回 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 執行個體則為 true，否則為 false。</returns>
      <param name="entity">要為其傳回 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 的物件。</param>
      <param name="relationshipManager">當此方法傳回時，會包含實體的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.OriginalValueRecord">
      <summary>從資料庫擷取的實體屬性原始值。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver">
      <summary>DataContractResolver，它知道如何將針對永續性無知類別建立的 Proxy 類型解析為其基底類型。這會與 DataContractSerializer 搭配使用。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)">
      <summary>在還原序列化期間，將任何 xsi:type 資訊對應至非持續性物件的實際類型。</summary>
      <returns>傳回 xsi:type 對應的類型。如果找不到符合 xsi:type 的已知類型，則傳回 null。</returns>
      <param name="typeName">要對應的 xsi:type 資訊。</param>
      <param name="typeNamespace">xsi:type 的命名空間。</param>
      <param name="declaredType">宣告的類型。</param>
      <param name="knownTypeResolver">
        <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" /> 的執行個體。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)">
      <summary>在還原序列化期間，將實際類型對應至 xsi:type 資訊。</summary>
      <returns>如果已解析類型則為 true，否則為 false。</returns>
      <param name="type">非持續性物件的實際類型。</param>
      <param name="declaredType">宣告的類型。</param>
      <param name="knownTypeResolver">
        <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" /> 的執行個體。</param>
      <param name="typeName">此方法傳回時，會包含 xsi:type 宣告清單。</param>
      <param name="typeNamespace">此方法傳回時，包含使用的命名空間清單。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.RefreshMode">
      <summary>定義從資料庫重新整理記憶體內的資料時，用來處理已修改之屬性的不同方式。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.RefreshMode.ClientWins">
      <summary>對於未修改的用戶端物件，是與 StoreWins 相同的行為。對於已修改的用戶端物件，請用存放區值重新整理原始值，以便將所有值保留在用戶端物件上。下次更新時，所有用戶端變更單位都會視為已修改且需要更新。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.RefreshMode.StoreWins">
      <summary>捨棄用戶端上的所有變更，並以存放區值重新整理值。用戶端原始值會更新，以符合存放區。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.SaveOptions">
      <summary>用來修改 ObjectContext.SaveChanges() 行為的旗標</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.AcceptAllChangesAfterSave">
      <summary>儲存變更後會呼叫 AcceptAllChangesAfterSave 方法，此方法會重設 ObjectStateManager 中的變更追蹤。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.DetectChangesBeforeSave">
      <summary>在儲存變更前會呼叫 DetectChanges 方法，以將附加至物件內容之物件的屬性值與 ObjectStateManager 中的資料進行同步處理。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.None">
      <summary>在不呼叫 DetectChanges 或 AcceptAllChangesAfterSave 方法的情況下儲存變更。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.ComplexObject">
      <summary>這是介面，表示要成為 ADO.NET 中實體所需的最低限度介面。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.ComplexObject" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.ReportPropertyChanged(System.String)">
      <summary>通知變更追蹤程式，複雜物件中的屬性已經改變。</summary>
      <param name="property">已變更屬性的名稱。</param>
      <exception cref="T:System.ArgumentNullException">property 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.ReportPropertyChanging(System.String)">
      <summary>通知變更追蹤程式，複雜物件上的屬性變更處於暫止狀態。</summary>
      <param name="property">變更中屬性的名稱。</param>
      <exception cref="T:System.ArgumentNullException">property 為 null。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute">
      <summary>複雜屬性 (Property) 的屬性 (Attribute)，隱含的預設 AttributeUsage 屬性 (Property) Inherited=True，AllowMultiple=False，中繼資料系統會預期此屬性 (Attribute)，而且只會查看這些屬性 (Attribute) 的第一個 (即使有多個)。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute">
      <summary>複雜類型的屬性</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute">
      <summary>識別 Edm 基底類別的屬性</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute">
      <summary>表示列舉類型的屬性。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmFunctionAttribute">
      <summary>表示指定的方法是 EDM 函式的 Proxy。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmFunctionAttribute.#ctor(System.String,System.String)">
      <summary>建立新的 DbFunctionAttribute 執行個體。</summary>
      <param name="namespaceName">由屬性化方法所表示的 EDM 函式其命名空間名稱。</param>
      <param name="functionName">由屬性化方法所表示的 EDM 函式其函式名稱。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmPropertyAttribute">
      <summary>對應至存放區項目之屬性 (Property) 的基底屬性 (Attribute)。隱含的預設 AttributeUsage 屬性 (Property) Inherited=True，AllowMultiple=False，中繼資料系統會預期此屬性 (Attribute)，而且只會查看這些屬性 (Attribute) 的第一個 (即使有多個)。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute">
      <summary>根據概念模型中的關聯，定義兩個實體 (Entity) 類型之間的關聯性 (Relationship)。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type)">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" /> 類別的執行個體。</summary>
      <param name="relationshipNamespaceName">此實體所參與之關聯的命名空間 (Namespace) 的名稱。</param>
      <param name="relationshipName">此實體所參與之關聯性的名稱。</param>
      <param name="role1Name">位於關聯某一端之類型的角色名稱。</param>
      <param name="role1Multiplicity">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 的值，表示位於關聯某一端的多重性，例如一或多。</param>
      <param name="role1Type">位於關聯某一端之實體的類型。</param>
      <param name="role2Name">位於關聯另一端之類型的角色名稱。</param>
      <param name="role2Multiplicity">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 的值，表示位於關聯另一端的多重性，例如一或多。</param>
      <param name="role2Type">位於關聯另一端之實體的類型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" /> 類別的新執行個體。</summary>
      <param name="relationshipNamespaceName">此實體所參與之關聯的命名空間 (Namespace) 的名稱。</param>
      <param name="relationshipName">此實體所參與之關聯性的名稱。</param>
      <param name="role1Name">位於關聯某一端之類型的角色名稱。</param>
      <param name="role1Multiplicity">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 的值，表示位於關聯某一端的多重性，例如一或多。</param>
      <param name="role1Type">位於關聯某一端之實體的類型。</param>
      <param name="role2Name">位於關聯另一端之類型的角色名稱。</param>
      <param name="role2Multiplicity">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 的值，表示位於關聯另一端的多重性，例如一或多。</param>
      <param name="role2Type">位於關聯另一端之實體的類型。</param>
      <param name="isForeignKey">值，指出關聯性是否以外部索引鍵值為基礎。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.IsForeignKey">
      <summary>取得布林值，此值表示關聯性是否以外部索引鍵值為基礎。</summary>
      <returns>如果關聯性是根據外部索引鍵值，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.RelationshipName">
      <summary>關聯性的名稱。</summary>
      <returns>
        <see cref="T:System.String" />，它是此 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" /> 所定義之關聯性的名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.RelationshipNamespaceName">
      <summary>關聯性的命名空間。</summary>
      <returns>
        <see cref="T:System.String" />，它是關聯性的命名空間。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Multiplicity">
      <summary>位於關聯性某一端的多重性。</summary>
      <returns>表示多重性的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Name">
      <summary>位於關聯性某一端之角色的名稱。</summary>
      <returns>
        <see cref="T:System.String" />，它是角色的名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Type">
      <summary>位於關聯性某一端之實體的類型。</summary>
      <returns>
        <see cref="T:System.Type" />，它是位於關聯這一端之物件的類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Multiplicity">
      <summary>位於關聯性另一端的多重性。</summary>
      <returns>表示多重性的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Name">
      <summary>位於關聯性另一端之角色的名稱。</summary>
      <returns>
        <see cref="T:System.String" />，它是角色的名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Type">
      <summary>位於關聯性另一端之實體的類型。</summary>
      <returns>
        <see cref="T:System.Type" />，它是位於關聯另一端之物件的類型。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute">
      <summary>識別為 RelationshipSet 所定義端的屬性 (Attribute)。隱含的預設 AttributeUsage 屬性 (Property) Inherited=True，AllowMultiple=False，中繼資料系統會預期此屬性 (Attribute)，而且只會查看這些屬性 (Attribute) 的第一個 (即使有多個)。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.#ctor(System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="relationshipNamespaceName">關聯性 (Relationship) 屬性的命名空間 (Namespace) 名稱。</param>
      <param name="relationshipName">關聯性的名稱。此關聯性名稱不符合命名空間。</param>
      <param name="targetRoleName">位於關聯性另一端的角色名稱。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipName">
      <summary>取得不符合的關聯性名稱。</summary>
      <returns>關聯性名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipNamespaceName">
      <summary>導覽屬性的命名空間名稱。</summary>
      <returns>成為命名空間名稱的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.TargetRoleName">
      <summary>取得位於關聯性另一端的角色名稱。</summary>
      <returns>目標角色名稱是由概念模型中定義此關聯性之關聯中的另一個 End 項目的 Role 屬性所定義。如需詳細資訊，請參閱＜Association (EDM)＞。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute">
      <summary>IEntity 中純量屬性 (Property) 的屬性 (Attribute)。隱含的預設 AttributeUsage 屬性 (Property) Inherited=True，AllowMultiple=False，中繼資料系統會預期此屬性 (Attribute)，而且只會查看這些屬性 (Attribute) 的第一個 (即使有多個)。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.EntityKeyProperty">
      <summary>取得或設定表示此屬性是否為實體索引鍵之一部分的值。</summary>
      <returns>表示此屬性是否為實體索引鍵之一部分的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.IsNullable">
      <summary>取得或設定值，此值表示此屬性是否可以具有 null 值。</summary>
      <returns>值，此值表示此屬性是否可以具有 null 值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute">
      <summary>靜態類型的屬性</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute.#ctor(System.String)">
      <summary>使用組件所參考之每個模型的唯一值，初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute" /> 類別的新執行個體 (Instance)。</summary>
      <param name="assemblyGuid">字串，它是組件中模型的唯一 GUID 值。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute">
      <summary>系統化類型的基底屬性</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute.Name">
      <summary>概念結構描述中類型的名稱，它會對應至此屬性所套用的類別 (Class)。</summary>
      <returns>成為名稱的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute.NamespaceName">
      <summary>概念結構描述中對應至此類型之實體物件類型或複雜類型的命名空間名稱。</summary>
      <returns>成為命名空間名稱的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1">
      <summary>建立特殊 EDM 建構模型的實體集合，可以是特殊類型的所有實體，或參與特殊關聯性的實體。</summary>
      <typeparam name="TEntity">此集合中實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Add(`0)">
      <summary>將物件加入至集合。</summary>
      <param name="item">要加入至集合的物件。實體必須實作 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />。</param>
      <exception cref="T:System.ArgumentNullException">entity 是 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})">
      <summary>在物件內容中，定義物件與相關物件之集合之間的關聯性。</summary>
      <param name="entities">物件內容中與來源物件相關之物件的集合。</param>
      <exception cref="T:System.ArgumentNullException">entities 集合是 null。</exception>
      <exception cref="T:System.InvalidOperationException">來源物件或 entities 集合中的物件為 null 或狀態不是 <see cref="F:System.Data.Entity.EntityState.Unchanged" /> 或 <see cref="F:System.Data.Entity.EntityState.Modified" />，或者無法根據 EDM 中繼資料定義關聯性。如果概念結構描述中的關聯不支援這兩個類型之間的關聯性，就可能會發生這種情況。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Attach(`0)">
      <summary>在物件內容中，定義兩個所附加物件之間的關聯性。</summary>
      <param name="entity">正在附加的物件。</param>
      <exception cref="T:System.ArgumentNullException">當 entity 是 null 時。</exception>
      <exception cref="T:System.InvalidOperationException">當 entity 無法與來源物件相關聯時。如果概念結構描述中的關聯不支援這兩個類型之間的關聯性，或者物件為 null 或狀態不是 <see cref="F:System.Data.Entity.EntityState.Unchanged" /> 或 <see cref="F:System.Data.Entity.EntityState.Modified" />，就可能會發生這種情況。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Clear">
      <summary>從集合中移除所有實體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Contains(`0)">
      <summary>判斷特定物件是否存在集合中。</summary>
      <returns>如果在 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 中找到此物件則為 true，否則為 false。</returns>
      <param name="item">要在 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 中尋找的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)">
      <summary>將集合的所有內容複製到陣列，從目標陣列的指定索引開始。</summary>
      <param name="array">要複製的目的陣列。</param>
      <param name="arrayIndex">陣列中以零起始的索引，位於複製開始的位置。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Count">
      <summary>取得包含在集合中的物件數目。</summary>
      <returns>包含在 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 中的元素數目。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.CreateSourceQuery">
      <summary>傳回物件查詢，執行此查詢時，它就會傳回存在目前集合中的相同物件集合。</summary>
      <returns>代表實體集合的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />。</returns>
      <exception cref="T:System.InvalidOperationException">當物件的狀態為 <see cref="F:System.Data.Entity.EntityState.Added" /> 時，或者當物件的狀態為 <see cref="F:System.Data.Entity.EntityState.Detached" /> 並有 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 而沒有 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 時。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.GetEnumerator">
      <summary>傳回可用來逐一查看集合中物件的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，它會逐一查看 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 所快取的值集合。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.IsReadOnly">
      <summary>取得值，此值表示 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 是否為唯讀。</summary>
      <returns>一律傳回 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>使用指定的合併選項，將相關物件載入集合中。</summary>
      <param name="mergeOption">指定此集合中的物件應該如何與可能已經從針對相同 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的先前查詢所傳回的物件合併。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>使用預設的合併選項，以非同步方式將一個或多個相關實體載入相關端。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="mergeOption">合併選項。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 CancellationToken。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>在內部用來還原序列化實體物件。</summary>
      <param name="context">資料流內容。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>在內部用來序列化實體物件。</summary>
      <param name="context">資料流內容。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Remove(`0)">
      <summary>從集合中移除物件並將關聯性標記為待刪除。</summary>
      <returns>如果成功移除了項目，則為 true，否則為 false。</returns>
      <param name="item">要從集合移除的物件。</param>
      <exception cref="T:System.ArgumentNullException">實體物件是 null。</exception>
      <exception cref="T:System.InvalidOperationException">實體物件未附加至相同的物件內容，或者實體物件沒有有效的關聯性管理員。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回可用來逐一查看 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 所快取之值集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，它會逐一查看 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 所快取的值集合。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>IListSource.ContainsListCollection 實作。一律傳回 false。這表示我們傳回的 IList 包含實際資料，而不是集合清單。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList">
      <summary>傳回集合當做用於資料繫結 (Data Binding) 的 <see cref="T:System.Collections.IList" />。</summary>
      <returns>實體物件的 <see cref="T:System.Collections.IList" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject">
      <summary>這是類別是所有已規定 EntityObject 類別的基礎。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.EntityKey">
      <summary>取得或設定此物件的索引鍵。</summary>
      <returns>此物件的 <see cref="T:System.Data.Entity.Core.EntityKey" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.EntityState">
      <summary>取得物件的實體狀態。</summary>
      <returns>此物件的 <see cref="T:System.Data.Entity.EntityState" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.ReportPropertyChanged(System.String)">
      <summary>向變更追蹤程式通知屬性已經變更。</summary>
      <param name="property">已變更屬性的名稱。</param>
      <exception cref="T:System.ArgumentNullException">property 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.ReportPropertyChanging(System.String)">
      <summary>向變更追蹤程式通知屬性變更已暫止。</summary>
      <param name="property">變更中屬性的名稱。</param>
      <exception cref="T:System.ArgumentNullException">property 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.System#Data#Entity#Core#Objects#DataClasses#IEntityWithChangeTracker#SetChangeTracker(System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker)">
      <summary>ObjectStateManager 用來在快取中附加或卸離此 EntityObject。</summary>
      <param name="changeTracker">包含此實體的 ObjectStateEntry 參考</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.System#Data#Entity#Core#Objects#DataClasses#IEntityWithRelationships#RelationshipManager">
      <summary>傳回消極式建立的關聯性導覽屬性物件 (集合和參考) 的容器。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference">
      <summary>建立具有多重性 1 之關聯性端點的模型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityReference.EntityKey">
      <summary>傳回相關物件的索引鍵。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityKey" />，它是相關物件的索引鍵。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1">
      <summary>建立具有多重性 1 之關聯性端點的模型。</summary>
      <typeparam name="TEntity">正在參考之實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.#ctor">
      <summary>建立 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Attach(`0)">
      <summary>在物件內容中，建立兩個物件之間的多對一或一對一關聯性。</summary>
      <param name="entity">正在附加的物件。</param>
      <exception cref="T:System.ArgumentNullException">當 entity 是 null 時。</exception>
      <exception cref="T:System.InvalidOperationException">當 entity 無法與目前的相關端相關聯時。如果概念結構描述中的關聯不支援這兩個類型之間的關聯性，就可能會發生這種情況。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.CreateSourceQuery">
      <summary>建立傳回相關物件的對等物件查詢。</summary>
      <returns>傳回相關物件的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />。</returns>
      <exception cref="T:System.InvalidOperationException">當物件的狀態為 <see cref="F:System.Data.Entity.EntityState.Added" /> 時，或者當物件的狀態為 <see cref="F:System.Data.Entity.EntityState.Detached" /> 並有 <see cref="P:System.Data.Entity.Core.Objects.ObjectQuery.MergeOption" /> 而沒有 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 時。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>使用指定的合併選項，載入此 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 的相關物件。</summary>
      <param name="mergeOption">指定如果此物件已經存在 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 中，應該如何傳回此物件。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 的來源為 null；或者查詢傳回多個相關端；或者查詢傳回零個相關端，但是預期有一個相關端。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>使用預設的合併選項，以非同步方式將一個或多個相關實體載入相關端。</summary>
      <returns>已載入至相關端的相關實體。</returns>
      <param name="mergeOption">合併選項。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 CancellationToken。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.OnRefDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>此方法是在內部用來序列化相關實體物件。</summary>
      <param name="context">序列化的資料流。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>此方法是在內部用來序列化相關實體物件。</summary>
      <param name="context">序列化的資料流。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Value">
      <summary>取得或設定此 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 所傳回的相關物件。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 所傳回的物件。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker">
      <summary>此介面是由變更追蹤器實作，且資料類別會使用此介面報告變更</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>通知變更追蹤程式，複雜類型中的屬性已經改變。</summary>
      <param name="entityMemberName">已變更之實體類型的複雜屬性的名稱。</param>
      <param name="complexObject">包含已變更之屬性的複雜類型。</param>
      <param name="complexObjectMemberName">針對複雜類型變更之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>向變更追蹤程式通知複雜屬性的暫止變更。</summary>
      <param name="entityMemberName">所變更之最上層實體屬性的名稱。</param>
      <param name="complexObject">包含所變更之屬性的複雜類型。</param>
      <param name="complexObjectMemberName">複雜類型上所變更之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged(System.String)">
      <summary>通知變更追蹤程式，某個實體類型的屬性已經變更。</summary>
      <param name="entityMemberName">已變更之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging(System.String)">
      <summary>將實體類型之屬性的暫止變更通知變更追蹤程式。</summary>
      <param name="entityMemberName">要變更的屬性名稱。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityState">
      <summary>取得所追蹤物件的目前狀態。</summary>
      <returns>表示所追蹤物件之狀態的 <see cref="T:System.Data.Entity.EntityState" />。如需詳細資訊，請參閱＜識別解析、狀態管理和變更追蹤＞以及＜在 POCO 實體中追蹤變更＞。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker">
      <summary>資料類別必須實作才能受變更追蹤器管理的最低限度介面。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker.SetChangeTracker(System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker)">
      <summary>取得或設定用來報告變更的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker" />。</summary>
      <param name="changeTracker">用來報告變更的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker" />。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey">
      <summary>定義包含索引鍵之實體的介面。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey.EntityKey">
      <summary>針對實作此介面之實體類型的執行個體取得或設定 <see cref="T:System.Data.Entity.Core.EntityKey" />。</summary>
      <returns>實體類型的執行個體的 <see cref="T:System.Data.Entity.Core.EntityKey" />，其會實作此介面。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships">
      <summary>公開 (Expose) 關聯性時，資料類別必須實作的介面</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships.RelationshipManager">
      <summary>傳回關聯性管理員，以便管理實體類型之執行個體 (Instance) 的關聯性。</summary>
      <returns>此實體的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd">
      <summary>表示關聯性的一端。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Add(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>將物件加入至相關端。</summary>
      <param name="entity">要加入至集合的物件。實體必須實作 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Add(System.Object)">
      <summary>將物件加入至相關端。</summary>
      <param name="entity">要加入至集合的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>定義兩個所附加物件之間的關聯性。</summary>
      <param name="entity">正在附加的物件。實體必須實作 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Attach(System.Object)">
      <summary>定義兩個所附加物件之間的關聯性。</summary>
      <param name="entity">正在附加的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.CreateSourceQuery">
      <summary>傳回 <see cref="T:System.Collections.IEnumerable" />，它代表屬於相關端的物件。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerable" />，它代表屬於相關端的物件。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.IEnumerator" />，它會逐一查看相關物件的集合。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，它會逐一查看相關物件的集合。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.IsLoaded">
      <summary>取得或設定值，指出是否已從資料庫載入此集合的所有實體 (針對 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference" />) 或集合中的所有實體 (針對 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />)。</summary>
      <returns>如果已載入所有相關實體或已明確將 IsLoaded 設為 true，則為 true；否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Load">
      <summary>使用預設合併選項，將一個或多個相關物件載入此相關端中。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>使用指定的合併選項，將一個或多個相關物件載入此相關端中。</summary>
      <param name="mergeOption">將物件合併至現有的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 時要使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>使用指定的合併選項，以非同步方式將一個或多個相關物件載入至相關端。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="mergeOption">將物件合併至現有的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 時要使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.LoadAsync(System.Threading.CancellationToken)">
      <summary>使用預設合併選項，以非同步方式將一個或多個相關物件載入至此相關端。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.RelationshipName">
      <summary>取得此相關端所參與之關聯性的名稱。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> 所參與之關聯性的名稱。此關聯性名稱不符合命名空間。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.RelationshipSet">
      <summary>傳回相關端中繼資料的參考。</summary>
      <returns>包含關聯性端點中繼資料的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>從位於相關端的物件集合中移除物件。</summary>
      <returns>如果成功移除實體，則為 true，如果實體不是 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> 的一部分，則為 false。</returns>
      <param name="entity">要從集合移除的物件。實體必須實作 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Remove(System.Object)">
      <summary>從位於相關端的物件集合中移除物件。</summary>
      <returns>如果成功移除實體，則為 true，如果實體不是 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> 的一部分，則為 false。</returns>
      <param name="entity">要從集合中移除的物件。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.SourceRoleName">
      <summary>取得位於關聯性來源端的角色名稱。</summary>
      <returns>位於關聯性來源端的角色名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.TargetRoleName">
      <summary>取得位於關聯性目標端的角色名稱。</summary>
      <returns>位於關聯性目標端的角色名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd">
      <summary>EntityCollection 和 EntityReference 的基底類別</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.AssociationChanged">
      <summary>對相關端進行變更時發生。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.IEnumerator" />，它會逐一查看相關物件的集合。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，它會逐一查看相關物件的集合。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.IsLoaded">
      <summary>取得值，此值指出所有相關物件是否都已經載入。</summary>
      <returns>如果相關端包含資料庫中的所有相關物件，則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load">
      <summary>使用預設合併選項，將一個或多個相關物件載入相關端中。</summary>
      <exception cref="T:System.InvalidOperationException">當來源物件是使用 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 查詢所擷取的，而且 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 不是 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 或相關物件已經載入時，或者當來源物件沒有附加至 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 或來源物件正在追蹤中，但是處於 <see cref="F:System.Data.Entity.EntityState.Added" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 狀態中，或者用於 <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /> 的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 是 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 時。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>使用指定的合併選項，從相關端載入一個或多個物件。</summary>
      <param name="mergeOption">將物件合併至現有的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 時要使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。</param>
      <exception cref="T:System.InvalidOperationException">當來源物件是使用 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 查詢所擷取的，而且 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 不是 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 或相關物件已經載入時，或者當來源物件沒有附加至 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 或來源物件正在追蹤中，但是處於 <see cref="F:System.Data.Entity.EntityState.Added" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 狀態中，或者用於 <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /> 的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 是 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 時。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>使用指定的合併選項，以非同步方式從相關端載入一個或多個物件。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="mergeOption">將物件合併至現有的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 時要使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">當來源物件是使用 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 查詢所擷取的，而且 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 不是 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 或相關物件已經載入時，或者當來源物件沒有附加至 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 或來源物件正在追蹤中，但是處於 <see cref="F:System.Data.Entity.EntityState.Added" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 狀態中，或者用於 <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /> 的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 是 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 時。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.LoadAsync(System.Threading.CancellationToken)">
      <summary>使用預設合併選項，以非同步方式將一個或多個相關物件載入相關端中。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">當來源物件是使用 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 查詢所擷取的，而且 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 不是 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 或相關物件已經載入時，或者當來源物件沒有附加至 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 或來源物件正在追蹤中，但是處於 <see cref="F:System.Data.Entity.EntityState.Added" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 狀態中，或者用於 <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /> 的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 是 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 時。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>在內部搭配 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 執行個體用來還原序列化實體物件。</summary>
      <param name="context">序列化的資料流。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.RelationshipName">
      <summary>取得此相關端所參與之關聯性的名稱。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd" /> 所參與之關聯性的名稱。此關聯性名稱不符合命名空間。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.RelationshipSet">
      <summary>取得相關端中繼資料的參考。</summary>
      <returns>包含關聯性端點中繼資料的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 物件。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.SourceRoleName">
      <summary>取得位於關聯性來源端的角色名稱。</summary>
      <returns>成為角色名稱的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Add(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>將實體加入至相關端。此方法的運作方式與 Add(object) 完全相同。保留它的目的在於提供與舊版 IRelatedEnd 的回溯相容性。</summary>
      <param name="entity">要加入至相關端的實體執行個體</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Add(System.Object)">
      <summary>將實體加入至相關端。如果將擁有者附加到快取，則會將所有連接的端點加入至該物件快取，同時將其對應的關係加入至 ObjectStateManager。關聯性的 RelatedEnd 也是固定的。</summary>
      <param name="entity">要加入至相關端的實體執行個體</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>將實體附加至相關端。此方法的運作方式與 Attach(object) 完全相同。保留它的目的在於提供與舊版 IRelatedEnd 的回溯相容性。</summary>
      <param name="entity">要附加至相關端的實體</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="entity" /> 為 null 時擲回。</exception>
      <exception cref="T:System.InvalidOperationException">當實體無法透過目前的關聯性端相關聯時擲回。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Attach(System.Object)">
      <summary>將實體附加至相關端。如果相關端已經填滿或部分填滿，這就會合併現有的實體與給定的實體。給定的實體不會視為相關實體的完整集合。擁有者和所有傳入的實體都必須處於 Unchanged 或 Modified 狀態。只有在狀態管理員已在追蹤關聯性執行個體時，才允許刪除的項目。</summary>
      <param name="entity">要附加至相關端的實體</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="entity" /> 為 null 時擲回。</exception>
      <exception cref="T:System.InvalidOperationException">當實體無法透過目前的關聯性端相關聯時擲回。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#CreateSourceQuery">
      <summary>傳回 <see cref="T:System.Collections.IEnumerable" />，它代表屬於相關端的物件。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerable" />，它代表屬於相關端的物件。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Remove(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>從相關端上移除實體。此方法的運作方式與 Remove(object) 完全相同。保留它的目的在於提供與舊版 IRelatedEnd 的回溯相容性。</summary>
      <returns>如果成功移除實體，則傳回 true，如果實體不是 RelatedEnd 的一部分，則為 false。</returns>
      <param name="entity">要從相關端移除的實體執行個體</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Remove(System.Object)">
      <summary>從相關端上移除實體。如果擁有者已附加至快取，則將關聯性標記為要刪除，如果關聯性為組合，則也要將實體標記為要刪除。</summary>
      <returns>如果成功移除實體，則傳回 true，如果實體不是 RelatedEnd 的一部分，則為 false。</returns>
      <param name="entity">要從相關端移除的實體執行個體</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.TargetRoleName">
      <summary>取得位於關聯性目標端的角色名稱。</summary>
      <returns>成為角色名稱的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipKind">
      <summary>識別關聯性的類型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.DataClasses.RelationshipKind.Association">
      <summary>關聯性是一種關聯</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager">
      <summary>消極式建立的關聯性導覽屬性物件 (集合和參考) 的容器。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.Create(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 物件。</summary>
      <returns>要求的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />。</returns>
      <param name="owner">參考正在呼叫此方法的實體。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetAllRelatedEnds">
      <summary>傳回關聯性管理員所管理之所有相關端的列舉類型 (Enumeration)。</summary>
      <returns>實作 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> 之物件的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。當這些關聯性尚未填入 (Populate) 時，就會傳回空的列舉類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedCollection``1(System.String,System.String)">
      <summary>取得具有指定之關聯性名稱和目標角色名稱的相關物件的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />。</summary>
      <returns>相關物件的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />。</returns>
      <param name="relationshipName">要導覽之關聯性的名稱。此關聯性名稱不符合命名空間。</param>
      <param name="targetRoleName">導覽之目標角色的名稱。表示導覽關聯性的方向。</param>
      <typeparam name="TTargetEntity">傳回之 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 的類型。</typeparam>
      <exception cref="T:System.InvalidOperationException">指定的角色傳回 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 而非 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedEnd(System.String,System.String)">
      <summary>針對關聯性中的指定目標角色，傳回正確類型的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 或 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />。</summary>
      <returns>代表已擷取之 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 或 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />。</returns>
      <param name="relationshipName">在其中定義 targetRoleName 之關聯性的名稱。此關聯性名稱不符合命名空間。</param>
      <param name="targetRoleName">用來擷取 relationshipName 另一端的目標角色。</param>
      <exception cref="T:System.ArgumentNullException">relationshipName 或 targetRoleName 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">來源類型與擁有者的類型不相符。</exception>
      <exception cref="T:System.ArgumentException">targetRoleName 無效或在中繼資料中找不到關聯性類型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedReference``1(System.String,System.String)">
      <summary>使用關聯性名稱和目標角色名稱的指定組合，取得相關物件的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />。</summary>
      <returns>相關物件的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />。</returns>
      <param name="relationshipName">要導覽之關聯性的名稱。此關聯性名稱不符合命名空間。</param>
      <param name="targetRoleName">導覽之目標角色的名稱。表示導覽關聯性的方向。</param>
      <typeparam name="TTargetEntity">傳回之 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 的類型。</typeparam>
      <exception cref="T:System.InvalidOperationException">指定的角色傳回 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 而非 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.InitializeRelatedCollection``1(System.String,System.String,System.Data.Entity.Core.Objects.DataClasses.EntityCollection{``0})">
      <summary>採用透過預設建構函式建立的現有 EntityCollection，並使用提供的關聯性和目標角色名稱將它初始化。此方法設計為只在還原序列化期間使用，如果提供的 EntityCollection 已初始化，或是關聯性管理員已附加至 ObjectContext，則會擲回例外狀況。</summary>
      <param name="relationshipName">關聯性名稱。</param>
      <param name="targetRoleName">目標角色名稱。</param>
      <param name="entityCollection">現有的 EntityCollection。</param>
      <typeparam name="TTargetEntity">targetRoleName 代表實體的類型</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.InitializeRelatedReference``1(System.String,System.String,System.Data.Entity.Core.Objects.DataClasses.EntityReference{``0})">
      <summary>採用透過預設建構函式建立的現有 EntityReference，並使用提供的關聯性和目標角色名稱將它初始化。此方法設計為只在還原序列化期間使用，如果提供的 EntityReference 已初始化、關聯性管理員已包含具有此名稱和目標角色的關聯性，或是關聯性管理員已附加至 ObjectContext.W，則會擲回例外狀況</summary>
      <param name="relationshipName">關聯性名稱。</param>
      <param name="targetRoleName">相關端的角色名稱。</param>
      <param name="entityReference">要初始化的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />。</param>
      <typeparam name="TTargetEntity">要初始化之 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 的類型。</typeparam>
      <exception cref="T:System.InvalidOperationException">當提供的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 已經初始化時。-或-當關聯性管理員已經附加至 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 或當關聯性管理員已經包含具有此名稱和目標角色的關聯性時。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>在內部搭配 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 執行個體用來還原序列化實體物件。</summary>
      <param name="context">序列化的資料流。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>由物件服務呼叫，以便針對含有序列化關聯性的二進位序列化 (Serialization) 準備 <see cref="T:System.Data.Entity.Core.EntityKey" />。</summary>
      <param name="context">描述給定序列化資料流的來源和目的端，並且提供其他呼叫端定義的內容。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.StructuralObject">
      <summary>此類別包含日期物件所需的常見方法。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.StructuralObject" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.BinaryEquals(System.Byte[],System.Byte[])">
      <summary>判斷指定的位元組陣列是否包含相同的值。</summary>
      <returns>如果兩個陣列的長度相同且包含相同的位元組值，或者若兩個陣列都是 null，則為 true，否則為 false。</returns>
      <param name="first">要比較的第一個位元組陣列值。</param>
      <param name="second">要比較的第二個位元組陣列。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.DefaultDateTimeValue">
      <summary>傳回資料來源所支援的最小日期時間值。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 值，它是資料來源所支援的最小日期時間。</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.EntityKeyPropertyName">
      <summary>假設此定義允許使用者使用此常數取代將字串硬式編碼，則為變更追蹤所使用的公用常數名稱。這樣做有助於確保屬性名稱正確，且允許在尋找此特定字串的位置更快速地進行比較。使用者仍然可以直接使用區分大小寫的字串，而不使用常數，這樣做只有在比較時速度會稍微變慢。在名稱前後加上破折號 (-) 字元可確保此名稱不會與實際資料屬性發生衝突，因為 -EntityKey- 不是有效的識別項名稱</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.GetValidValue(System.Byte[])">
      <summary>傳回目前位元組值的複本。</summary>
      <returns>目前 <see cref="T:System.Byte" /> 值的複本。</returns>
      <param name="currentValue">目前的位元組陣列值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.GetValidValue``1(``0,System.String,System.Boolean,System.Boolean)">
      <summary>傳回指定之屬性的複雜類型。</summary>
      <returns>屬性的複雜類型物件。</returns>
      <param name="currentValue">繼承自複雜物件的複雜物件。</param>
      <param name="property">屬於複雜物件的複雜屬性名稱。</param>
      <param name="isNullable">指出此類型是否支援 null 值。</param>
      <param name="isInitialized">指出此類型是否已初始化。</param>
      <typeparam name="T">所要求之複雜物件的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.OnPropertyChanged(System.String)">
      <summary>引發 <see cref="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanged" /> 事件。</summary>
      <param name="property">已變更屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.OnPropertyChanging(System.String)">
      <summary>引發 <see cref="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanging" /> 事件。</summary>
      <param name="property">變更中屬性的名稱。</param>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanged">
      <summary>屬性已變更的通知。</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanging">
      <summary>屬性將要變更的通知。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.ReportPropertyChanged(System.String)">
      <summary>引發事件，該事件用來報告發生了屬性變更。</summary>
      <param name="property">已變更屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.ReportPropertyChanging(System.String)">
      <summary>引發事件，該事件用來報告屬性變更擱置中。</summary>
      <param name="property">變更中屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean)">
      <summary>確保為屬性所設定的 <see cref="T:System.Boolean" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.Boolean" /> 值。</returns>
      <param name="value">布林值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean,System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.Boolean" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.Boolean" /> 值。</returns>
      <param name="value">布林值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte)">
      <summary>確保為屬性所設定的 <see cref="T:System.Byte" /> 值是有效的。</summary>
      <returns>已設定的 <see cref="T:System.Byte" /> 值。</returns>
      <param name="value">正在驗證的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte,System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.Byte" /> 值是有效的。</summary>
      <returns>已設定的 <see cref="T:System.Byte" />。</returns>
      <param name="value">
        <see cref="T:System.Byte" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean)">
      <summary>確保為屬性所設定的 <see cref="T:System.Byte[]" /> 值是有效的。</summary>
      <returns>所要設定的 <see cref="T:System.Byte" /> 值。</returns>
      <param name="value">正在設定的值。</param>
      <param name="isNullable">表示屬性是否可為 null。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean,System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.Byte[]" /> 值是有效的。</summary>
      <returns>正在驗證的 <see cref="T:System.Byte" /> 值。</returns>
      <param name="value">傳遞至屬性 Setter 的值。</param>
      <param name="isNullable">表示此屬性是否可為 null 的旗標。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
      <exception cref="T:System.Data.ConstraintException">如果不可為 null 值的值是 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeography,System.Boolean)">
      <summary>驗證屬性是否不是 null，如果是則擲回。</summary>
      <returns>正在設定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</returns>
      <param name="value">要檢查的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</param>
      <param name="isNullable">表示此屬性是否可為 null 的旗標。</param>
      <exception cref="T:System.Data.ConstraintException">不可為 null 之屬性的值為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeography,System.Boolean,System.String)">
      <summary>驗證屬性是否不是 null，如果是則擲回。</summary>
      <returns>正在設定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</returns>
      <param name="value">要檢查的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</param>
      <param name="isNullable">表示此屬性是否可為 null 的旗標。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
      <exception cref="T:System.Data.ConstraintException">不可為 null 之屬性的值為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeometry,System.Boolean)">
      <summary>驗證屬性是否不是 null，如果是則擲回。</summary>
      <returns>正在設定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</returns>
      <param name="value">要檢查的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</param>
      <param name="isNullable">表示此屬性是否可為 null 的旗標。</param>
      <exception cref="T:System.Data.ConstraintException">不可為 null 之屬性的值為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeometry,System.Boolean,System.String)">
      <summary>驗證屬性是否不是 null，如果是則擲回。</summary>
      <returns>正在設定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</returns>
      <param name="value">要檢查的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</param>
      <param name="isNullable">表示此屬性是否可為 null 的旗標。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
      <exception cref="T:System.Data.ConstraintException">不可為 null 之屬性的值為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime)">
      <summary>確保為屬性所設定的 <see cref="T:System.DateTime" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.DateTime" /> 值。</returns>
      <param name="value">
        <see cref="T:System.DateTime" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime,System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.DateTime" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.DateTime" /> 值。</returns>
      <param name="value">
        <see cref="T:System.DateTime" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset)">
      <summary>確保為屬性所設定的 <see cref="T:System.DateTimeOffset" /> 值是有效的。</summary>
      <returns>所要設定的 <see cref="T:System.DateTimeOffset" /> 值。</returns>
      <param name="value">
        <see cref="T:System.DateTimeOffset" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset,System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.DateTimeOffset" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.DateTimeOffset" /> 值。</returns>
      <param name="value">
        <see cref="T:System.DateTimeOffset" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal)">
      <summary>確保為屬性所設定的 <see cref="T:System.Decimal" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.Decimal" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal,System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.Decimal" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.Decimal" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Double)">
      <summary>確保為屬性所設定的 <see cref="T:System.Double" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.Double" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Double" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Double,System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.Double" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.Double" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Double" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid)">
      <summary>確保為屬性所設定的 <see cref="T:System.Guid" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.Guid" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Guid" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid,System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.Guid" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.Guid" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Guid" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16)">
      <summary>確保為屬性所設定的 <see cref="T:System.Int16" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.Int16" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Int16" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16,System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.Int16" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.Int16" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Int16" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32)">
      <summary>確保為屬性所設定的 <see cref="T:System.Int32" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.Int32" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Int32" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32,System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.Int32" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.Int32" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Int32" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64)">
      <summary>確保為屬性所設定的 <see cref="T:System.Int64" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.Int64" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Int64" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64,System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.Int64" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.Int64" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Int64" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean})">
      <summary>確保為屬性所設定的 <see cref="T:System.Boolean" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.Boolean" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.Boolean" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean},System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.Boolean" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.Boolean" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.Boolean" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte})">
      <summary>確保為屬性所設定的 <see cref="T:System.Byte" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.Byte" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.Byte" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte},System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.Byte" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.Byte" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.Byte" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime})">
      <summary>確保為屬性所設定的 <see cref="T:System.DateTime" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.DateTime" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.DateTime" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime},System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.DateTime" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.DateTime" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.DateTime" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset})">
      <summary>確保為屬性所設定的 <see cref="T:System.DateTimeOffset" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.DateTimeOffset" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.DateTimeOffset" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset},System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.DateTimeOffset" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.DateTimeOffset" /> 值。</returns>
      <param name="value">
        <see cref="T:System.DateTimeOffset" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal})">
      <summary>確保為屬性所設定的 <see cref="T:System.Decimal" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.Decimal" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.Decimal" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal},System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.Decimal" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.Decimal" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.Decimal" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double})">
      <summary>確保為屬性所設定的 <see cref="T:System.Double" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.Double" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.Double" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double},System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.Double" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.Double" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.Double" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid})">
      <summary>確保為屬性所設定的 <see cref="T:System.Guid" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.Guid" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.Guid" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid},System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.Guid" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.Guid" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.Guid" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16})">
      <summary>確保為屬性所設定的 <see cref="T:System.Int16" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.Int16" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.Int16" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16},System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.Int16" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.Int16" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.Int16" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32})">
      <summary>確保為屬性所設定的 <see cref="T:System.Int32" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.Int32" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.Int32" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32},System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.Int32" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.Int32" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.Int32" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64})">
      <summary>確保為屬性所設定的 <see cref="T:System.Int64" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.Int64" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.Int64" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64},System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.Int64" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.Int64" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.Int64" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte})">
      <summary>確保為屬性所設定的 <see cref="T:System.SByte" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.SByte" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.SByte" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte},System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.SByte" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.SByte" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.SByte" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single})">
      <summary>確保為屬性所設定的 <see cref="T:System.Single" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.Single" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.Single" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single},System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.Single" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.Single" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.Single" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan})">
      <summary>確保為屬性所設定的 <see cref="T:System.TimeSpan" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.TimeSpan" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.TimeSpan" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan},System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.TimeSpan" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 <see cref="T:System.TimeSpan" /> 值。</returns>
      <param name="value">可為 null 的 <see cref="T:System.TimeSpan" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16})">
      <summary>確保為屬性所設定的 UInt16 值是有效的。</summary>
      <returns>所設定、可為 null 的 UInt16 值。</returns>
      <param name="value">可為 null 的 UInt16 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16},System.String)">
      <summary>確保為屬性所設定的 UInt16 值是有效的。</summary>
      <returns>所設定、可為 null 的 UInt16 值。</returns>
      <param name="value">可為 null 的 UInt16 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32})">
      <summary>確保為屬性所設定的 UInt32 值是有效的。</summary>
      <returns>所設定、可為 null 的 UInt32 值。</returns>
      <param name="value">可為 null 的 UInt32 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32},System.String)">
      <summary>確保為屬性所設定的 UInt32 值是有效的。</summary>
      <returns>所設定、可為 null 的 UInt32 值。</returns>
      <param name="value">可為 null 的 UInt32 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64})">
      <summary>確保為屬性所設定的 <see cref="T:System.UInt64" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 UInt64 值。</returns>
      <param name="value">可為 null 的 UInt64 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64},System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.UInt64" /> 值是有效的。</summary>
      <returns>所設定、可為 null 的 UInt64 值。</returns>
      <param name="value">可為 null 的 UInt64 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte)">
      <summary>確保為屬性所設定的 <see cref="T:System.SByte" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.SByte" /> 值。</returns>
      <param name="value">
        <see cref="T:System.SByte" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte,System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.SByte" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.SByte" /> 值。</returns>
      <param name="value">
        <see cref="T:System.SByte" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Single)">
      <summary>確保為屬性所設定的 Single 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.Single" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Single" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Single,System.String)">
      <summary>確保為屬性所設定的 Single 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.Single" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Single" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean)">
      <summary>驗證屬性是否不是 null，如果是則擲回。</summary>
      <returns>驗證的 <see cref="T:System.String" /> 值。</returns>
      <param name="value">要檢查的字串值。</param>
      <param name="isNullable">表示此屬性是否可為 null 的旗標。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean,System.String)">
      <summary>驗證屬性是否不是 null，如果是則擲回。</summary>
      <returns>驗證的屬性。</returns>
      <param name="value">要檢查的字串值。</param>
      <param name="isNullable">表示此屬性是否可為 null 的旗標。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
      <exception cref="T:System.Data.ConstraintException">不可為 null 的字串之字串值為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan)">
      <summary>確保為屬性所設定的 <see cref="T:System.TimeSpan" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.TimeSpan" /> 值。</returns>
      <param name="value">
        <see cref="T:System.TimeSpan" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan,System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.TimeSpan" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.TimeSpan" /> 值。</returns>
      <param name="value">
        <see cref="T:System.TimeSpan" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16)">
      <summary>確保為屬性所設定的 <see cref="T:System.UInt16" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.UInt16" /> 值。</returns>
      <param name="value">
        <see cref="T:System.UInt16" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16,System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.UInt16" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.UInt16" /> 值。</returns>
      <param name="value">
        <see cref="T:System.UInt16" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32)">
      <summary>確保為屬性所設定的 <see cref="T:System.UInt32" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.UInt32" /> 值。</returns>
      <param name="value">
        <see cref="T:System.UInt32" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32,System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.UInt32" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.UInt32" /> 值。</returns>
      <param name="value">
        <see cref="T:System.UInt32" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64)">
      <summary>確保為屬性所設定的 <see cref="T:System.UInt64" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.UInt64" /> 值。</returns>
      <param name="value">
        <see cref="T:System.UInt64" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64,System.String)">
      <summary>確保為屬性所設定的 <see cref="T:System.UInt64" /> 值是有效的。</summary>
      <returns>正在設定的 <see cref="T:System.UInt64" /> 值。</returns>
      <param name="value">
        <see cref="T:System.UInt64" /> 值。</param>
      <param name="propertyName">正在驗證之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue``1(``0,``0,System.String)">
      <summary>設定指定之屬性的複雜物件。</summary>
      <returns>衍生自複雜物件的複雜類型。</returns>
      <param name="oldValue">屬性的原始複雜物件 (如果有的話)。</param>
      <param name="newValue">正在設定的複雜物件。</param>
      <param name="property">正在設定為複雜物件的複雜屬性。</param>
      <typeparam name="T">正要取代之物件的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull``1(``0,System.String)">
      <summary>驗證複雜物件是否不是 null。</summary>
      <returns>正在驗證的複雜物件。</returns>
      <param name="complexObject">正在驗證的複雜物件。</param>
      <param name="propertyName">與 complexObject 相關聯之父物件的複雜屬性。</param>
      <typeparam name="TComplex">所要驗證之複雜物件的類型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.CommitFailedException">
      <summary>認可 <see cref="T:System.Data.Common.DbTransaction" /> 發生錯誤時擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor">
      <summary>使用預設值初始化 <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> 類別的新執行個體。</summary>
      <param name="info">序列化或還原序列化物件所需的資料。</param>
      <param name="context">指定序列化資料流的來源和目的地描述。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> 的新執行個體 (有錯誤訊息)。</summary>
      <param name="message">例外狀況訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> 的新執行個體 (有錯誤訊息和內部例外狀況)。</summary>
      <param name="message">例外狀況訊息。</param>
      <param name="innerException">內部例外狀況。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.CommitFailureHandler">
      <summary>表示交易處理常式會將交易追蹤資訊儲存在資料庫中，以便在交易認可期間發生連接失敗時，能夠順利復原資料。此交易處理常式必須使用 <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})" /> 註冊。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.#ctor">
      <summary>使用預設的 <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext" /> 初始化 <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.#ctor(System.Func{System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.TransactionContext})">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> 類別的新執行個體。</summary>
      <param name="transactionContextFactory">交易內容處理站。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>將新交易的追蹤資訊儲存至相同交易中的資料庫。</summary>
      <param name="connection">開始交易的連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.BuildDatabaseInitializationScript">
      <summary>建立資料庫初始化指令碼。</summary>
      <returns>資料庫初始化指令碼。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistory">
      <summary>移除所有交易記錄。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistoryAsync">
      <summary>以非同步方式移除所有交易記錄。</summary>
      <returns>表示非同步作業的工作。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistoryAsync(System.Threading.CancellationToken)">
      <summary>以非同步方式移除所有交易記錄。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="cancellationToken">取消語彙基元。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>如果有擲回例外狀況，則會檢查資料庫中是否有此交易，如果找不到則會再次擲回例外狀況。否則，就會將認可標記為成功，並且將交易資訊排入佇列進行刪除。</summary>
      <param name="transaction">已認可的交易。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Dispose(System.Boolean)">
      <summary>釋放此交易物件所使用的資源。</summary>
      <param name="disposing">true 表示同時釋放 Managed 和 Unmanaged 資源，false 表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>停止追蹤已處置的交易。</summary>
      <param name="transaction">已處置的交易。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.FromContext(System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>取得與 <paramref name="context" /> 相關聯的 <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> (如果有的話)，否則傳回 null。</summary>
      <returns>相關聯的 <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" />。</returns>
      <param name="context">內容。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.FromContext(System.Data.Entity.DbContext)">
      <summary>取得與 <paramref name="context" /> 相關聯的 <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> (如果有的話)，否則傳回 null。</summary>
      <returns>相關聯的 <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" />。</returns>
      <param name="context">內容。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Initialize(System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>初始化執行個體的屬性。</summary>
      <param name="context">內容。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Initialize(System.Data.Entity.DbContext,System.Data.Common.DbConnection)">
      <summary>初始化執行個體的屬性。</summary>
      <param name="context">內容。</param>
      <param name="connection">連接。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.MarkTransactionForPruning(System.Data.Entity.Infrastructure.TransactionRow)">
      <summary>將指定的交易加入至可從資料庫移除的交易清單</summary>
      <param name="transaction">要從資料庫移除的交易。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistory">
      <summary>移除已標記要刪除的交易。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistory(System.Boolean,System.Boolean)">
      <summary>如果已標記要刪除的交易數目超過 <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" />，就移除這些交易。</summary>
      <param name="force">true 表示即使舊交易數未超過 <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" />，仍會移除這些交易；否則為 false。</param>
      <param name="useExecutionStrategy">true 表示使用關聯的執行策略來執行作業；否則為 false。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync">
      <summary>以非同步方式移除已標記要刪除的交易。</summary>
      <returns>表示非同步作業的工作。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
      <summary>如果已標記要刪除的交易數目超過 <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" />，就移除這些交易。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="force">true 表示即使舊交易數未超過 <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" />，仍會移除這些交易；否則為 false。</param>
      <param name="useExecutionStrategy">true 表示使用關聯的執行策略來執行作業；否則為 false。</param>
      <param name="cancellationToken">取消語彙基元。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync(System.Threading.CancellationToken)">
      <summary>以非同步方式移除已標記要刪除的交易。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="cancellationToken">取消語彙基元。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit">
      <summary>取得在交易記錄遭清除之前，要針對內容執行的交易數目。預設值為 20。</summary>
      <returns>在交易記錄遭清除之前，要對內容執行的交易數。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>停止追蹤已復原的交易。</summary>
      <param name="transaction">已復原的交易。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext">
      <summary>取得交易內容。</summary>
      <returns>交易內容。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbChangeTracker">
      <summary>由 <see cref="T:System.Data.Entity.DbContext" /> 的 ChangeTracker 方法所傳回，可提供與實體變更追蹤有關之內容功能的存取。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges">
      <summary>偵測對 POCO 實體的屬性和關聯性所做的變更。請注意，某些類型的實體 (例如變更追蹤 Proxy 及衍生自 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject" /> 的實體) 會自動報告變更，所以這些類型的實體通常不需要呼叫 DetectChanges。也請注意，通常 <see cref="T:System.Data.Entity.DbContext" /> 的許多方法以及其相關類別會自動呼叫 DetectChanges，因此需要明確呼叫此方法的情況很少見。但是，通常為了效能的理由，可能需要從 <see cref="P:System.Data.Entity.DbContext.Configuration" /> 使用 AutoDetectChangesEnabled 旗標來關閉 DetectChanges 的自動呼叫。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries">
      <summary>針對此內容所追蹤的所有實體取得 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 物件。</summary>
      <returns>項目。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries``1">
      <summary>針對此內容所追蹤之給定類型的所有實體取得 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 物件。</summary>
      <returns>項目。</returns>
      <typeparam name="TEntity">實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Equals(System.Object)">
      <summary>指定 <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> 是否與指定的物件相同。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> 與指定的物件相同，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetHashCode">
      <summary>取得與 <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> 相關聯的雜湊碼。</summary>
      <returns>與 <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> 相關聯的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.HasChanges">
      <summary>確認如果呼叫 <see cref="M:System.Data.Entity.DbContext.SaveChanges" />，<see cref="T:System.Data.Entity.DbContext" /> 是否會追蹤任何將傳送至資料庫之已新增、刪除、或變更的實體或關聯性。</summary>
      <returns>true 表示基礎 <see cref="T:System.Data.Entity.DbContext" /> 有變更，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.ToString">
      <summary>傳回 <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> 的字串表示法。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>表示 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> 類別的非泛型版本。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Cast``2">
      <summary>傳回相等的泛型 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> 物件。</summary>
      <returns>相等的泛型物件。</returns>
      <typeparam name="TEntity">這是成員宣告所在之實體的類型。</typeparam>
      <typeparam name="TElement">集合項目的類型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.CurrentValue">
      <summary>取得或設定導覽屬性的目前值。目前的值是導覽屬性所參考的實體。</summary>
      <returns>目前的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.EntityEntry">
      <summary>取得此導覽屬性所屬的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</summary>
      <returns>擁有此導覽屬性之實體的項目。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.IsLoaded">
      <summary>取得或設定值，指出是否已從資料庫載入此集合的所有實體。</summary>
      <returns>若已載入所有相關實體或已明確將 IsLoaded 設為 true，則為 true；否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Load">
      <summary>從資料庫載入實體的集合。請注意，已經存在於內容中的實體不會以資料庫中的值覆寫。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.LoadAsync">
      <summary>從資料庫非同步載入實體的集合。請注意，已經存在於內容中的實體不會以資料庫中的值覆寫。</summary>
      <returns>表示非同步作業的工作。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.LoadAsync(System.Threading.CancellationToken)">
      <summary>從資料庫非同步載入實體的集合。請注意，已經存在於內容中的實體不會以資料庫中的值覆寫。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.Name">
      <summary>取得屬性名稱。</summary>
      <returns>屬性名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Query">
      <summary>傳回查詢，這原本是從資料庫載入此集合所使用的查詢。傳回的查詢可以使用 LINQ 加以修改，以便在資料庫中執行篩選或運算，例如在資料庫內計算集合中的實體數目，而不用實際載入這些實體。</summary>
      <returns>集合的查詢。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2">
      <summary>此類別的執行個體會從 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 的 Collection 方法傳回，並允許在實體的集合導覽屬性上執行類似載入的作業。</summary>
      <typeparam name="TEntity">此屬性所屬之實體的類型。</typeparam>
      <typeparam name="TElement">實體集合中項目的類型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.CurrentValue">
      <summary>取得或設定導覽屬性的目前值。目前的值是導覽屬性所參考的實體。</summary>
      <returns>目前的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.EntityEntry">
      <summary>此導覽屬性所屬的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</summary>
      <returns>擁有此導覽屬性之實體的項目。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.IsLoaded">
      <summary>取得或設定值，指出是否已從資料庫載入此集合的所有實體。</summary>
      <returns>如果已載入所有相關實體或已明確將 IsLoaded 設為 true，則為 true；否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Load">
      <summary>從資料庫載入實體的集合。請注意，已經存在於內容中的實體不會以資料庫中的值覆寫。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.LoadAsync">
      <summary>從資料庫非同步載入實體的集合。請注意，已經存在於內容中的實體不會以資料庫中的值覆寫。</summary>
      <returns>表示非同步作業的工作。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.LoadAsync(System.Threading.CancellationToken)">
      <summary>從資料庫非同步載入實體的集合。請注意，已經存在於內容中的實體不會以資料庫中的值覆寫。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Name">
      <summary>取得屬性名稱。</summary>
      <returns>屬性名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbCollectionEntry{`0,`1})~System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>針對此物件所表示的導覽屬性傳回非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" /> 類別的新執行個體。</summary>
      <returns>非泛型版本。</returns>
      <param name="entry">表示導覽屬性的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Query">
      <summary>傳回查詢，這原本是從資料庫載入此集合所使用的查詢。傳回的查詢可以使用 LINQ 加以修改，以便在資料庫中執行篩選或運算，例如在資料庫內計算集合中的實體數目，而不用實際載入這些實體。</summary>
      <returns>集合的查詢。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCompiledModel">
      <summary>實體資料模型 (EDM) 的不可變表示法，可用來建立 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 或者可以傳遞給 <see cref="T:System.Data.Entity.DbContext" /> 的建構函式。為了提高效能，此類型的執行個體應該要快取，並重複加以使用來建構內容。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.CreateObjectContext``1(System.Data.Common.DbConnection)">
      <summary>建立 ObjectContext 的執行個體或衍生自 ObjectContext 的類別。請注意，可以改為使用適當的 DbContext 建構函式建立 DbContext 的執行個體。如果使用衍生的 ObjectContext，它必須擁有包含單一 EntityConnection 參數的公用建構函式。建立的 ObjectContext 會使用傳遞的連接，但是內容不會擁有此連接。呼叫端必須在處置內容之後處置此連接。</summary>
      <returns>內容。</returns>
      <param name="existingConnection">與資料庫的現有連接，可供內容使用。</param>
      <typeparam name="TContext">要建立之內容的類型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> 類別的非泛型版本。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Cast``2">
      <summary>傳回相等的泛型 <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> 物件。</summary>
      <returns>相等的泛型物件。</returns>
      <typeparam name="TEntity">這是成員宣告所在之實體的類型。</typeparam>
      <typeparam name="TComplexProperty">複雜屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.ComplexProperty(System.String)">
      <summary>取得代表此屬性之巢狀複雜屬性的物件。</summary>
      <returns>表示巢狀屬性的物件。</returns>
      <param name="propertyName">巢狀屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Property(System.String)">
      <summary>取得代表此屬性之巢狀屬性的物件。此方法可用於純量屬性或複雜屬性。</summary>
      <returns>表示巢狀屬性的物件。</returns>
      <param name="propertyName">巢狀屬性的名稱。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2">
      <summary>此類別的執行個體會從 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 的 ComplexProperty 方法傳回，並允許存取複雜屬性的狀態。</summary>
      <typeparam name="TEntity">此屬性所屬之實體的類型。</typeparam>
      <typeparam name="TComplexProperty">此屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>取得代表此屬性之巢狀複雜屬性的物件。</summary>
      <returns>表示巢狀屬性的物件。</returns>
      <param name="property">表示巢狀屬性的運算式。</param>
      <typeparam name="TNestedComplexProperty">巢狀屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty(System.String)">
      <summary>取得代表此屬性之巢狀複雜屬性的物件。</summary>
      <returns>表示巢狀屬性的物件。</returns>
      <param name="propertyName">巢狀屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.String)">
      <summary>取得代表此屬性之巢狀複雜屬性的物件。</summary>
      <returns>表示巢狀屬性的物件。</returns>
      <param name="propertyName">巢狀屬性的名稱。</param>
      <typeparam name="TNestedComplexProperty">巢狀屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>針對此物件所表示的屬性傳回非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" /> 類別的新執行個體。</summary>
      <returns>非泛型版本。</returns>
      <param name="entry">表示屬性的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>取得代表此屬性之巢狀屬性的物件。此方法可用於純量屬性或複雜屬性。</summary>
      <returns>表示巢狀屬性的物件。</returns>
      <param name="property">表示巢狀屬性的運算式。</param>
      <typeparam name="TNestedProperty">巢狀屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.String)">
      <summary>取得代表此屬性之巢狀屬性的物件。此方法可用於純量屬性或複雜屬性。</summary>
      <returns>表示巢狀屬性的物件。</returns>
      <param name="propertyName">巢狀屬性的名稱。</param>
      <typeparam name="TNestedProperty">巢狀屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property(System.String)">
      <summary>取得代表此屬性之巢狀屬性的物件。此方法可用於純量屬性或複雜屬性。</summary>
      <returns>表示巢狀屬性的物件。</returns>
      <param name="propertyName">巢狀屬性的名稱。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionInfo">
      <summary>表示資料庫連接的相關資訊。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 類別的新執行個體，以表示應用程式組態檔中指定的連接。</summary>
      <param name="connectionName">應用程式組態中之連接字串的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String,System.String)">
      <summary>依據連接字串初始化 <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 類別的新執行個體。</summary>
      <param name="connectionString">要用於連接的連接字串。</param>
      <param name="providerInvariantName">要用於連接之提供者的名稱。若為 SQL Server，請使用 'System.Data.SqlClient'。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.Equals(System.Object)">
      <summary>判斷目前的 <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 類型是否等於所提供的物件類型。</summary>
      <returns>如果目前的 <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 類型等於所指定的物件類型，則為 true，否則為 false。</returns>
      <param name="obj">與目前 <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 物件比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetHashCode">
      <summary>產生用於表示目前連接的值。</summary>
      <returns>用於表示目前連接的值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.ToString">
      <summary>將 <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 物件轉換為字串。</summary>
      <returns>目前的磁碟機。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionStringOrigin">
      <summary>描述與 <see cref="T:System.Data.Entity.DbContext" /> 相關聯之資料庫連接字串的來源。</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Configuration">
      <summary>此連接字串是從外部組態讀取的。</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Convention">
      <summary>此連接字串是依照慣例建立的。</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.DbContextInfo">
      <summary>此連接字串是由提供給 DbContextInfo 的連接資訊所覆寫。</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.UserCode">
      <summary>此連接字串是在執行階段明確指定的。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextConfiguration">
      <summary>由 <see cref="T:System.Data.Entity.DbContext" /> 的 Configuration 方法所傳回，可為內容提供組態選項的存取。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled">
      <summary>取得或設定值，指出 <see cref="T:System.Data.Entity.DbContext" /> 和相關類別的方法是否會自動呼叫 <see cref="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges" /> 方法。預設值為 true。</summary>
      <returns>如果應該自動呼叫，則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.EnsureTransactionsForFunctionsAndCommands">
      <summary>取得或設定值，以指定交易中是否一律要執行 SQL 函式及命令。</summary>
      <returns>預設的交易行為。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.Equals(System.Object)">
      <summary>指定此組態是否與指定的物件相同。</summary>
      <returns>如果此組態與指定的物件相同，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetHashCode">
      <summary>取得與此組態相關聯的雜湊碼。</summary>
      <returns>與此組態相關聯的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.LazyLoadingEnabled">
      <summary>取得或設定值，指出公開為導覽屬性之關聯性的消極式載入是否已啟用。根據預設，會啟用消極式載入。</summary>
      <returns>如果啟用消極式載入，則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ProxyCreationEnabled">
      <summary>取得或設定值，指出每當此架構建立實體類型的執行個體時，它是否會建立動態產生之 Proxy 類別的執行個體。請注意，即使使用此旗標來啟用 Proxy 建立，也只會針對符合進行 Proxy 處理需求的實體類型來建立 Proxy 執行個體。預設會啟用 Proxy 建立。</summary>
      <returns>如果啟用 Proxy 建立，則為 true；否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.ToString">
      <summary>傳回 <see cref="T:System.Data.Entity.Infrastructure.DbContextConfiguration" /> 的字串表示法。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbContextConfiguration" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.UseDatabaseNullSemantics">
      <summary>取得或設定值，此值表示是否要在比較兩個可能為 null 的運算元時顯示資料庫 null 語意。預設值為 false。例如 (operand1 == operand2) 會分別轉譯為：(operand1 = operand2) (當 UseDatabaseNullSemantics 為 true 時；(((operand1 = operand2) AND (NOT (operand1 IS NULL OR operand2 IS NULL))) OR ((operand1 IS NULL) AND (operand2 IS NULL))) (當 UseDatabaseNullSemantics 為 false 時)。</summary>
      <returns>如果已啟用資料庫 null 比較行為，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ValidateOnSaveEnabled">
      <summary>取得或設定值，此值表示是否應在叫用 <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> 時自動驗證追蹤的實體。預設值為 true。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextInfo">
      <summary>提供有關給定之 <see cref="T:System.Data.Entity.DbContext" /> 類型的執行階段資訊。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type)">
      <summary>初始化具有指定內容類型之 <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> 類別的新執行個體。</summary>
      <param name="contextType">具象 <see cref="T:System.Data.Entity.DbContext" /> 類型。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration)">
      <summary>初始化具有指定內容類型及組態檔之 <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> 類別的新執行個體。</summary>
      <param name="contextType">具象 <see cref="T:System.Data.Entity.DbContext" /> 類型。</param>
      <param name="config">表示組態檔的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>使用指定連接資訊、內容類型與組態檔，初始化 <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> 類別的新執行個體。</summary>
      <param name="contextType">衍生自 <see cref="T:System.Data.Entity.DbContext" /> 的類型。</param>
      <param name="config">表示組態檔的物件。</param>
      <param name="connectionInfo">要使用之資料庫的連接資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>使用指定內容類型、組態檔與提供者資訊，初始化 <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> 類別的新執行個體。</summary>
      <param name="contextType">衍生自 <see cref="T:System.Data.Entity.DbContext" /> 的類型。</param>
      <param name="config">表示組態檔的物件。</param>
      <param name="modelProviderInfo">指定要設為目標之基礎 ADO.NET 提供者的 <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.ConnectionStringSettingsCollection)">
      <summary>使用指定內容類型與連接字串設定，初始化 <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> 類別的新執行個體。</summary>
      <param name="contextType">衍生自 <see cref="T:System.Data.Entity.DbContext" /> 的類型。</param>
      <param name="connectionStringSettings">連接字串的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>使用指定內容類型與連接資訊，初始化 <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> 類別的新執行個體。</summary>
      <param name="contextType">衍生自 <see cref="T:System.Data.Entity.DbContext" /> 的類型。</param>
      <param name="connectionInfo">要使用之資料庫的連接資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>使用指定內容類型與提供者資訊，初始化 <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> 類別的新執行個體。</summary>
      <param name="contextType">衍生自 <see cref="T:System.Data.Entity.DbContext" /> 的類型。</param>
      <param name="modelProviderInfo">指定要設為目標之基礎 ADO.NET 提供者的 <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionProviderName">
      <summary>取得基礎 <see cref="T:System.Data.Entity.DbContext" /> 類型所使用之連接的 ADO.NET 提供者名稱。</summary>
      <returns>基礎 <see cref="T:System.Data.Entity.DbContext" /> 類型所使用之連接的 ADO.NET 提供者名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionString">
      <summary>取得基礎 <see cref="T:System.Data.Entity.DbContext" /> 類型所使用的連接字串。</summary>
      <returns>基礎 <see cref="T:System.Data.Entity.DbContext" /> 類型所使用的連接字串。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringName">
      <summary>取得基礎 <see cref="T:System.Data.Entity.DbContext" /> 類型所使用的連接字串名稱。</summary>
      <returns>基礎 <see cref="T:System.Data.Entity.DbContext" /> 類型所使用的連接字串名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringOrigin">
      <summary>取得基礎 <see cref="T:System.Data.Entity.DbContext" /> 類型所使用之連接字串的來源。</summary>
      <returns>基礎 <see cref="T:System.Data.Entity.DbContext" /> 類型所使用之連接字串的來源。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ContextType">
      <summary>取得具象 <see cref="T:System.Data.Entity.DbContext" /> 類型。</summary>
      <returns>具象 <see cref="T:System.Data.Entity.DbContext" /> 類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.CreateInstance">
      <summary>建立 <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> 物件的執行個體。</summary>
      <returns>建立的執行個體。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.IsConstructible">
      <summary>取得是否可以建立基礎 <see cref="T:System.Data.Entity.DbContext" /> 類型。</summary>
      <returns>如果可以建立基礎 <see cref="T:System.Data.Entity.DbContext" /> 類型，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.OnModelCreating">
      <summary>取得或設定在內容執行 OnModelCreating 之後，要在 DbModelBuilder 上執行的動作。</summary>
      <returns>在內容執行 OnModelCreating 之後，要在 DbModelBuilder 上執行的動作。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 類別的非泛型版本。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Cast``1">
      <summary>針對此物件所表示之追蹤實體的給定泛型類型傳回泛型 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 類別的新執行個體。請注意，追蹤之實體的類型必須與泛型類型相容，否則會擲回例外狀況。</summary>
      <returns>泛型版本。</returns>
      <typeparam name="TEntity">實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Collection(System.String)">
      <summary>取得物件，表示從此實體到相關實體集的集合導覽屬性。</summary>
      <returns>表示導覽屬性的物件。</returns>
      <param name="navigationProperty">導覽屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ComplexProperty(System.String)">
      <summary>取得物件，表示此實體的複雜屬性。</summary>
      <returns>表示複雜屬性的物件。</returns>
      <param name="propertyName">複雜屬性的名稱。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.CurrentValues">
      <summary>針對此物件所表示的追蹤實體取得目前的屬性值。</summary>
      <returns>目前的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.Entity">
      <summary>取得實體。</summary>
      <returns>實體。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>判斷指定的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 是否等於此執行個體。如果兩個 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 執行個體是相同 <see cref="T:System.Data.Entity.DbContext" /> 上相同實體的項目，這兩者會視為相同。</summary>
      <returns>如果指定的 true 和此執行個體相等，則為 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />，否則為 false。</returns>
      <param name="other">要與此執行個體相比較的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Object)">
      <summary>判斷指定的 <see cref="T:System.Object" /> 是否等於此執行個體。如果兩個 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 執行個體是相同 <see cref="T:System.Data.Entity.DbContext" /> 上相同實體的項目，這兩者會視為相同。</summary>
      <returns>如果指定的 true 和此執行個體相等，則為 <see cref="T:System.Object" />，否則為 false。</returns>
      <param name="obj">要與此執行個體相比較的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValues">
      <summary>查詢資料庫，以找出目前存在於資料庫中之追蹤實體值的複本。請注意，變更傳回的字典中的值將不會更新資料庫中的值。如果資料庫中找不到此實體，將會傳回 null。</summary>
      <returns>存放區的值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValuesAsync">
      <summary>非同步查詢資料庫，以找出目前存在於資料庫中之追蹤實體值的複本。請注意，變更傳回的字典中的值將不會更新資料庫中的值。如果資料庫中找不到此實體，將會傳回 null。</summary>
      <returns>表示非同步作業的工作。工作結果包含存放區值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValuesAsync(System.Threading.CancellationToken)">
      <summary>非同步查詢資料庫，以找出目前存在於資料庫中之追蹤實體值的複本。請注意，變更傳回的字典中的值將不會更新資料庫中的值。如果資料庫中找不到此實體，將會傳回 null。</summary>
      <returns>表示非同步作業的工作。工作結果包含存放區值。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>此執行個體的雜湊碼，適用於雜湊演算法和資料結構 (例如雜湊資料表)。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetValidationResult">
      <summary>驗證此 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 執行個體並傳回驗證結果。</summary>
      <returns>實體驗證結果。如果覆寫 <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> 方法則可能為 null。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Member(System.String)">
      <summary>取得表示實體成員的物件。傳回之物件的執行階段類型會因要求的成員種類而異。目前支援的成員類型以及其傳回類型為：參考導覽屬性：<see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />.集合導覽屬性：<see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.基本/純量屬性：<see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.複雜屬性：<see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />。</summary>
      <returns>表示成員的物件。</returns>
      <param name="propertyName">成員的名稱。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.OriginalValues">
      <summary>針對此物件所表示的追蹤實體取得原始的屬性值。原始的值通常是上一次從資料庫查詢時的實體屬性值。</summary>
      <returns>原始的值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Property(System.String)">
      <summary>取得物件，表示此實體的純量或複雜屬性。</summary>
      <returns>表示屬性的物件。</returns>
      <param name="propertyName">屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reference(System.String)">
      <summary>取得物件，表示從此實體到另一個實體的參考 (非集合) 導覽屬性。</summary>
      <returns>表示導覽屬性的物件。</returns>
      <param name="navigationProperty">導覽屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reload">
      <summary>從資料庫重新載入實體，以資料庫中的值覆寫任何屬性值。在呼叫此方法之後，此實體將會處於 Unchanged 狀態。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ReloadAsync">
      <summary>以非同步方式從資料庫重新載入實體，以資料庫中的值覆寫任何屬性值。在呼叫此方法之後，此實體將會處於 Unchanged 狀態。</summary>
      <returns>表示非同步作業的工作。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ReloadAsync(System.Threading.CancellationToken)">
      <summary>以非同步方式從資料庫重新載入實體，以資料庫中的值覆寫任何屬性值。在呼叫此方法之後，此實體將會處於 Unchanged 狀態。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.State">
      <summary>取得或設定實體的狀態。</summary>
      <returns>狀態。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ToString">
      <summary>傳回 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 的字串表示法。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 的字串表示法。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry`1">
      <summary>此類別的執行個體會提供有關 <see cref="T:System.Data.Entity.DbContext" /> 所追蹤之實體的資訊存取權及控制權。請使用內容的 Entity 或 Entities 方法來取得此類型的物件。</summary>
      <typeparam name="TEntity">實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>取得物件，表示從此實體到相關實體集的集合導覽屬性。</summary>
      <returns>表示導覽屬性的物件。</returns>
      <param name="navigationProperty">表示導覽屬性的運算式。</param>
      <typeparam name="TElement">集合中項目的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.String)">
      <summary>取得物件，表示從此實體到相關實體集的集合導覽屬性。</summary>
      <returns>表示導覽屬性的物件。</returns>
      <param name="navigationProperty">導覽屬性的名稱。</param>
      <typeparam name="TElement">集合中項目的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)">
      <summary>取得物件，表示從此實體到相關實體集的集合導覽屬性。</summary>
      <returns>表示導覽屬性的物件。</returns>
      <param name="navigationProperty">導覽屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>取得物件，表示此實體的複雜屬性。</summary>
      <returns>表示複雜屬性的物件。</returns>
      <param name="property">表示複雜屬性的運算式。</param>
      <typeparam name="TComplexProperty">複雜屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.String)">
      <summary>取得物件，表示此實體的複雜屬性。</summary>
      <returns>表示複雜屬性的物件。</returns>
      <param name="propertyName">複雜屬性的名稱。</param>
      <typeparam name="TComplexProperty">複雜屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty(System.String)">
      <summary>取得物件，表示此實體的複雜屬性。</summary>
      <returns>表示複雜屬性的物件。</returns>
      <param name="propertyName">複雜屬性的名稱。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.CurrentValues">
      <summary>針對此物件所表示的追蹤實體取得目前的屬性值。</summary>
      <returns>目前的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.Entity">
      <summary>取得實體。</summary>
      <returns>實體。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Data.Entity.Infrastructure.DbEntityEntry{`0})">
      <summary>判斷指定的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 是否等於此執行個體。如果兩個 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 執行個體是相同 <see cref="T:System.Data.Entity.DbContext" /> 上相同實體的項目，這兩者會視為相同。</summary>
      <returns>如果指定的 true 和此執行個體相等，則為 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />，否則為 false。</returns>
      <param name="other">要與此執行個體相比較的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Object)">
      <summary>判斷指定的 <see cref="T:System.Object" /> 是否等於此執行個體。如果兩個 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 執行個體是相同 <see cref="T:System.Data.Entity.DbContext" /> 上相同實體的項目，這兩者會視為相同。</summary>
      <returns>如果指定的 true 和此執行個體相等，則為 <see cref="T:System.Object" />，否則為 false。</returns>
      <param name="obj">要與此執行個體相比較的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValues">
      <summary>查詢資料庫，以找出目前存在於資料庫中之追蹤實體值的複本。請注意，變更傳回的字典中的值將不會更新資料庫中的值。如果資料庫中找不到此實體，將會傳回 null。</summary>
      <returns>存放區的值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValuesAsync">
      <summary>非同步查詢資料庫，以找出目前存在於資料庫中之追蹤實體值的複本。請注意，變更傳回的字典中的值將不會更新資料庫中的值。如果資料庫中找不到此實體，將會傳回 null。</summary>
      <returns>表示非同步作業的工作。工作結果包含存放區值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValuesAsync(System.Threading.CancellationToken)">
      <summary>非同步查詢資料庫，以找出目前存在於資料庫中之追蹤實體值的複本。請注意，變更傳回的字典中的值將不會更新資料庫中的值。如果資料庫中找不到此實體，將會傳回 null。</summary>
      <returns>表示非同步作業的工作。工作結果包含存放區值。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>此執行個體的雜湊碼，適用於雜湊演算法和資料結構 (例如雜湊資料表)。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetValidationResult">
      <summary>驗證此 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 執行個體並傳回驗證結果。</summary>
      <returns>實體驗證結果。如果覆寫 <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> 方法則可能為 null。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member``1(System.String)">
      <summary>取得表示實體成員的物件。傳回之物件的執行階段類型會因要求的成員種類而異。目前支援的成員類型以及其傳回類型為：參考導覽屬性：<see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />.集合導覽屬性：<see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />.基本/純量屬性：<see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />.複雜屬性：<see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />。</summary>
      <returns>表示成員的物件。</returns>
      <param name="propertyName">成員的名稱。</param>
      <typeparam name="TMember">成員的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member(System.String)">
      <summary>取得表示實體成員的物件。傳回之物件的執行階段類型會因要求的成員種類而異。目前支援的成員類型以及其傳回類型為：參考導覽屬性：<see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />.集合導覽屬性：<see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.基本/純量屬性：<see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.複雜屬性：<see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />。</summary>
      <returns>表示成員的物件。</returns>
      <param name="propertyName">成員的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.op_Implicit(System.Data.Entity.Infrastructure.DbEntityEntry{`0})~System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>針對此物件所表示的追蹤實體傳回非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 類別的新執行個體。</summary>
      <returns>非泛型版本。</returns>
      <param name="entry">表示所追蹤實體的物件。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.OriginalValues">
      <summary>針對此物件所表示的追蹤實體取得原始的屬性值。原始的值通常是上一次從資料庫查詢時的實體屬性值。</summary>
      <returns>原始的值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>取得物件，表示此實體的純量或複雜屬性。</summary>
      <returns>表示屬性的物件。</returns>
      <param name="property">表示此屬性的運算式。</param>
      <typeparam name="TProperty">此屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property(System.String)">
      <summary>取得物件，表示此實體的純量或複雜屬性。</summary>
      <returns>表示屬性的物件。</returns>
      <param name="propertyName">屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.String)">
      <summary>取得物件，表示此實體的純量或複雜屬性。</summary>
      <returns>表示屬性的物件。</returns>
      <param name="propertyName">屬性的名稱。</param>
      <typeparam name="TProperty">此屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>取得物件，表示從此實體到另一個實體的參考 (非集合) 導覽屬性。</summary>
      <returns>表示導覽屬性的物件。</returns>
      <param name="navigationProperty">表示導覽屬性的運算式。</param>
      <typeparam name="TProperty">此屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference(System.String)">
      <summary>取得物件，表示從此實體到另一個實體的參考 (非集合) 導覽屬性。</summary>
      <returns>表示導覽屬性的物件。</returns>
      <param name="navigationProperty">導覽屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.String)">
      <summary>取得物件，表示從此實體到另一個實體的參考 (非集合) 導覽屬性。</summary>
      <returns>表示導覽屬性的物件。</returns>
      <param name="navigationProperty">導覽屬性的名稱。</param>
      <typeparam name="TProperty">此屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reload">
      <summary>從資料庫重新載入實體，以資料庫中的值覆寫任何屬性值。在呼叫此方法之後，此實體將會處於 Unchanged 狀態。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ReloadAsync">
      <summary>以非同步方式從資料庫重新載入實體，以資料庫中的值覆寫任何屬性值。在呼叫此方法之後，此實體將會處於 Unchanged 狀態。</summary>
      <returns>表示非同步作業的工作。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ReloadAsync(System.Threading.CancellationToken)">
      <summary>以非同步方式從資料庫重新載入實體，以資料庫中的值覆寫任何屬性值。在呼叫此方法之後，此實體將會處於 Unchanged 狀態。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.State">
      <summary>取得或設定實體的狀態。</summary>
      <returns>狀態。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ToString">
      <summary>傳回資料庫實體值的字串表示法。</summary>
      <returns>資料庫實體值的字串表示法。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbExecutionStrategy">
      <summary>針對不可靠的作業和暫時性條件提供重試機制的基本實作，其會在重試之間使用指數遞增延遲。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.#ctor(System.Int32,System.TimeSpan)">
      <summary>使用指定的重試次數限制以及重試之間的延遲，來初始化 <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> 類別的新執行個體。</summary>
      <param name="maxRetryCount">重試次數的上限。</param>
      <param name="maxDelay">重試之間的最大延遲 (以毫秒為單位)。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute(System.Action)">
      <summary>重複執行指定的作業，同時符合目前的重試原則。</summary>
      <param name="operation">代表可執行作業的委派，該作業不會傳回任何結果。</param>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">若重試延遲策略決定不再重試作業。</exception>
      <exception cref="T:System.InvalidOperationException">如果偵測到某現有交易，但執行策略卻不支援它。</exception>
      <exception cref="T:System.InvalidOperationException">若此執行個體已用於執行作業。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>重複執行指定的作業，同時符合目前的重試原則。</summary>
      <returns>從作業產生的結果。</returns>
      <param name="operation">代表可執行作業的委派，該作業會傳回類型為 <paramref name="TResult" /> 的結果。</param>
      <typeparam name="TResult">預期來自可執行作業之結果的類型。</typeparam>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">若重試延遲策略決定不再重試作業。</exception>
      <exception cref="T:System.InvalidOperationException">如果偵測到某現有交易，但執行策略卻不支援它。</exception>
      <exception cref="T:System.InvalidOperationException">若此執行個體已用於執行作業。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>重複執行指定的非同步作業，同時符合目前的重試原則。</summary>
      <returns>如果原始工作順利完成，就會執行到完成的工作 (不論是第一次或是在重試暫時性失敗後)。如果工作因為非暫時性錯誤而失敗，或是已達到重試限制，則傳回的工作會發生錯誤，並且必須觀察例外狀況。</returns>
      <param name="operation">一個函式，會傳回類型為 <paramref name="TResult" /> 的已啟動工作。</param>
      <param name="cancellationToken">用於取消重試作業的取消語彙基元，但不會取消正在執行的作業或已成功完成的作業。</param>
      <typeparam name="TResult">
        <paramref name="operation" /> 所傳回的 <see cref="T:System.Threading.Tasks.Task`1" /> 的結果類型。</typeparam>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">若重試延遲策略決定不再重試作業。</exception>
      <exception cref="T:System.InvalidOperationException">如果偵測到某現有交易，但執行策略卻不支援它。</exception>
      <exception cref="T:System.InvalidOperationException">若此執行個體已用於執行作業。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>重複執行指定的非同步作業，同時符合目前的重試原則。</summary>
      <returns>如果原始工作順利完成，就會執行到完成的工作 (不論是第一次或是在重試暫時性失敗後)。如果工作因為非暫時性錯誤而失敗，或是已達到重試限制，則傳回的工作會發生錯誤，並且必須觀察例外狀況。</returns>
      <param name="operation">會傳回已啟動工作的函式。</param>
      <param name="cancellationToken">用於取消重試作業的取消語彙基元，但不會取消正在執行的作業或已成功完成的作業。</param>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">若重試延遲策略決定不再重試作業。</exception>
      <exception cref="T:System.InvalidOperationException">如果偵測到某現有交易，但執行策略卻不支援它。</exception>
      <exception cref="T:System.InvalidOperationException">若此執行個體已用於執行作業。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.GetNextDelay(System.Exception)">
      <summary>判斷是否應該重試作業，並在下一次嘗試前延遲。</summary>
      <returns>若應重試作業，則延遲會指出下次嘗試執行之前的等候時間；否則為 null。</returns>
      <param name="lastException">上次嘗試執行期間所擲回的例外狀況。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbExecutionStrategy.RetriesOnFailure">
      <summary>取得值，指出 <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> 是否要在失敗之後重試執行。</summary>
      <returns>若 <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> 要在失敗之後重試執行，則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ShouldRetryOn(System.Exception)">
      <summary>判斷指定的例外狀況是否代表可由重試補償的暫時性失敗。</summary>
      <returns>若指定例外狀況被視為是暫時性，則為 true，否則為 false。</returns>
      <param name="exception">要驗證的例外狀況物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})">
      <summary>只要是 <see cref="T:System.Data.Entity.Core.EntityException" />、<see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 或 <see cref="T:System.Data.Entity.Core.UpdateException" />，就會以遞迴方式從 <paramref name="exception" /> 取得 InnerException，並將其傳遞至 <paramref name="exceptionHandler" />。</summary>
      <returns>從 <paramref name="exceptionHandler" /> 產生的結果。</returns>
      <param name="exception">要解除包裝的例外狀況。</param>
      <param name="exceptionHandler">會以未包裝的例外狀況呼叫的委派。</param>
      <typeparam name="T">未包裝之例外狀況的類型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>這是抽象基底類別，用來表示純量或複雜屬性或是實體的導覽屬性。純量和複雜屬性會使用衍生類別 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />，參考導覽屬性會使用衍生類別 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />，而集合導覽屬性會使用衍生類別 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Cast``2">
      <summary>傳回相等的泛型 <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> 物件。</summary>
      <returns>相等的泛型物件。</returns>
      <typeparam name="TEntity">這是成員宣告所在之實體的類型。</typeparam>
      <typeparam name="TProperty">此屬性的類型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.CurrentValue">
      <summary>取得或設定此屬性的目前值。</summary>
      <returns>目前的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.EntityEntry">
      <summary>此成員所屬的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</summary>
      <returns>擁有此成員之實體的項目。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Equals(System.Object)">
      <summary>判斷指定的項目是否等於目前的項目。</summary>
      <returns>如果指定的項目等於目前的項目，則為 true，否則為 false。</returns>
      <param name="obj">要與目前項目比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetHashCode">
      <summary>傳回此項目的雜湊函數。</summary>
      <returns>此項目的雜湊函數。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetValidationErrors">
      <summary>驗證此屬性。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> 物件的集合。絕對不會是 null。如果此實體有效，此集合會是空的。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.Name">
      <summary>取得屬性的名稱。</summary>
      <returns>屬性名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.ToString">
      <summary>傳回資料庫屬性值的字串表示法。</summary>
      <returns>資料庫屬性值的字串表示法。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry`2">
      <summary>這是抽象基底類別，用來表示純量或複雜屬性或是實體的導覽屬性。純量和複雜屬性會使用衍生類別 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />，參考導覽屬性會使用衍生類別 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />，而集合導覽屬性會使用衍生類別 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />。</summary>
      <typeparam name="TEntity">此屬性所屬之實體的類型。</typeparam>
      <typeparam name="TProperty">此屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.CurrentValue">
      <summary>取得或設定此屬性的目前值。</summary>
      <returns>目前的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.EntityEntry">
      <summary>此成員所屬的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</summary>
      <returns>擁有此成員之實體的項目。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Equals(System.Object)">
      <summary>指定此物件是否等於指定的物件。</summary>
      <returns>如果此物件等於指定的物件，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetHashCode">
      <summary>取得與此物件相關聯的雜湊碼。</summary>
      <returns>與此物件相關聯的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetValidationErrors">
      <summary>驗證此屬性。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> 物件的集合。絕對不會是 null。如果此實體有效，此集合會是空的。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.Name">
      <summary>取得屬性的名稱。</summary>
      <returns>屬性的名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbMemberEntry{`0,`1})~System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>針對此物件所表示的屬性傳回非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> 類別的新執行個體。</summary>
      <returns>非泛型版本。</returns>
      <param name="entry">表示屬性的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.ToString">
      <summary>傳回 <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> 的字串表示法。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbModel">
      <summary>表示 <see cref="T:System.Data.Entity.DbModelBuilder" /> 建立的實體資料模型 (EDM)。Compile 方法可用來從此 EDM 表示法移到 <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />，這是適合快取和建立 <see cref="T:System.Data.Entity.DbContext" /> 或 <see cref="T:System.Data.Objects.ObjectContext" /> 執行個體之模型的編譯快照集。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbModel.Compile">
      <summary>為此模式建立 <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />，這是適合快取和建立 <see cref="T:System.Data.Entity.DbContext" /> 執行個體的編譯快照集。</summary>
      <returns>編譯的模型。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ConceptualModel">
      <summary>取得概念模型。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ConceptualToStoreMapping">
      <summary>取得對應模型。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ProviderInfo">
      <summary>取得提供者資訊。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ProviderManifest">
      <summary>取得提供者資訊清單。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.StoreModel">
      <summary>取得存放區模型。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> 類別的非泛型版本。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Cast``2">
      <summary>傳回相等的泛型 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> 物件。</summary>
      <returns>相等的泛型物件。</returns>
      <typeparam name="TEntity">這是成員宣告所在之實體的類型。</typeparam>
      <typeparam name="TProperty">此屬性的類型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.CurrentValue">
      <summary>取得或設定此屬性的目前值。</summary>
      <returns>目前的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.EntityEntry">
      <summary>此屬性所屬的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</summary>
      <returns>擁有此屬性之實體的項目。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.IsModified">
      <summary>取得或設定值，指出此屬性的值從資料庫載入之後是否已修改。</summary>
      <returns>如果此執行個體已修改，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.Name">
      <summary>取得屬性名稱。</summary>
      <returns>屬性名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.OriginalValue">
      <summary>取得或設定此屬性的原始值。</summary>
      <returns>原始的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.ParentProperty">
      <summary>屬於巢狀屬性之屬性的 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />。此方法只會針對複雜物件的屬性傳回非 null 項目，否則它會針對實體本身的屬性傳回 null。</summary>
      <returns>父代複雜屬性的項目，如果這是實體屬性則為 null。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2">
      <summary>此類別的執行個體會從 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 的 Property 方法傳回，並允許存取純量或複雜屬性的狀態。</summary>
      <typeparam name="TEntity">此屬性所屬之實體的類型。</typeparam>
      <typeparam name="TProperty">此屬性的類型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.CurrentValue">
      <summary>取得或設定此屬性的目前值。</summary>
      <returns>目前的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.EntityEntry">
      <summary>此屬性所屬的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</summary>
      <returns>擁有此屬性之實體的項目。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.IsModified">
      <summary>取得或設定值，指出此屬性的值從資料庫載入之後是否已修改。</summary>
      <returns>如果此執行個體已修改，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Name">
      <summary>取得屬性名稱。</summary>
      <returns>屬性名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>針對此物件所表示的屬性傳回非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> 類別的新執行個體。</summary>
      <returns>非泛型版本。</returns>
      <param name="entry">表示屬性的物件。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.OriginalValue">
      <summary>取得或設定此屬性的原始值。</summary>
      <returns>原始的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.ParentProperty">
      <summary>屬於巢狀屬性之屬性的 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />。此方法只會針對複雜物件的屬性傳回非 null 項目，否則它會針對實體本身的屬性傳回 null。</summary>
      <returns>父代複雜屬性的項目，如果這是實體屬性則為 null。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyValues">
      <summary>基礎實體或複雜物件的所有屬性集合。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Clone">
      <summary>建立新的字典，其中包含此字典中所有屬性的複本。對新的字典所做的變更將不會反映在此字典中，反之亦然。</summary>
      <returns>此字典的複本。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Equals(System.Object)">
      <summary>指定 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> 是否與特定物件相等。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> 與特定物件相等，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetHashCode">
      <summary>取得與此屬性值相關聯的雜湊碼。</summary>
      <returns>與此屬性值相關聯的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetValue``1(System.String)">
      <summary>取得屬性的值，就像使用具索引的屬性 getter 一樣，但是具有泛型參數的類型。這對於巢狀字典特別實用，可避免撰寫具有許多轉換的運算式。</summary>
      <returns>屬性的值。</returns>
      <param name="propertyName">屬性的名稱。</param>
      <typeparam name="TValue">此屬性的類型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.Item(System.String)">
      <summary>取得或設定已指定屬性名稱的屬性值。此值可能是此類別的巢狀執行個體。</summary>
      <returns>屬性的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.PropertyNames">
      <summary>在此字典中取得所有屬性名稱的集合當做唯讀集合。</summary>
      <returns>屬性名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Data.Entity.Infrastructure.DbPropertyValues)">
      <summary>從另一個字典讀取值來設定此字典的值。另一個字典必須根據與此字典相同的類型，或是根據衍生自此字典之類型的類型。</summary>
      <param name="propertyValues">要從中讀取值的字典。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Object)">
      <summary>從給定的物件讀取值來設定此字典的值。給定的物件可能是任何類型。當物件上任何屬性的名稱符合字典中的屬性名稱而且可以讀取時，都會讀取該屬性。其他屬性都會被忽略。舉例來說，這樣就可以從簡單「資料傳輸物件」(DTO) 複製屬性。</summary>
      <param name="obj">要從中讀取值的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToObject">
      <summary>針對此字典建立基礎類型的物件，並與此字典中的屬性值結合。</summary>
      <returns>此字典中複製到新物件的屬性。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToString">
      <summary>傳回 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> 的字串表示法。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbProviderInfo">
      <summary>群組字串配對，這些字串可將提供者和伺服器版本識別至單一物件。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.#ctor(System.String,System.String)">
      <summary>為指定的非變異名稱和資訊清單語彙基元建立新物件。</summary>
      <param name="providerInvariantName">可識別提供者的字串。例如，SQL Server 提供者會使用 "System.Data.SqlCient" 此字串。</param>
      <param name="providerManifestToken">可識別所使用之資料庫版本的字串。例如，SQL Server 提供者會使用 "2008" 此字串來表示 SQL Server 2008。此參數不可為 null，但是可以保留空白。資訊清單語彙基元有時稱為版本提示。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.Equals(System.Object)">
      <summary>判斷指定的物件是否等於此目前的物件。</summary>
      <returns>如果指定的物件等於此目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.GetHashCode">
      <summary>取得此目前物件的雜湊函數。</summary>
      <returns>此目前物件的雜湊函數。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderInvariantName">
      <summary>可識別提供者的字串。例如，SQL Server 提供者會使用 "System.Data.SqlCient" 此字串。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderManifestToken">
      <summary>可識別所使用之資料庫版本的字串。例如，SQL Server 提供者會使用 "2008" 此字串來表示 SQL Server 2008。此參數不可為 null，但是可以保留空白。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery">
      <summary>表示針對 DbContext 的非泛型 LINQ to Entities 查詢。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsNoTracking">
      <summary>傳回新的查詢，其中傳回的實體將不會在 <see cref="T:System.Data.Entity.DbContext" /> 中快取。</summary>
      <returns>已套用 NoTracking 的新查詢。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsStreaming">
      <summary>傳回會串流結果而非緩衝處理的新查詢。</summary>
      <returns>已套用 AsStreaming 的新查詢。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Cast``1">
      <summary>傳回相等的泛型 <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> 物件。</summary>
      <returns>泛型集合物件。</returns>
      <typeparam name="TElement">建立之查詢所針對的項目類型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.ElementType">
      <summary>IQueryable 元素類型。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Equals(System.Object)">
      <summary>指定此查詢是否與指定的物件相等。</summary>
      <returns>如果此查詢與指定的物件相等，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetHashCode">
      <summary>取得與此查詢相關聯的雜湊碼。</summary>
      <returns>與此查詢相關聯的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetType">
      <summary>取得與此查詢相關聯的類型。</summary>
      <returns>與此查詢相關聯的類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)">
      <summary>指定要包含在查詢結果中的相關物件。</summary>
      <returns>新的 DbQuery&amp;lt;T&amp;gt;，包含定義的查詢路徑。</returns>
      <param name="path">要在查詢結果中傳回的相關物件清單 (以點分隔)。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.IEnumerator" />，其在列舉時會對資料庫執行查詢。</summary>
      <returns>查詢結果。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>傳回 false。</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#GetList">
      <summary>擲回例外狀況，表示不支援直接繫結至存放區查詢。改為以資料填入 DbSet，例如，藉由使用 Load 擴充方法，然後繫結至本機資料。如果是 WPF，則繫結至 DbSet.Local。如果是 Windows Form，則繫結至 DbSet.Local.ToBindingList()。</summary>
      <returns>絕對不會傳回，一定會擲回。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>傳回 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" />，其在列舉時會對資料庫執行查詢。</summary>
      <returns>查詢結果。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Expression">
      <summary>IQueryable LINQ 運算式。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Provider">
      <summary>IQueryable 提供者。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.ToString">
      <summary>傳回基礎查詢的 <see cref="T:System.String" /> 表示法。</summary>
      <returns>查詢字串。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery`1">
      <summary>表示針對 DbContext 的 LINQ to Entities 查詢。</summary>
      <typeparam name="TResult">要查詢之實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsNoTracking">
      <summary>傳回新的查詢，其中傳回的實體將不會在 <see cref="T:System.Data.Entity.DbContext" /> 中快取。</summary>
      <returns>已套用 NoTracking 的新查詢。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsStreaming">
      <summary>傳回會串流結果而非緩衝處理的新查詢。</summary>
      <returns>已套用 AsStreaming 的新查詢。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)">
      <summary>判斷目前的查詢是否等於指定的查詢。</summary>
      <returns>如果目前的查詢等於指定的查詢，則為 true，否則為 false。</returns>
      <param name="obj">要與目前查詢比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetHashCode">
      <summary>傳回此查詢的雜湊函數。</summary>
      <returns>此查詢的雜湊函數。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetType">
      <summary>取得目前查詢的類型。</summary>
      <returns>目前查詢的類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)">
      <summary>指定要包含在查詢結果中的相關物件。</summary>
      <returns>含有已定義之查詢路徑的新 <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" />。</returns>
      <param name="path">要在查詢結果中傳回的相關物件清單 (以點分隔)。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery">
      <summary>針對此查詢傳回非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> 類別的新執行個體。</summary>
      <returns>非泛型版本。</returns>
      <param name="entry">查詢。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>取得此查詢的列舉 (使得針對存放區執行此查詢)。</summary>
      <returns>查詢的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.Generic.IEnumerator`1" />，其在列舉時會對資料庫執行查詢。</summary>
      <returns>查詢結果。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>傳回 false。</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>擲回例外狀況，表示不支援直接繫結至存放區查詢。改為以資料填入 DbSet，例如，藉由使用 Load 擴充方法，然後繫結至本機資料。如果是 WPF，則繫結至 DbSet.Local。如果是 Windows Form，則繫結至 DbSet.Local.ToBindingList()。</summary>
      <returns>絕對不會傳回，一定會擲回。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>傳回 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" />，其在列舉時會對資料庫執行查詢。</summary>
      <returns>查詢結果。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>傳回 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" />，其在列舉時會對資料庫執行查詢。</summary>
      <returns>查詢結果。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#ElementType">
      <summary>IQueryable 元素類型。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Expression">
      <summary>IQueryable LINQ 運算式。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Provider">
      <summary>IQueryable 提供者。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.ToString">
      <summary>傳回基礎查詢的 <see cref="T:System.String" /> 表示法。</summary>
      <returns>查詢字串。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbRawSqlQuery">
      <summary>表示非實體的 SQL 查詢，該查詢是從 <see cref="T:System.Data.Entity.DbContext" /> 建立而且會使用該內容中的連接來執行。此類別的執行個體會從 <see cref="P:System.Data.Entity.DbContext.Database" /> 執行個體取得。建立此物件時不會執行此查詢，每當列舉此查詢時便會執行，例如，藉由使用 foreach。實體的 SQL 查詢會使用 <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" /> 加以建立。請參閱 <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1" /> 以取得此類別的泛型版本。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.AsStreaming">
      <summary>傳回會串流結果而非緩衝處理的新查詢。</summary>
      <returns>已套用 AsStreaming 的新查詢。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.Equals(System.Object)">
      <summary>指定此查詢是否與指定的物件相等。</summary>
      <returns>如果此查詢等於指定的物件，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ForEachAsync(System.Action{System.Object})">
      <summary>非同步列舉查詢結果，並針對每個項目執行指定動作。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="action">要在每一個項目上執行的動作。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ForEachAsync(System.Action{System.Object},System.Threading.CancellationToken)">
      <summary>非同步列舉查詢結果，並針對每個項目執行指定動作。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="action">要在每一個項目上執行的動作。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.IEnumerator" />，其在列舉時會對資料庫執行 SQL 查詢。</summary>
      <returns>可以用於逐一查看項目的 <see cref="T:System.Collections.IEnumerator" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetHashCode">
      <summary>取得與此查詢相關聯的雜湊碼。</summary>
      <returns>與此查詢相關聯的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetType">
      <summary>取得與此查詢相關聯的類型。</summary>
      <returns>與此查詢相關聯的類型。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>傳回 false。</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#ComponentModel#IListSource#GetList">
      <summary>擲回例外狀況，表示不支援直接繫結至存放區查詢。</summary>
      <returns>絕對不會傳回，一定會擲回。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>傳回 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" />，其在列舉時會對資料庫執行 SQL 查詢。</summary>
      <returns>可以用於逐一查看項目的 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToListAsync">
      <summary>透過列舉以非同步方式從查詢建立 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>表示非同步作業的工作。工作結果會包含 <see cref="T:System.Collections.Generic.List`1" />，其包含來自查詢的項目。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToListAsync(System.Threading.CancellationToken)">
      <summary>透過列舉以非同步方式從查詢建立 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>表示非同步作業的工作。工作結果會包含 <see cref="T:System.Collections.Generic.List`1" />，其包含來自查詢的項目。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToString">
      <summary>傳回 <see cref="T:System.String" />，其中包含建立查詢時所設定的 SQL 字串。不包含參數。</summary>
      <returns>表示此執行個體的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1">
      <summary>表示非實體的 SQL 查詢，該查詢是從 <see cref="T:System.Data.Entity.DbContext" /> 建立而且會使用該內容中的連接來執行。此類別的執行個體會從 <see cref="P:System.Data.Entity.DbContext.Database" /> 執行個體取得。建立此物件時不會執行此查詢，每當列舉此查詢時便會執行，例如，藉由使用 foreach。實體的 SQL 查詢會使用 <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" /> 加以建立。請參閱 <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" /> 以取得此類別的非泛型版本。</summary>
      <typeparam name="TElement">查詢傳回之元素的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AllAsync(System.Func{`0,System.Boolean})">
      <summary>非同步判斷查詢的所有項目是否都符合條件。</summary>
      <returns>表示非同步作業的工作。如果查詢結果的每個項目都通過指定述詞中的測試，則工作結果包含 true；否則為 false。</returns>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AllAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>非同步判斷查詢的所有項目是否都符合條件。</summary>
      <returns>表示非同步作業的工作。如果查詢結果的每個項目都通過指定述詞中的測試，則工作結果包含 true；否則為 false。</returns>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync">
      <summary>非同步判斷查詢是否包含任何項目。</summary>
      <returns>表示非同步作業的工作。如果查詢結果包含任何項目，則工作結果包含 true；否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Func{`0,System.Boolean})">
      <summary>非同步判斷查詢的任何項目是否符合條件。</summary>
      <returns>表示非同步作業的工作。如果查詢結果中的任何項目通過指定述詞中的測試，則工作結果包含 true；否則為 false。</returns>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>非同步判斷查詢的任何項目是否符合條件。</summary>
      <returns>表示非同步作業的工作。如果查詢結果中的任何項目通過指定述詞中的測試，則工作結果包含 true；否則為 false。</returns>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Threading.CancellationToken)">
      <summary>非同步判斷查詢是否包含任何項目。</summary>
      <returns>表示非同步作業的工作。如果查詢結果包含任何項目，則工作結果包含 true；否則為 false。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AsStreaming">
      <summary>傳回會串流結果而非緩衝處理的新查詢。</summary>
      <returns>已套用 AsStreaming 的新查詢。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ContainsAsync(`0)">
      <summary>使用預設的相等比較子 (Comparer) 來非同步判斷查詢是否包含指定的項目。</summary>
      <returns>表示非同步作業的工作。如果查詢結果包含指定值，則工作結果包含 true；否則為 false。</returns>
      <param name="value">要在查詢結果中尋找的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ContainsAsync(`0,System.Threading.CancellationToken)">
      <summary>使用預設的相等比較子 (Comparer) 來非同步判斷查詢是否包含指定的項目。</summary>
      <returns>表示非同步作業的工作。如果查詢結果包含指定值，則工作結果包含 true；否則為 false。</returns>
      <param name="value">要在查詢結果中尋找的物件。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync">
      <summary>非同步傳回查詢中的項目數。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果中的項目數。</returns>
      <exception cref="T:System.OverflowException">查詢結果中的項目數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Func{`0,System.Boolean})">
      <summary>非同步傳回查詢中符合條件的項目數。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果中符合述詞函式之條件的項目數。</returns>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <exception cref="T:System.OverflowException">查詢結果中符合述詞函數之條件的項目數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>非同步傳回查詢中符合條件的項目數。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果中符合述詞函式之條件的項目數。</returns>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OverflowException">查詢結果中符合述詞函數之條件的項目數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Threading.CancellationToken)">
      <summary>非同步傳回查詢中的項目數。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果中的項目數。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OverflowException">查詢結果中的項目數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.Equals(System.Object)">
      <summary>判斷目前的查詢是否等於指定的查詢。</summary>
      <returns>如果目前的查詢等於指定的查詢，則為 true，否則為 false。</returns>
      <param name="obj">要與目前查詢比較的查詢。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync">
      <summary>非同步傳回查詢的第一個項目。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果中的第一個項目。</returns>
      <exception cref="T:System.InvalidOperationException">查詢結果為空白。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Func{`0,System.Boolean})">
      <summary>非同步傳回查詢中符合指定條件的第一個項目。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果中符合指定條件的第一個項目。</returns>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">查詢結果為空白。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>非同步傳回查詢中符合指定條件的第一個項目。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果中符合指定條件的第一個項目。</returns>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">查詢結果為空白。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Threading.CancellationToken)">
      <summary>非同步傳回查詢的第一個項目。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果中的第一個項目。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">查詢結果為空白。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync">
      <summary>非同步傳回查詢的第一個項目，如果查詢結果未包含任何項目，則傳回預設值。</summary>
      <returns>表示非同步作業的工作。如果查詢結果為空白，則工作結果包含 default (<paramref name="TElement" />)；否則會包含查詢結果中的第一個項目。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Func{`0,System.Boolean})">
      <summary>非同步傳回查詢中符合指定條件的第一個項目，如果找不到這類項目，則傳回預設值。</summary>
      <returns>表示非同步作業的工作。如果查詢結果為空白，或是沒有任何項目通過 default 所指定的測試，則工作結果包含 <paramref name="TElement" /> (<paramref name="predicate" />)；否則會包含查詢結果中通過 <paramref name="predicate" /> 所指定測試的第一個項目。</returns>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>非同步傳回查詢中符合指定條件的第一個項目，如果找不到這類項目，則傳回預設值。</summary>
      <returns>表示非同步作業的工作。如果查詢結果為空白，或是沒有任何項目通過 default 所指定的測試，則工作結果包含 <paramref name="TElement" /> (<paramref name="predicate" />)；否則會包含查詢結果中通過 <paramref name="predicate" /> 所指定測試的第一個項目。</returns>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Threading.CancellationToken)">
      <summary>非同步傳回查詢的第一個項目，如果查詢結果未包含任何項目，則傳回預設值。</summary>
      <returns>表示非同步作業的工作。如果查詢結果為空白，則工作結果包含 default (<paramref name="TElement" />)；否則會包含查詢結果中的第一個項目。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ForEachAsync(System.Action{`0})">
      <summary>非同步列舉查詢結果，並針對每個項目執行指定動作。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="action">要執行的動作。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ForEachAsync(System.Action{`0},System.Threading.CancellationToken)">
      <summary>非同步列舉查詢結果，並針對每個項目執行指定動作。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="action">要執行的動作。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.Generic.IEnumerator`1" />，其在列舉時會對資料庫執行 SQL 查詢。</summary>
      <returns>可以用於逐一查看項目的 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetHashCode">
      <summary>傳回此查詢的雜湊函數。</summary>
      <returns>此查詢的雜湊函數。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetType">
      <summary>取得目前查詢的類型。</summary>
      <returns>目前查詢的類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync">
      <summary>非同步傳回 <see cref="T:System.Int64" />，表示查詢中的項目總數。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果中的項目數。</returns>
      <exception cref="T:System.OverflowException">查詢結果中的項目數大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Func{`0,System.Boolean})">
      <summary>非同步傳回 <see cref="T:System.Int64" />，表示查詢中符合條件的項目數。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果中符合述詞函式之條件的項目數。</returns>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <exception cref="T:System.OverflowException">查詢結果中符合述詞函數之條件的項目數大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>非同步傳回 <see cref="T:System.Int64" />，表示查詢中符合條件的項目數。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果中符合述詞函式之條件的項目數。</returns>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OverflowException">查詢結果中符合述詞函數之條件的項目數大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Threading.CancellationToken)">
      <summary>非同步傳回 <see cref="T:System.Int64" />，表示查詢中的項目總數。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果中的項目數。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OverflowException">查詢結果中的項目數大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MaxAsync">
      <summary>非同步傳回查詢的最大值。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果中的最大值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MaxAsync(System.Threading.CancellationToken)">
      <summary>非同步傳回查詢的最大值。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果中的最大值。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MinAsync">
      <summary>非同步傳回查詢的最小值。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果中的最小值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MinAsync(System.Threading.CancellationToken)">
      <summary>非同步傳回查詢的最小值。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果中的最小值。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync">
      <summary>非同步傳回查詢的唯一一個項目，如果序列中不是正好一個項目，則擲回例外狀況。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果的單一項目。</returns>
      <exception cref="T:System.InvalidOperationException">查詢結果有多個項目。</exception>
      <exception cref="T:System.InvalidOperationException">查詢結果為空白。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Func{`0,System.Boolean})">
      <summary>非同步傳回查詢中符合指定條件的唯一一個項目，如果有一個以上這類項目，則擲回例外狀況。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果中符合 <paramref name="predicate" /> 中條件的單一項目。</returns>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有任何項目符合 <paramref name="predicate" /> 中的條件。</exception>
      <exception cref="T:System.InvalidOperationException">超過一個項目符合 <paramref name="predicate" /> 中的條件。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>非同步傳回查詢中符合指定條件的唯一一個項目，如果有一個以上這類項目，則擲回例外狀況。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果中符合 <paramref name="predicate" /> 中條件的單一項目。</returns>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">沒有任何項目符合 <paramref name="predicate" /> 中的條件。</exception>
      <exception cref="T:System.InvalidOperationException">超過一個項目符合 <paramref name="predicate" /> 中的條件。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Threading.CancellationToken)">
      <summary>非同步傳回查詢的唯一一個項目，如果序列中不是正好一個項目，則擲回例外狀況。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果的單一項目。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">查詢結果有多個項目。</exception>
      <exception cref="T:System.InvalidOperationException">查詢結果為空白。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync">
      <summary>非同步傳回序列的唯一一個項目，如果序列是空白，則為預設值，如果序列中有一個以上的項目，此方法就會擲回例外狀況。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果的單一項目，如果序列沒有包含任何項目，則為 default (<paramref name="TElement" />)。</returns>
      <exception cref="T:System.InvalidOperationException">查詢結果有多個項目。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Func{`0,System.Boolean})">
      <summary>非同步傳回查詢中符合指定條件的唯一一個項目，如果沒有這類項目，則為預設值，如果有一個以上的項目符合條件，此方法就會擲回例外狀況。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果中滿足 <paramref name="predicate" /> 中條件的單一項目，如果找不到這類項目，則為 default (<paramref name="TElement" />)。</returns>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">超過一個項目符合 <paramref name="predicate" /> 中的條件。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>非同步傳回查詢中符合指定條件的唯一一個項目，如果沒有這類項目，則為預設值，如果有一個以上的項目符合條件，此方法就會擲回例外狀況。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果中滿足 <paramref name="predicate" /> 中條件的單一項目，如果找不到這類項目，則為 default (<paramref name="TElement" />)。</returns>
      <param name="predicate">用來測試每個項目是否符合條件的函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">超過一個項目符合 <paramref name="predicate" /> 中的條件。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Threading.CancellationToken)">
      <summary>非同步傳回序列的唯一一個項目，如果序列是空白，則為預設值，如果序列中有一個以上的項目，此方法就會擲回例外狀況。</summary>
      <returns>表示非同步作業的工作。工作結果包含查詢結果的單一項目，如果序列沒有包含任何項目，則為 default (<paramref name="TElement" />)。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">查詢結果有多個項目。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.IEnumerator" />，其在列舉時會對資料庫執行 SQL 查詢。</summary>
      <returns>可以用於逐一查看項目的 <see cref="T:System.Collections.IEnumerator" /> 物件。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>傳回 false。</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>擲回例外狀況，表示不支援直接繫結至存放區查詢。</summary>
      <returns>絕對不會傳回，一定會擲回。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>傳回 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" />，其在列舉時會對資料庫執行 SQL 查詢。</summary>
      <returns>可以用於逐一查看項目的 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>傳回 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" />，其在列舉時會對資料庫執行 SQL 查詢。</summary>
      <returns>可以用於逐一查看項目的 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToArrayAsync">
      <summary>透過列舉以非同步方式從查詢建立陣列。</summary>
      <returns>表示非同步作業的工作。工作結果會包含陣列，該陣列包含輸入序列中的項目。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToArrayAsync(System.Threading.CancellationToken)">
      <summary>透過列舉以非同步方式從查詢建立陣列。</summary>
      <returns>表示非同步作業的工作。工作結果會包含陣列，該陣列包含輸入序列中的項目。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0})">
      <summary>根據指定的索引鍵選取器函式，透過列舉以非同步方式從查詢建立 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <see cref="T:System.Collections.Generic.Dictionary`2" />，其包含選取的索引鍵和值。</returns>
      <param name="keySelector">用來從各個項目擷取索引鍵的函式。</param>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 傳回之索引鍵的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>根據指定的索引鍵選取器函數和比較子，透過列舉以非同步方式從查詢建立 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <see cref="T:System.Collections.Generic.Dictionary`2" />，其包含選取的索引鍵和值。</returns>
      <param name="keySelector">用來從各個項目擷取索引鍵的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 傳回之索引鍵的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
      <summary>根據指定的索引鍵選取器函數和比較子，透過列舉以非同步方式從查詢建立 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <see cref="T:System.Collections.Generic.Dictionary`2" />，其包含選取的索引鍵和值。</returns>
      <param name="keySelector">用來從各個項目擷取索引鍵的函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 傳回之索引鍵的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1})">
      <summary>根據指定的索引鍵選取器以及項目選取器函數，透過列舉以非同步方式從查詢建立 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <see cref="T:System.Collections.Generic.Dictionary`2" />，其包含從查詢中選取的類型 <paramref name="TResult" /> 的值。</returns>
      <param name="keySelector">用來從各個項目擷取索引鍵的函式。</param>
      <param name="elementSelector">用來從每個項目產生結果項目值的轉換函式。</param>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 傳回之索引鍵的類型。</typeparam>
      <typeparam name="TResult">
        <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>根據指定的索引鍵選取器函式、比較子和項目選取器函式，透過列舉以非同步方式從查詢建立 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <see cref="T:System.Collections.Generic.Dictionary`2" />，其包含從輸入序列中選取的類型 <paramref name="TResult" /> 的值。</returns>
      <param name="keySelector">用來從各個項目擷取索引鍵的函式。</param>
      <param name="elementSelector">用來從每個項目產生結果項目值的轉換函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 傳回之索引鍵的類型。</typeparam>
      <typeparam name="TResult">
        <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
      <summary>根據指定的索引鍵選取器函式、比較子和項目選取器函式，透過列舉以非同步方式從查詢建立 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <see cref="T:System.Collections.Generic.Dictionary`2" />，其包含從輸入序列中選取的類型 <paramref name="TResult" /> 的值。</returns>
      <param name="keySelector">用來從各個項目擷取索引鍵的函式。</param>
      <param name="elementSelector">用來從每個項目產生結果項目值的轉換函式。</param>
      <param name="comparer">用來比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 傳回之索引鍵的類型。</typeparam>
      <typeparam name="TResult">
        <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Threading.CancellationToken)">
      <summary>根據指定的索引鍵選取器以及項目選取器函數，透過列舉以非同步方式從查詢建立 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <see cref="T:System.Collections.Generic.Dictionary`2" />，其包含從查詢中選取的類型 <paramref name="TResult" /> 的值。</returns>
      <param name="keySelector">用來從各個項目擷取索引鍵的函式。</param>
      <param name="elementSelector">用來從每個項目產生結果項目值的轉換函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 傳回之索引鍵的類型。</typeparam>
      <typeparam name="TResult">
        <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Threading.CancellationToken)">
      <summary>根據指定的索引鍵選取器函式，透過列舉以非同步方式從查詢建立 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示非同步作業的工作。工作結果包含 <see cref="T:System.Collections.Generic.Dictionary`2" />，其包含選取的索引鍵和值。</returns>
      <param name="keySelector">用來從各個項目擷取索引鍵的函式。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 傳回之索引鍵的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToListAsync">
      <summary>透過列舉以非同步方式從查詢建立 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>表示非同步作業的工作。工作結果會包含 <see cref="T:System.Collections.Generic.List`1" />，其包含輸入序列中的項目。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToListAsync(System.Threading.CancellationToken)">
      <summary>透過列舉以非同步方式從查詢建立 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>表示非同步作業的工作。工作結果會包含 <see cref="T:System.Collections.Generic.List`1" />，其包含輸入序列中的項目。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToString">
      <summary>傳回 <see cref="T:System.String" />，其中包含建立查詢時所設定的 SQL 字串。不包含參數。</summary>
      <returns>表示此執行個體的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> 類別的非泛型版本。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Cast``2">
      <summary>傳回相等的泛型 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> 物件。</summary>
      <returns>相等的泛型物件。</returns>
      <typeparam name="TEntity">這是成員宣告所在之實體的類型。</typeparam>
      <typeparam name="TProperty">此屬性的類型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.CurrentValue">
      <summary>取得或設定導覽屬性的目前值。目前的值是導覽屬性所參考的實體。</summary>
      <returns>目前的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.EntityEntry">
      <summary>此導覽屬性所屬的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</summary>
      <returns>擁有此導覽屬性之實體的項目。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.IsLoaded">
      <summary>取得或設定值，指出是否已從資料庫載入實體。</summary>
      <returns>如果已載入實體或已明確將 IsLoaded 設為 true，則為 true；否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Load">
      <summary>從資料庫載入實體。請注意，如果此實體已經存在於內容中，不會以資料庫中的值覆寫此實體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.LoadAsync">
      <summary>從資料庫非同步載入實體。請注意，如果此實體已經存在於內容中，不會以資料庫中的值覆寫此實體。</summary>
      <returns>表示非同步作業的工作。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.LoadAsync(System.Threading.CancellationToken)">
      <summary>從資料庫非同步載入實體。請注意，如果此實體已經存在於內容中，不會以資料庫中的值覆寫此實體。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.Name">
      <summary>取得屬性名稱。</summary>
      <returns>屬性名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Query">
      <summary>傳回查詢，這原本是從資料庫載入此實體所使用的查詢。傳回的查詢可以使用 LINQ 加以修改，以便在資料庫中執行篩選或運算。</summary>
      <returns>此實體的查詢。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2">
      <summary>此類別的執行個體會從 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 的 Reference 方法傳回，並允許在實體的參考導覽屬性上執行類似載入的作業。</summary>
      <typeparam name="TEntity">此屬性所屬之實體的類型。</typeparam>
      <typeparam name="TProperty">此屬性的類型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.CurrentValue">
      <summary>取得或設定導覽屬性的目前值。目前的值是導覽屬性所參考的實體。</summary>
      <returns>目前的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.EntityEntry">
      <summary>此導覽屬性所屬的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</summary>
      <returns>擁有此導覽屬性之實體的項目。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.IsLoaded">
      <summary>取得或設定值，指出是否已從資料庫載入實體。</summary>
      <returns>如果已載入實體或已明確將 IsLoaded 設為 true，則為 true；否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Load">
      <summary>從資料庫載入實體。請注意，如果此實體已經存在於內容中，不會以資料庫中的值覆寫此實體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.LoadAsync">
      <summary>從資料庫非同步載入實體。請注意，如果此實體已經存在於內容中，不會以資料庫中的值覆寫此實體。</summary>
      <returns>表示非同步作業的工作。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.LoadAsync(System.Threading.CancellationToken)">
      <summary>從資料庫非同步載入實體。請注意，如果此實體已經存在於內容中，不會以資料庫中的值覆寫此實體。</summary>
      <returns>表示非同步作業的工作。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Name">
      <summary>取得屬性名稱。</summary>
      <returns>屬性名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>針對此物件所表示的導覽屬性傳回非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> 類別的新執行個體。</summary>
      <returns>非泛型版本。</returns>
      <param name="entry">表示導覽屬性的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Query">
      <summary>傳回查詢，這原本是從資料庫載入此實體所使用的查詢。傳回的查詢可以使用 LINQ 加以修改，以便在資料庫中執行篩選或運算。</summary>
      <returns>此實體的查詢。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery">
      <summary>表示實體的 SQL 查詢，該查詢是從 <see cref="T:System.Data.Entity.DbContext" /> 建立而且會使用該內容中的連接來執行。此類別的執行個體會從實體類型的 <see cref="T:System.Data.Entity.DbSet" /> 執行個體取得。建立此物件時不會執行此查詢，每當列舉此查詢時便會執行，例如，藉由使用 foreach。非實體的 SQL 查詢會使用 <see cref="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])" /> 加以建立。請參閱 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> 以取得此類別的泛型版本。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.#ctor">
      <summary>從將要做為 <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" /> 的測試複本使用之衍生類型的建構函式呼叫時，建立 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> 的執行個體。供測試複本使用的方法和屬性必須由測試複本實作，唯獨預設實作不執行任何作業的 AsNoTracking 及 AsStreaming 除外。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsNoTracking">
      <summary>傳回新的查詢，其中查詢的結果將不會由關聯的 <see cref="T:System.Data.Entity.DbContext" /> 所追蹤。</summary>
      <returns>已套用 NoTracking 的新查詢。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsStreaming">
      <summary>傳回會串流結果而非緩衝處理的新查詢。</summary>
      <returns>已套用 AsStreaming 的新查詢。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的執行個體。</summary>
      <returns>如果指定的物件等於目前的執行個體，則為 true，否則為 false。</returns>
      <param name="obj">要與目前執行個體比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetHashCode">
      <summary>傳回目前執行個體的雜湊碼。</summary>
      <returns>目前執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetType">
      <summary>取得與此查詢相關聯的類型。</summary>
      <returns>與此查詢相關聯的類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.ToString">
      <summary>傳回 <see cref="T:System.String" />，其中包含建立查詢時所設定的 SQL 字串。不包含參數。</summary>
      <returns>表示此執行個體的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery`1">
      <summary>表示實體的 SQL 查詢，該查詢是從 <see cref="T:System.Data.Entity.DbContext" /> 建立而且會使用該內容中的連接來執行。此類別的執行個體會從實體類型的 <see cref="T:System.Data.Entity.DbSet`1" /> 執行個體取得。建立此物件時不會執行此查詢，每當列舉此查詢時便會執行，例如，藉由使用 foreach。非實體的 SQL 查詢會使用 <see cref="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])" /> 加以建立。請參閱 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> 以取得此類別的非泛型版本。</summary>
      <typeparam name="TEntity">查詢傳回之實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.#ctor">
      <summary>從將要做為 <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" /> 的測試複本使用之衍生類型的建構函式呼叫時，建立 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> 的執行個體。供測試複本使用的方法和屬性必須由測試複本實作，唯獨預設實作不執行任何作業的 AsNoTracking 及 AsStreaming 除外。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsNoTracking">
      <summary>傳回新的查詢，其中傳回的實體將不會在 <see cref="T:System.Data.Entity.DbContext" /> 中快取。</summary>
      <returns>已套用 NoTracking 的新查詢。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsStreaming">
      <summary>傳回會串流結果而非緩衝處理的新查詢。</summary>
      <returns>已套用 AsStreaming 的新查詢。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.Equals(System.Object)">
      <summary>指定此執行個體是否等於指定物件。</summary>
      <returns>若此執行個體等於指定物件，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetHashCode">
      <summary>取得與此執行個體相關聯的雜湊碼。</summary>
      <returns>與此執行個體相關聯的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetType">
      <summary>取得與此執行個體相關聯的類型。</summary>
      <returns>與此執行個體相關聯的類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.ToString">
      <summary>傳回此執行個體的字串表示。</summary>
      <returns>此執行個體的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
      <summary>當預期實體的 SaveChanges 會產生資料庫更新但實際上資料庫中沒有任何資料列受到影響時，<see cref="T:System.Data.Entity.DbContext" /> 所擲回的例外狀況。這通常表示，資料庫已經並行更新，因此原本預期要符合的並行 Token 實際上並未符合。請注意，此例外狀況所參考的狀態項目並未序列化，因為安全性的緣故以及序列化之後狀態項目的存取將會傳回 null。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 類別的新執行個體。</summary>
      <param name="message">訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 類別的新執行個體。</summary>
      <param name="message">訊息。</param>
      <param name="innerException">內部例外狀況。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateException">
      <summary>儲存資料庫變更失敗時，<see cref="T:System.Data.Entity.DbContext" /> 所擲回的例外狀況。請注意，此例外狀況所參考的狀態項目並未序列化，因為安全性的緣故以及序列化之後狀態項目的存取將會傳回 null。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 類別的新執行個體。</summary>
      <param name="message">訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 類別的新執行個體。</summary>
      <param name="message">訊息。</param>
      <param name="innerException">內部例外狀況。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbUpdateException.Entries">
      <summary>取得 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 物件，表示無法儲存到資料庫的實體。</summary>
      <returns>用來表示無法儲存之實體的項目。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy">
      <summary>表示失敗時不重試作業的預設 <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.Execute(System.Action)">
      <summary>只執行一次指定的作業。</summary>
      <param name="operation">代表可執行作業的委派，該作業不會傳回任何結果。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>只執行一次指定的作業並傳回結果。</summary>
      <returns>從作業產生的結果。</returns>
      <param name="operation">代表可執行作業的委派，該作業會傳回類型為 <paramref name="TResult" /> 的結果。</param>
      <typeparam name="TResult">
        <paramref name="operation" /> 的傳回類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>只執行一次指定的非同步作業，失敗時不會重試。</summary>
      <returns>如果原始工作順利完成，就會執行到完成的工作。</returns>
      <param name="operation">會傳回已啟動工作的函式。</param>
      <param name="cancellationToken">用於取消重試作業的取消語彙基元，但不會取消正在執行的作業或已成功完成的作業。</param>
      <typeparam name="TResult">
        <paramref name="operation" /> 所傳回的 <see cref="T:System.Threading.Tasks.Task`1" /> 的結果類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>只執行一次指定的非同步作業，失敗時不會重試。</summary>
      <returns>如果原始工作順利完成，就會執行到完成的工作。</returns>
      <param name="operation">會傳回已啟動工作的函式。</param>
      <param name="cancellationToken">用於取消重試作業的取消語彙基元，但不會取消正在執行的作業或已成功完成的作業。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.RetriesOnFailure">
      <summary>取得 <see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy" /> 是否要在失敗後重試執行。</summary>
      <returns>若 <see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy" /> 要在失敗後重試執行，則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver">
      <summary>表示 <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver" /> 的預設實作，其會使用基礎提供者取得資訊清單語彙基元。請避免使用多個查詢，因為此實作會根據 <see cref="T:System.Data.Common.DbConnection" /> 執行個體、<see cref="P:System.Data.Common.DbConnection.DataSource" /> 屬性和 <see cref="P:System.Data.Common.DbConnection.Database" /> 屬性的實際類型使用快取。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver.ResolveManifestToken(System.Data.Common.DbConnection)">
      <summary>傳回要用於指定連接的資訊清單語彙基元。</summary>
      <returns>要使用的資訊清單語彙基元。</returns>
      <param name="connection">需要資訊清單語彙基元的連接。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmMetadata">
      <summary>表示用來儲存有關資料庫內 EDM 之中繼資料的實體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.EdmMetadata" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.Id">
      <summary>取得或設定中繼資料實體的 ID，此 ID 目前一定是 1。</summary>
      <returns>ID。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.ModelHash">
      <summary>取得或設定模型雜湊，此雜湊是用來檢查從此模型建立資料庫之後，此模型是否已變更。</summary>
      <returns>模型雜湊。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.TryGetModelHash(System.Data.Entity.DbContext)">
      <summary>嘗試針對給定內容取得 Code First 所計算的模型雜湊。如果 Code First 模式中未使用此內容，此方法將會傳回 null。</summary>
      <returns>雜湊字串。</returns>
      <param name="context">內容。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmxWriter">
      <summary>包含用來存取 EDMX 表單中 Code First 所建立之實體資料模型的方法。當需要查看 Code First 在內部建立的模型時，這些方法通常會用來偵錯。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.DbContext,System.Xml.XmlWriter)">
      <summary>搭配給定的內容使用 Code First 並將產生的實體資料模型寫入 EDMX 表單中的給定寫入器。此方法只能搭配使用 Code First 並在內部建立模型的內容執行個體一起使用。此方法無法用於使用 Database First 或 Model First 建立的內容、使用預先存在的 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 建立的內容或是使用預先存在的 <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> 建立的內容。</summary>
      <param name="context">內容。</param>
      <param name="writer">寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.Infrastructure.DbModel,System.Xml.XmlWriter)">
      <summary>將給定 <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> 所表示的實體資料模型寫入 EDMX 表單中的給定寫入器。</summary>
      <param name="model">表示 EDM 的物件。</param>
      <param name="writer">寫入器。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey">
      <summary>用於解析 <see cref="T:System.Func`1" /> 的索引鍵。它包含如連接字串中所指定的 ADO.NET 提供者非變異名稱和資料庫伺服器名稱。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" /> 的新執行個體。</summary>
      <param name="providerInvariantName">ADO.NET 提供者非變異名稱，表示使用此執行策略時所經 ADO.NET 連接的類型。</param>
      <param name="serverName">要與連接字串中的伺服器名稱進行比對的字串。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.Equals(System.Object)">
      <summary>判斷指定的物件是否等於此索引鍵。</summary>
      <returns>如果指定的物件等於此索引鍵，則為 true，否則為 false。</returns>
      <param name="obj">要相比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.GetHashCode">
      <summary>傳回目前執行個體的雜湊碼。</summary>
      <returns>目前執行個體的雜湊碼。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ExecutionStrategyKey.ProviderInvariantName">
      <summary>ADO.NET 提供者非變異名稱，表示使用此執行策略時所經 ADO.NET 連接的類型。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ExecutionStrategyKey.ServerName">
      <summary>要與連接字串中的伺服器名稱進行比對的字串。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable">
      <summary>
        <see cref="T:System.Collections.IEnumerable" /> 介面的非同步版本，允許以非同步方式擷取項目。此介面是用於與 Entity Framework 查詢互動，並且不應該透過自訂類別實作。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator">
      <summary>取得可用來以非同步方式列舉序列的列舉值。</summary>
      <returns>非同步列舉序列的列舉值。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1">
      <summary>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 介面的非同步版本，允許以非同步方式擷取可列舉序列的項目。此介面是用於與 Entity Framework 查詢互動，並且不應該透過自訂類別實作。</summary>
      <typeparam name="T">要列舉之物件的類型。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。 如需共變數與反變數的詳細資訊，請參閱。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1.GetAsyncEnumerator">
      <summary>取得可用來以非同步方式列舉序列的列舉值。</summary>
      <returns>非同步列舉序列的列舉值。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator">
      <summary>
        <see cref="T:System.Collections.IEnumerator" /> 介面的非同步版本，允許以非同步方式擷取項目。此介面是用於與 Entity Framework 查詢互動，並且不應該透過自訂類別實作。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current">
      <summary>取得反覆項目中目前的項目。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)">
      <summary>讓列舉值前進到序列中的下一個項目，以非同步方式傳回結果。</summary>
      <returns>表示非同步作業的工作。如果列舉值成功地前移至下一個項目，則工作結果包含 true，如果列舉值已超過序列的結尾，則為 false。</returns>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1">
      <summary>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> 介面的非同步版本，允許以非同步方式擷取項目。此介面是用於與 Entity Framework 查詢互動，並且不應該透過自訂類別實作。</summary>
      <typeparam name="T">要列舉之物件的類型。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。 如需共變數與反變數的詳細資訊，請參閱。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1.Current">
      <summary>取得反覆項目中目前的項目。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider">
      <summary>定義方法來建立並非同步執行 <see cref="T:System.Linq.IQueryable" /> 物件所描述的查詢。此介面是用於與 Entity Framework 查詢互動，並且不應該透過自訂類別實作。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
      <summary>非同步執行由指定之運算式樹狀架構所代表的強類型查詢。</summary>
      <returns>表示非同步作業的工作。工作結果包含執行指定查詢所產生的值。</returns>
      <param name="expression">代表 LINQ 查詢的運算式樹狀架構。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TResult">執行查詢所產生值的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider.ExecuteAsync(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
      <summary>非同步執行由指定之運算式樹狀架構所代表的查詢。</summary>
      <returns>表示非同步作業的工作。工作結果包含執行指定查詢所產生的值。</returns>
      <param name="expression">代表 LINQ 查詢的運算式樹狀架構。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbConnectionFactory">
      <summary>此介面的實作是用來根據給定的資料庫名稱，針對某一種類型的資料庫伺服器建立 DbConnection 物件。在 <see cref="T:System.Data.Entity.Database" /> 類別上設定執行個體，好讓所有 DbContext 得以建立而不需要任何連接資訊，或是只需要資料庫名稱或連接字串，就可以在預設情況下使用某種類型的資料庫伺服器。提供此介面的兩個實作：<see cref="T:System.Data.Entity.Infrastructure.SqlConnectionFactory" /> 是用來建立與 Microsoft SQL Server 的連接 (包括 EXPRESS 版本)。<see cref="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory" /> 是用來建立與 Microsoft SQL Server Compact Edition 的連接。其他資料庫伺服器所適用的其他實作可視需要加入。請注意，實作應該具備執行緒安全或不可變，因為在同時間可能會有多個執行緒加以存取。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbConnectionFactory.CreateConnection(System.String)">
      <summary>根據給定的資料庫名稱或連接字串建立連接。</summary>
      <returns>初始化的 DbConnection。</returns>
      <param name="nameOrConnectionString">資料庫名稱或連接字串。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbContextFactory`1">
      <summary>用於建立衍生之 <see cref="T:System.Data.Entity.DbContext" /> 執行個體的 Factory。請實作此介面，以便針對沒有公用預設建構函式的內容類型啟用設計階段服務。您可以建立設計階段的衍生 <see cref="T:System.Data.Entity.DbContext" /> 執行個體，以便啟用特定的設計階段經驗，例如模型轉譯和 DDL 產生等等。若要針對沒有公用預設建構函式的衍生 <see cref="T:System.Data.Entity.DbContext" /> 類型啟用設計階段具現化，請實作此介面。設計階段服務會自動探索與衍生之 <see cref="T:System.Data.Entity.DbContext" /> 類型位於相同組件的介面實作。</summary>
      <typeparam name="TContext">內容的類型。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。 如需共變數與反變數的詳細資訊，請參閱。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbContextFactory`1.Create">
      <summary>建立衍生之 <see cref="T:System.Data.Entity.DbContext" /> 類型的新執行個體。</summary>
      <returns>TContext 的執行個體</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy">
      <summary>用來針對資料庫執行命令或查詢的策略，具有發生失敗時可以重試的邏輯。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.Execute(System.Action)">
      <summary>執行指定的作業。</summary>
      <param name="operation">代表可執行作業的委派，該作業不會傳回任何結果。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>執行指定的作業並傳回結果。</summary>
      <returns>從作業產生的結果。</returns>
      <param name="operation">代表可執行作業的委派，該作業會傳回類型為 <paramref name="TResult" /> 的結果。</param>
      <typeparam name="TResult">
        <paramref name="operation" /> 的傳回類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>執行指定的非同步作業並傳回結果。</summary>
      <returns>如果原始工作順利完成，就會執行到完成的工作 (不論是第一次或是在重試暫時性失敗後)。如果工作因為非暫時性錯誤而失敗，或是已達到重試限制，則傳回的工作會發生錯誤，並且必須觀察例外狀況。</returns>
      <param name="operation">一個函式，會傳回類型為 <paramref name="TResult" /> 的已啟動工作。</param>
      <param name="cancellationToken">用於取消重試作業的取消語彙基元，但不會取消正在執行的作業或已成功完成的作業。</param>
      <typeparam name="TResult">
        <paramref name="operation" /> 所傳回的 <see cref="T:System.Threading.Tasks.Task`1" /> 的結果類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>執行指定的非同步作業。</summary>
      <returns>如果原始工作順利完成，就會執行到完成的工作 (不論是第一次或是在重試暫時性失敗後)。如果工作因為非暫時性錯誤而失敗，或是已達到重試限制，則傳回的工作會發生錯誤，並且必須觀察例外狀況。</returns>
      <param name="operation">會傳回已啟動工作的函式。</param>
      <param name="cancellationToken">用於取消重試作業的取消語彙基元，但不會取消正在執行的作業或已成功完成的作業。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbExecutionStrategy.RetriesOnFailure">
      <summary>指出此 <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> 是否可在失敗之後重試執行。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbModelCacheKey">
      <summary>表示可唯一識別已載入記憶體之 Entity Framework 模型的索引鍵值。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbModelCacheKey.Equals(System.Object)">
      <summary>判斷目前的快取模型索引鍵是否與指定的快取模型索引鍵相等。</summary>
      <returns>如果目前的快取模型索引鍵與指定的快取模型索引鍵相等，則為 true，否則為 false。</returns>
      <param name="other">要與目前的快取模型索引鍵比較的快取模型索引鍵。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbModelCacheKey.GetHashCode">
      <summary>傳回此快取模型索引鍵的雜湊函數。</summary>
      <returns>此快取模型索引鍵的雜湊函數。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbModelCacheKeyProvider">
      <summary>針對您的內容實作此介面，以使用自訂邏輯來計算用來查詢快取中已建立之模型的索引鍵。此介面可讓您擁有可在相同 AppDomain 中搭配不同模型使用的單一內容類型，或者擁有多個使用相同模型的內容類型。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbModelCacheKeyProvider.CacheKey">
      <summary>取得與提供者相關聯的快取索引鍵。</summary>
      <returns>與提供者相關聯的快取索引鍵。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver">
      <summary>用於從指定 <see cref="T:System.Data.Common.DbConnection" /> 取得正確 <see cref="T:System.Data.Common.DbProviderFactory" /> 的服務。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver.ResolveProviderFactory(System.Data.Common.DbConnection)">
      <summary>傳回給定連接的 <see cref="T:System.Data.Common.DbProviderFactory" />。</summary>
      <returns>連接的提供者處理站。</returns>
      <param name="connection">連接。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IManifestTokenResolver">
      <summary>在提供連接的情況下用來取得提供者資訊清單語彙基元的服務。預設會使用 <see cref="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver" /> 類別，並利用基礎提供者取得通常涉及開啟連接的語彙基元。可以藉由將 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 加入至可使用連接中的任何資訊傳回語彙基元的 <see cref="T:System.Data.Entity.DbConfiguration" />，而改為使用不同的實作。例如，如果已知連接是指向 SQL Server 2008 資料庫，則不需要開啟連接即可傳回「2008」。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IManifestTokenResolver.ResolveManifestToken(System.Data.Common.DbConnection)">
      <summary>傳回要用於指定連接的資訊清單語彙基元。</summary>
      <returns>要使用的資訊清單語彙基元。</returns>
      <param name="connection">需要資訊清單語彙基元的連接。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer">
      <summary>實作此介面可讓 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> 執行個體所表示的自訂註釋將序列化為 EDMX XML，反之亦然。通常您可以使用 <see cref="M:System.Data.Entity.DbConfiguration.SetMetadataAnnotationSerializer(System.String,System.Func{System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer})" /> 方法設定序列化程式執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer.Deserialize(System.String,System.String)">
      <summary>將指定的字串還原序列化為預期的註釋值。</summary>
      <returns>已還原序列化的註釋值。</returns>
      <param name="name">要還原序列化的註釋名稱。</param>
      <param name="value">要還原序列化的字串。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer.Serialize(System.String,System.Object)">
      <summary>將指定的註釋值序列化為字串，方便以 EDMX XML 格式存放。</summary>
      <returns>已序列化的值。</returns>
      <param name="name">要序列化的註釋名稱。</param>
      <param name="value">要序列化的值。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention">
      <summary>此 <see cref="T:System.Data.Entity.DbModelBuilder" /> 慣例會使得 DbModelBuilder 在建立模型時包含有關此模型的中繼資料。當 <see cref="T:System.Data.Entity.DbContext" /> 依照慣例建立模型時，它會將此慣例加入至 DbModelBuilder 所使用之慣例的清單。如果使用 DbContext 來建立資料庫，這會使得模型中繼資料寫入資料庫。然後這可用來做為快速檢查的方法，以查看上次針對資料庫使用此模型之後，此模型是否已變更。經由在衍生的 DbContext 類別上覆寫 OnModelCreating 方法，可以從 <see cref="T:System.Data.Entity.DbModelBuilder" /> 慣例移除此慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IncludeMetadataConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IObjectContextAdapter">
      <summary>可以提供 <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> 執行個體之物件所實作的介面。<see cref="T:System.Data.Entity.DbContext" /> 類別會實作此介面，以提供基礎 ObjectContext 的存取。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext">
      <summary>取得物件內容。</summary>
      <returns>物件內容。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IProviderInvariantName">
      <summary>從 <see cref="T:System.Data.Common.DbProviderFactory" /> 解析提供者非變異名稱時，由 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 和 <see cref="T:System.Data.Entity.DbConfiguration" /> 所使用。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IProviderInvariantName.Name">
      <summary>取得提供者的名稱。</summary>
      <returns>提供者的名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.LocalDbConnectionFactory">
      <summary>此類別的執行個體是用來根據給定的資料庫名稱或連接字串，針對 SQL Server LocalDb 建立 DbConnection 物件。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String)">
      <summary>針對給定的 LocalDb 版本建立連接工廠的新執行個體。若為 SQL Server 2012 LocalDb，請使用 "v11.0"。若為 SQL Server 2014 和更新版本 LocalDb，請使用 "mssqllocaldb"。</summary>
      <param name="localDbVersion">要使用的 LocalDb 版本。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String,System.String)">
      <summary>針對給定的 LocalDb 版本建立連接工廠的新執行個體。若為 SQL Server 2012 LocalDb，請使用 "v11.0"。若為 SQL Server 2014 和更新版本 LocalDb，請使用 "mssqllocaldb"。</summary>
      <param name="localDbVersion">要使用的 LocalDb 版本。</param>
      <param name="baseConnectionString">要針對 'Initial Catalog'、'Data Source' 和 'AttachDbFilename' 以外之資料庫選項使用的連接字串。呼叫 CreateConnection 時，系統將會根據資料庫名稱在此字串的前面加上 'Initial Catalog' 和 'AttachDbFilename'。'Data Source' 則是根據 LocalDbVersion 引數所設定。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.BaseConnectionString">
      <summary>要針對 'Initial Catalog'、'Data Source' 和 'AttachDbFilename' 以外之資料庫選項使用的連接字串。呼叫 CreateConnection 時，系統將會根據資料庫名稱在此字串的前面加上 'Initial Catalog' 和 'AttachDbFilename'。'Data Source' 則是根據 LocalDbVersion 引數所設定。預設值為 'Integrated Security=True;'。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.CreateConnection(System.String)">
      <summary>根據給定的資料庫名稱或連接字串建立 SQL Server LocalDb 的連接。如果給定的字串包含 '=' 字元，則會將它視為完整連接字串，否則只會將它視為資料庫名稱。</summary>
      <returns>初始化的 DbConnection。</returns>
      <param name="nameOrConnectionString">資料庫名稱或連接字串。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelContainerConvention">
      <summary>此 <see cref="T:System.Data.Entity.DbModelBuilder" /> 慣例會使用衍生 <see cref="T:System.Data.Entity.DbContext" /> 類別的名稱當做 Code First 所建置之概念模型的容器。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ModelContainerConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將慣例套用至指定模型。</summary>
      <param name="item">要套用慣例的容器。</param>
      <param name="model">模型。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelNamespaceConvention">
      <summary>此 <see cref="T:System.Data.Entity.DbModelBuilder" /> 慣例會使用衍生 <see cref="T:System.Data.Entity.DbContext" /> 類別的命名空間當做 Code First 所建置之概念模型的命名空間。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer">
      <summary>使用參考相等來比較物件。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.Default">
      <summary>取得預設執行個體。</summary>
      <returns>預設執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.System#Collections#Generic#IEqualityComparer{T}#Equals(System.Object,System.Object)">
      <summary>判斷是否要將指定的物件執行個體視為相等。</summary>
      <returns>若物件視為相等，則為 true，否則為 false。</returns>
      <param name="x">要比較的第一個物件。</param>
      <param name="y">要比較的第二個物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.System#Collections#Generic#IEqualityComparer{T}#GetHashCode(System.Object)">
      <summary>取得指定物件的雜湊碼。</summary>
      <returns>指定物件的雜湊碼。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1">
      <summary>此類別的執行個體會在內部使用，以便為 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 建立插入運算式樹狀架構中的常數運算式，來取代 <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> 和 <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> 的參考。</summary>
      <typeparam name="TElement">項目的類型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1.Query">
      <summary>LINQ 運算式樹狀架構中所預期的公用屬性。</summary>
      <returns>查詢。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">
      <summary>當重試動作在超出所設定的次數後再次失敗時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" /> 類別不含錯誤訊息的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" /> 類別含有指定之錯誤訊息的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory">
      <summary>此類別的執行個體是用來根據給定的資料庫名稱或連接字串，針對 SQL Server Compact Edition 建立 DbConnection 物件。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String)">
      <summary>使用空的 (預設) DatabaseDirectory 和 BaseConnectionString 屬性建立新的連接 Factory。</summary>
      <param name="providerInvariantName">提供者非變異名稱，可指定應該使用的 SQL Server Compact Edition 版本。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String,System.String,System.String)">
      <summary>使用給定的 DatabaseDirectory 和 BaseConnectionString 屬性建立新的連接 Factory。</summary>
      <param name="providerInvariantName">提供者非變異名稱，可指定應該使用的 SQL Server Compact Edition 版本。</param>
      <param name="databaseDirectory">當 SQL Server Compact Edition 建立或讀取資料庫檔案時，在資料庫名稱前面加上的路徑 (此名稱將會形成 SQL Server Compact Edition 使用的檔案名稱)。空的字串代表 SQL Server Compact Edition 會針對資料庫檔案位置使用其預設值。</param>
      <param name="baseConnectionString">用於資料庫 (而非「資料來源」) 之選項的連接字串。當呼叫 CreateConnection 時，將會根據資料庫名稱在此字串的前面加上資料來源。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString">
      <summary>用於資料庫 (而非「資料來源」) 之選項的連接字串。當呼叫 CreateConnection 時，將會根據資料庫名稱在此字串的前面加上資料來源。預設值為空字串，這表示不會使用其他選項。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.CreateConnection(System.String)">
      <summary>根據給定的資料庫名稱或連接字串建立 SQL Server Compact Edition 的連接。如果給定的字串包含 '=' 字元，則會將它視為完整連接字串，否則只會將它視為資料庫名稱。</summary>
      <returns>初始化的 DbConnection。</returns>
      <param name="nameOrConnectionString">資料庫名稱或連接字串。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory">
      <summary>當 SQL Server Compact Edition 建立或讀取資料庫檔案時，在資料庫名稱前面加上的路徑 (此名稱將會形成 SQL Server Compact Edition 使用的檔案名稱)。預設值為 "|DataDirectory|"，這表示檔案將會放在指定的資料目錄。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.ProviderInvariantName">
      <summary>提供者非變異名稱，可指定應該使用的 SQL Server Compact Edition 版本。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlConnectionFactory">
      <summary>此類別的執行個體是用來根據給定的資料庫名稱或連接字串，針對 SQL Server 建立 DbConnection 物件。預設會建立與 '.\SQLEXPRESS' 的連接。如果要變更此值，可以在建構 Factory 執行個體時變更基本連接字串。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor">
      <summary>使用預設的 BaseConnectionString 屬性 'Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True;' 建立新的連接 Factory。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor(System.String)">
      <summary>使用給定的 BaseConnectionString 屬性建立新的連接 Factory。</summary>
      <param name="baseConnectionString">用於資料庫 (而非「初始資料庫目錄」) 之選項的連接字串。當呼叫 CreateConnection 時，將會根據資料庫名稱在此字串的前面加上「初始資料庫目錄」。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlConnectionFactory.BaseConnectionString">
      <summary>用於資料庫 (而非「初始資料庫目錄」) 之選項的連接字串。當呼叫 CreateConnection 時，將會根據資料庫名稱在此字串的前面加上「初始資料庫目錄」。預設值為 'Data Source=.\SQLEXPRESS; Integrated Security=True;'。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.CreateConnection(System.String)">
      <summary>根據給定的資料庫名稱或連接字串建立 SQL Server 的連接。如果給定的字串包含 '=' 字元，則會將它視為完整連接字串，否則只會將它視為資料庫名稱。</summary>
      <returns>初始化的 DbConnection。</returns>
      <param name="nameOrConnectionString">資料庫名稱或連接字串。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute">
      <summary>此屬性 (Attribute) 可套用至整個衍生 <see cref="T:System.Data.Entity.DbContext" /> 類別或是該類別上的個別 <see cref="T:System.Data.Entity.DbSet`1" /> 或 <see cref="T:System.Data.Entity.IDbSet`1" /> 屬性 (Property)。當套用時，任何找出的 <see cref="T:System.Data.Entity.DbSet`1" /> 或 <see cref="T:System.Data.Entity.IDbSet`1" /> 屬性仍然會包含在模型中，但是不會自動初始化。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TableExistenceChecker">
      <summary>由 Entity Framework 提供者實作，並會用於檢查資料表是否存在於給定的資料庫中。資料庫初始設定式在決定是否要將現有資料庫視為空的，並進而建立資料表時，會使用此項目。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.AnyModelTableExistsInDatabase(System.Data.Entity.Core.Objects.ObjectContext,System.Data.Common.DbConnection,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntitySet},System.String)">
      <summary>當衍生類別被覆寫時，會檢查指定的資料表是否存在於給定連接的資料庫中。</summary>
      <returns>當模型資料表或 EdmMetadata 資料表存在時為 True。</returns>
      <param name="context">所檢查之資料表的內容，通常會用於取得適當的 <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext" />。</param>
      <param name="connection">資料庫連接。可能為開啟或關閉；若為開啟，應予再次關閉。不處置。</param>
      <param name="modelTables">要檢查是否存在的資料表。</param>
      <param name="edmMetadataContextTableName">要檢查是否存在之 EdmMetadata 資料表的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.GetTableName(System.Data.Entity.Core.Metadata.Edm.EntitySet)">
      <summary>Helper 方法可取得給定 s-space <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 的資料表名稱。</summary>
      <returns>資料表名稱。</returns>
      <param name="modelTable">資料表的 s-space 實體集。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionContext">
      <summary>此類別是供 <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> 用來針對資料庫寫入和讀取交易追蹤資訊。若要自訂交易資料表的定義，您可以衍生自此類別並覆寫 <see cref="M:System.Data.Entity.Infrastructure.TransactionContext.OnModelCreating(System.Data.Entity.DbModelBuilder)" />。衍生類別可以使用 <see cref="T:System.Data.Entity.DbConfiguration" /> 註冊。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionContext.#ctor(System.Data.Common.DbConnection)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.TransactionContext" /> 類別的新執行個體。</summary>
      <param name="existingConnection">交易會記錄其內容所使用的連接。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>初始化衍生內容的模型之後，呼叫此方法。</summary>
      <param name="modelBuilder">針對建立的內容定義模型的產生器。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionContext.Transactions">
      <summary>取得或設定 <see cref="T:System.Data.Entity.DbSet`1" />，其可用來讀寫 <see cref="T:System.Data.Entity.Infrastructure.TransactionRow" /> 執行個體。</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbSet`1" />，可以用來讀取和寫入 <see cref="T:System.Data.Entity.Infrastructure.TransactionRow" /> 執行個體。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionHandler">
      <summary>表示處理交易作業之攔截器的基底類別。衍生類別可以使用 <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})" /> 或 <see cref="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String)" /> 註冊。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">開始交易的連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">開始交易的連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BuildDatabaseInitializationScript">
      <summary>在衍生類別中實作時傳回指令碼，以準備資料庫供此交易處理常式使用。</summary>
      <returns>指令碼，此指令碼可變更此交易處理常式的資料庫結構描述。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">已關閉的連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">要關閉的連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>可以在衍生類別內實作。</summary>
      <param name="transaction">已認可的交易。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>可以在衍生類別內實作。</summary>
      <param name="transaction">要認可的交易。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.Connection">
      <summary>取得連線，供處理處理交易作業之用。</summary>
      <returns>將用來處理交易作業的 <see cref="T:System.Data.Common.DbConnection" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
      <summary>可以在衍生類別內實作。</summary>
      <param name="transaction">交易。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
      <summary>可以在衍生類別內實作。</summary>
      <param name="transaction">交易。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.DbContext">
      <summary>取得將用來處理交易作業的內容。</summary>
      <returns>將用來處理交易作業的 <see cref="P:System.Data.Entity.Infrastructure.TransactionHandler.DbContext" />。可以是 null。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Dispose">
      <summary>釋放此交易處理常式所使用的資源。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Dispose(System.Boolean)">
      <summary>釋放此交易處理常式所使用的資源。</summary>
      <param name="disposing">true 表示同時釋放 Managed 和 Unmanaged 資源，false 表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">已處置的連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>可以在衍生類別內實作。</summary>
      <param name="transaction">已處置的交易。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">要處置的連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>可以在衍生類別內實作。</summary>
      <param name="transaction">要處置的交易。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Initialize(System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>使用指定的內容，初始化此執行個體。</summary>
      <param name="context">將用來處理交易作業的內容。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Initialize(System.Data.Entity.DbContext,System.Data.Common.DbConnection)">
      <summary>使用指定的內容，初始化此執行個體。</summary>
      <param name="context">將用來處理交易作業的內容。</param>
      <param name="connection">要用於初始化的連接。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.IsDisposed">
      <summary>取得或設定值，此值表示是否已處置此交易處理常式。</summary>
      <returns>若已處置此交易處理常式，則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
      <summary>可以在衍生類別內實作。</summary>
      <param name="transaction">交易。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
      <summary>可以在衍生類別內實作。</summary>
      <param name="transaction">交易。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.MatchesParentContext(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
      <summary>檢查指定的攔截內容是否包含目標內容，或是指定的連接是否與目標內容使用的連接相同。</summary>
      <returns>若提供的攔截內容包含目標內容，或提供的攔截內容不含任何內容，但提供的連接與目標內容使用的連接相同，則為 true，否則為 false。</returns>
      <param name="connection">連接。</param>
      <param name="interceptionContext">攔截內容。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext">
      <summary>取得將用來處理交易作業的內容。</summary>
      <returns>將用來處理交易作業的 <see cref="P:System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">已開啟的連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">要開啟的連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>可以在衍生類別內實作。</summary>
      <param name="transaction">已復原的交易。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>可以在衍生類別內實作。</summary>
      <param name="transaction">要復原的交易。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
      <summary>可以在衍生類別內實作。</summary>
      <param name="connection">連接。</param>
      <param name="interceptionContext">與此呼叫相關聯的內容資訊。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionRow">
      <summary>表示交易。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.TransactionRow" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionRow.CreationTime">
      <summary>取得或設定開始交易時的本地時間。</summary>
      <returns>開始交易時的本地時間。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.Equals(System.Object)">
      <summary>指出指定物件是否等於目前物件的值。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>此執行個體的雜湊碼。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionRow.Id">
      <summary>取得或設定指派給交易物件的唯一識別碼。</summary>
      <returns>指派給交易物件的唯一識別碼。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException">
      <summary>當從 Database First 或 Model First 模式的 <see cref="T:System.Data.Entity.DbContext" /> 範本產生內容然後將此內容用於 Code First 模式時，就會擲回。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> 類別的新執行個體。</summary>
      <param name="info">保存序列化物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> 類別的新執行個體。</summary>
      <param name="message">訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> 類別的新執行個體。</summary>
      <param name="message">訊息。</param>
      <param name="innerException">內部例外狀況。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator">
      <summary>表示建立服務，讓自訂註釋的程式碼產生功能成為為移轉建立結構的一部分。您必須針對 <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" /> 設定衍生類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.Generate(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>為指定的註釋值產生程式碼。</summary>
      <param name="annotationName">要為其產生值的註釋名稱。</param>
      <param name="annotation">註釋值。</param>
      <param name="writer">所產生程式碼要寫入的目標寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.GetExtraNamespaces(System.Collections.Generic.IEnumerable{System.String})">
      <summary>傳回要包含在針對移轉建立結構而產生之程式碼中的其他命名空間。預設實作會傳回空白列舉。</summary>
      <returns>要包含的其他命名空間清單。</returns>
      <param name="annotationNames">包含在產生的程式碼中的註釋名稱。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.AnnotationValues">
      <summary>表示已建立結構或自行撰寫之 <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 中的一組註釋值。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.#ctor(System.Object,System.Object)">
      <summary>建立一組新註釋值。</summary>
      <param name="oldValue">註釋的舊值，如果是剛建立此註釋則可能是空白值。</param>
      <param name="newValue">註釋的新值，如果是剛刪除此註釋則可能是空白值。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.Equals(System.Object)">
      <summary>判斷指定物件是否等於此執行個體物件。</summary>
      <returns>若指定的物件等於此執行個體物件，則為 true，否則為 false。</returns>
      <param name="obj">要相比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.GetHashCode">
      <summary>擷取雜湊碼。</summary>
      <returns>雜湊碼。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.NewValue">
      <summary>取得註釋的新值，如果是剛刪除此註釋則可能是空白值。</summary>
      <returns>註釋的新值，如果是剛刪除此註釋則可能是空白值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.OldValue">
      <summary>取得註釋的舊值，如果是剛建立此註釋則可能是空白值。</summary>
      <returns>註釋的舊值，如果是剛建立此註釋則可能是空白值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.op_Equality(System.Data.Entity.Infrastructure.Annotations.AnnotationValues,System.Data.Entity.Infrastructure.Annotations.AnnotationValues)">
      <summary>如果兩組註釋都包含相同的值則傳回 true，否則傳回 false。</summary>
      <returns>若兩組註釋都包含相同的值，則為 true。</returns>
      <param name="left">一組註釋值。</param>
      <param name="right">一組註釋值。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.op_Inequality(System.Data.Entity.Infrastructure.Annotations.AnnotationValues,System.Data.Entity.Infrastructure.Annotations.AnnotationValues)">
      <summary>如果兩組註釋包含不同的值則傳回 true，否則傳回 false。</summary>
      <returns>若兩組註釋包含不同的值，則為 true。</returns>
      <param name="left">一組註釋值。</param>
      <param name="right">一組註釋值。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult">
      <summary>由 <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)" /> 和相關方法傳回，表示某個物件是否不會與其他物件發生衝突，以便將兩者合併為一個物件。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.#ctor(System.Boolean,System.String)">
      <summary>建立新的 <see cref="T:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult" /> 執行個體。</summary>
      <param name="isCompatible">表示兩個測試物件是否相容。</param>
      <param name="errorMessage">錯誤訊息，指出物件不相容的原因。如果 isCompatible 為 true，則會是空白值。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.ErrorMessage">
      <summary>如果 <see cref="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.IsCompatible" /> 為 true，則會傳回錯誤訊息，指出兩個測試物件不相容的原因。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.IsCompatible">
      <summary>如果兩個測試物件不相容則為 true，否則為 false。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.op_Implicit(System.Data.Entity.Infrastructure.Annotations.CompatibilityResult)~System.Boolean">
      <summary>隱含轉換為 bool，方便可以直接在檢查中使用結果物件。</summary>
      <returns>如果結果為相容則為 true，否則為 false。</returns>
      <param name="result">要進行轉換的物件。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation">
      <summary>做為自訂註釋的類型可以實作此介面，表示如果將多個名稱相同的註釋合而為一，就可以在指定的資料表或資料行中嘗試使用這些註釋。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)">
      <summary>如果此註釋不會與指定的註釋產生衝突則傳回 true，如此即可使用 <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)" /> 方法將兩者合而為一。</summary>
      <returns>示此註釋是否與其他註釋相容的 CompatibilityResult。</returns>
      <param name="other">要比較的註釋。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)">
      <summary>將此註釋與指定的註釋合併，並傳回合併後的新註釋。此方法只有在 <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)" /> 傳回 true 的情況下才會成功。</summary>
      <returns>合併後的新註釋。</returns>
      <param name="other">要與此註釋合併的註釋。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation">
      <summary>表示用以表示 Entity Framework 模型中之資料庫索引的自訂註釋。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.Schema.IndexAttribute})">
      <summary>使用指定的索引集合，初始化 <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> 類別的新執行個體。</summary>
      <param name="indexAttributes">表示一個或多個索引的索引屬性。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.#ctor(System.ComponentModel.DataAnnotations.Schema.IndexAttribute)">
      <summary>使用指定的索引集合，初始化 <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> 類別的新執行個體。</summary>
      <param name="indexAttribute">表示索引的索引屬性。</param>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.AnnotationName">
      <summary>此註釋儲存在 Entity Framework 中繼資料內或序列化為 SSDL/EDMX 檔案時使用的名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.Indexes">
      <summary>取得此註釋所代表的索引。</summary>
      <returns>此註釋代表的索引。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.IsCompatibleWith(System.Object)">
      <summary>如果此註釋不會與指定的註釋產生衝突則傳回 true，如此即可使用 <see cref="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.MergeWith(System.Object)" /> 方法將兩者合而為一。</summary>
      <returns>示此註釋是否與其他註釋相容的 CompatibilityResult。</returns>
      <param name="other">要比較的註釋。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.MergeWith(System.Object)">
      <summary>將此註釋與指定的註釋合併，並傳回包含已合併之索引的新註釋。</summary>
      <returns>新註釋，其中包含已合併之註釋的索引。</returns>
      <param name="other">要與此註釋合併的註釋。</param>
      <exception cref="T:System.InvalidOperationException">另一個註釋包含與此註釋之索引不相容的索引。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.ToString">
      <summary>傳回 <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> 物件的字串表示。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer">
      <summary>此類別是用來序列化和還原序列化 <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> 物件，因此您可以利用 Entity Framework 模型的 EDMX 形式來儲存這些物件。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.Deserialize(System.String,System.String)">
      <summary>將指定的字串還原序列化為 <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> 物件。</summary>
      <returns>已還原序列化的註釋值。</returns>
      <param name="name">要還原序列化的註釋名稱。</param>
      <param name="value">要還原序列化的字串。</param>
      <exception cref="T:System.FormatException">如果在讀取已序列化的值時發生錯誤。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.Serialize(System.String,System.Object)">
      <summary>將指定的 <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> 序列化為字串，方便以 EDMX XML 格式存放。</summary>
      <returns>已序列化的值。</returns>
      <param name="name">要序列化的註釋名稱。</param>
      <param name="value">要序列化的值 (必須是 IndexAnnotation 物件)。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs">
      <summary>表示傳遞給 <see cref="E:System.Data.Entity.DbConfiguration.Loaded" /> 事件處理常式的事件引數。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.AddDefaultResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>將 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 執行個體加入至解析程式的責任鏈結，以解析 Entity Framework 所需的相依性。與 AddDependencyResolver 方法不同的是，此方法會將解析程式置於責任鏈結底部，以致該解析程式將僅供用於解析任何其他解析程式都無法解析的相依性。</summary>
      <param name="resolver">要加入的解析程式。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Boolean)">
      <summary>將 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 執行個體加入至解析程式的責任鏈結，以解析 Entity Framework 所需的相依性。</summary>
      <param name="resolver">要加入的解析程式。</param>
      <param name="overrideConfigFile">若為 true，加入的解析程式會優先於組態檔中的設定。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.DependencyResolver">
      <summary>取得將被鎖定之 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 的快照。使用此物件的 GetService 方法可取得已登錄的服務。</summary>
      <returns>將被鎖定之 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 的快照。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.Equals(System.Object)">
      <summary>指定此執行個體是否等於特定物件。</summary>
      <returns>若此執行個體等於特定物件，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.GetHashCode">
      <summary>取得與此執行個體相關聯的雜湊碼。</summary>
      <returns>與此執行個體相關聯的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.GetType">
      <summary>取得此執行個體的類型。</summary>
      <returns>此執行個體的類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.ReplaceService``1(System.Func{``0,System.Object,``0})">
      <summary>加入包裝解析程式至將要鎖定的組態。包裝解析程式會汲取已由解析程式鏈結傳回的服務，再將其包裝或取代成相同類型的另一項服務。</summary>
      <param name="serviceInterceptor">接受未包裝的服務和索引鍵並且傳回已包裝或取代之服務的委派。</param>
      <typeparam name="TService">要包裝或取代的服務類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.ToString">
      <summary>傳回 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs" /> 的字串表示法。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions">
      <summary>使用泛型類型參數及/或不具名方式呼叫 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> 方法的擴充方法。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>呼叫 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" />，傳遞方法的泛型類型當做類型引數及空白值當做名稱引數。</summary>
      <returns>解析的相依性，或為 null 表示解析程式無法解析該相依性。</returns>
      <param name="resolver">要使用的解析程式。</param>
      <typeparam name="T">要解析的合約類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)">
      <summary>呼叫 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" />，傳遞方法的泛型類型及給定的名稱當做引數。</summary>
      <returns>解析的相依性，或為 null 表示解析程式無法解析該相依性。</returns>
      <param name="resolver">要使用的解析程式。</param>
      <param name="key">要解析之相依性的索引鍵。</param>
      <typeparam name="T">要解析的合約類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)">
      <summary>呼叫 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" />，傳遞指定的類型引數並使用空白值當做名稱引數。</summary>
      <returns>解析的相依性，或為 null 表示解析程式無法解析該相依性。</returns>
      <param name="resolver">要使用的解析程式。</param>
      <param name="type">要解析的合約類型。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>呼叫 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" />，傳遞方法的泛型類型當做類型引數及空白值當做名稱引數。</summary>
      <returns>所有已解析的相依性，如果已解析服務則為 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="resolver">要使用的解析程式。</param>
      <typeparam name="T">要解析的合約類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)">
      <summary>呼叫 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" />，傳遞方法的泛型類型及給定的名稱當做引數。</summary>
      <returns>所有已解析的相依性，如果已解析服務則為 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="resolver">要使用的解析程式。</param>
      <param name="key">要解析之相依性的索引鍵。</param>
      <typeparam name="T">要解析的合約類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)">
      <summary>呼叫 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" />，傳遞指定的類型引數並使用空白值當做名稱引數。</summary>
      <returns>所有已解析的相依性，如果已解析服務則為 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="resolver">要使用的解析程式。</param>
      <param name="type">要解析的合約類型。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1">
      <summary>用於解析 <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> 處理站的 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 實作。</summary>
      <typeparam name="T">所解析之執行策略的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.#ctor(System.String,System.String,System.Func{`0})">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1" /> 的新執行個體。</summary>
      <param name="providerInvariantName">ADO.NET 提供者非變異名稱，表示使用此執行策略時所經 ADO.NET 連接的類型。</param>
      <param name="serverName">要與連接字串中的伺服器名稱進行比對的字串。null 表示會比對所有項目。</param>
      <param name="getExecutionStrategy">會傳回執行策略新執行個體的函式。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetService(System.Type,System.Object)">
      <summary>如果指定的類型是 <see cref="T:System.Func`1" />，此解析程式將嘗試傳回要使用的服務，否則傳回空白值。如果指定的類型是 Func{IExecutionStrategy}，索引鍵就會是 <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />。</summary>
      <returns>
        <see cref="T:System.Func`1" /> 或 null。</returns>
      <param name="type">要解析的服務類型。</param>
      <param name="key">用於決定所要傳回之服務的索引鍵。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetServices(System.Type,System.Object)">
      <summary>如果指定的類型是 <see cref="T:System.Func`1" />，此解析程式將嘗試傳回要使用的服務，否則傳回空白列舉。如果指定的類型是 Func{IExecutionStrategy}，索引鍵就會是 <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />。</summary>
      <returns>
        <see cref="T:System.Func`1" /> 的列舉或空白列舉。</returns>
      <param name="type">要解析的服務類型。</param>
      <param name="key">用於決定所要傳回之服務的索引鍵。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver">
      <summary>此介面是由任何可直接解析或透過使用外部容器解析相依性的物件所實作。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)">
      <summary>嘗試依據給定的合約類型和選擇性指定的索引鍵來解析相依性。如果解析程式無法解析相依性，則必須傳回 null 而非擲回。如此即可運用責任鏈結模式要求多個解析程式解析相依性，直到其中一個解析程式終於成功為止。</summary>
      <returns>解析的相依性，其必須是給定合約類型的執行個體，或為 null 表示無法解析相依性。</returns>
      <param name="type">定義所要解析之相依性的介面或抽象基底類別。傳回的物件預期應為此類型的執行個體。</param>
      <param name="key">所要解析之相依性的索引鍵 (選擇性)。若相依性不是由索引鍵區別，則其值可能是 null。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)">
      <summary>嘗試依據給定的合約類型和選擇性指定的索引鍵來解析相依性。如果解析程式無法解析相依性，則必須傳回空白列舉而非擲回。此方法與 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> 不同之處在於，前者會針對指定的類型和索引鍵組合傳回已註冊的所有服務。</summary>
      <returns>所有可解析相依性的服務 (必須是指定之合約類型的執行個體)，如果無法解析相依性則為空白列舉。</returns>
      <param name="type">定義所要解析之相依性的介面或抽象基底類別。每個傳回的物件預期應為此類型的執行個體。</param>
      <param name="key">所要解析之相依性的索引鍵 (選擇性)。若相依性不是由索引鍵區別，則其值可能是 null。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1">
      <summary>實作 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 解析相依性以期一律傳回相同的執行個體。</summary>
      <typeparam name="T">定義解析相依性所用之合約的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0)">
      <summary>建構新的解析程式，傳回合約類型的給定執行個體而忽略傳遞給 Get 方法的索引鍵。</summary>
      <param name="singletonInstance">要傳回的執行個體。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Func{System.Object,System.Boolean})">
      <summary>建構新的解析程式，於指定的索引鍵符合傳遞給 Get 方法的索引鍵時 (依指定的述詞而定)，傳回合約類型的指定執行個體。</summary>
      <param name="singletonInstance">要傳回的執行個體。</param>
      <param name="keyPredicate">採用索引鍵物件的述詞，此述詞只有在索引鍵符合時才會傳回 true。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Object)">
      <summary>建構新的解析程式，於指定的索引鍵與傳遞給 Get 方法的索引鍵完全相符時，傳回合約類型的給定執行個體。</summary>
      <param name="singletonInstance">要傳回的執行個體。</param>
      <param name="key">所要解析之相依性的索引鍵 (選擇性)。若相依性不是由索引鍵區別，則其值可能是 null。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetService(System.Type,System.Object)">
      <summary>嘗試依據給定的合約類型和選擇性指定的索引鍵來解析相依性。如果解析程式無法解析相依性，則必須傳回 null 而非擲回。如此即可運用責任鏈結模式要求多個解析程式解析相依性，直到其中一個解析程式終於成功為止。</summary>
      <returns>解析的相依性，其必須是給定合約類型的執行個體，或為 null 表示無法解析相依性。</returns>
      <param name="type">定義所要解析之相依性的介面或抽象基底類別。傳回的物件預期應為此類型的執行個體。</param>
      <param name="key">所要解析之相依性的索引鍵 (選擇性)。若相依性不是由索引鍵區別，則其值可能是 null。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetServices(System.Type,System.Object)">
      <summary>嘗試依據給定的合約類型和選擇性指定的索引鍵來解析相依性。如果解析程式無法解析相依性，則必須傳回空白列舉而非擲回。</summary>
      <returns>所有可解析相依性的服務 (必須是指定之合約類型的執行個體)，如果無法解析相依性則為空白列舉。</returns>
      <param name="type">定義所要解析之相依性的介面或抽象基底類別。每個傳回的物件預期應為此類型的執行個體。</param>
      <param name="key">所要解析之相依性的索引鍵 (選擇性)。若相依性不是由索引鍵區別，則其值可能是 null。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver">
      <summary>表示用於解析 <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" /> 處理站的 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 實作。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.#ctor(System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String,System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver" /> 類別的新執行個體</summary>
      <param name="transactionHandlerFactory">會傳回交易處理常式之新執行個體的函式。</param>
      <param name="providerInvariantName">ADO.NET 提供者非變異名稱，表示使用此交易處理常式時所經 ADO.NET 連接的類型。null 表示會比對所有項目。</param>
      <param name="serverName">要與連接字串中的伺服器名稱進行比對的字串。null 表示會比對所有項目。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要相比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetHashCode">
      <summary>擷取物件執行個體的雜湊碼。</summary>
      <returns>物件執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetService(System.Type,System.Object)">
      <summary>如果指定的類型是 <see cref="T:System.Func`1" />，此方法將嘗試傳回要使用的服務，否則傳回 null。如果指定的類型是 <see cref="T:System.Func`1" />，索引鍵就會是 <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />。</summary>
      <returns>
        <see cref="T:System.Func`1" /> 或 null。</returns>
      <param name="type">要解析的服務類型。</param>
      <param name="key">用於決定所要傳回之服務的索引鍵。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetServices(System.Type,System.Object)">
      <summary>如果指定的類型是 <see cref="T:System.Func`1" />，此解析程式將嘗試傳回要使用的服務，否則傳回空白列舉。如果指定的類型是 <see cref="T:System.Func`1" />，索引鍵就會是 <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />。</summary>
      <returns>
        <see cref="T:System.Func`1" /> 的列舉或空白列舉。</returns>
      <param name="type">要解析的服務類型。</param>
      <param name="key">用於決定所要傳回之服務的索引鍵。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Design.AppConfigReader">
      <summary>提供公用程式方法，供讀取 App.config 或 Web.config 檔案之用。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Design.AppConfigReader.#ctor(System.Configuration.Configuration)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.Design.AppConfigReader" /> 的新執行個體。</summary>
      <param name="configuration">要讀取的組態。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Design.AppConfigReader.GetProviderServices(System.String)">
      <summary>從組態取得指定的提供者服務。</summary>
      <returns>提供者服務的類型名稱；若找不到，則為 Null。</returns>
      <param name="invariantName">提供者服務的非變異名稱。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView">
      <summary>表示對應檢視。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingView.#ctor(System.String)">
      <summary>建立包含指定之實體 SQL 的 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />執行個體。</summary>
      <param name="entitySql">指定實體 SQL 的字串。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.MappingViews.DbMappingView.EntitySql">
      <summary>取得實體 SQL。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache">
      <summary>表示用於對應檢視快取實作的基底抽象類別。如果是搭配 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" /> 使用，衍生類別就必須包含無參數建構函式。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.GetView(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>取得對應至指定範圍的檢視。</summary>
      <returns>可指定範圍的 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />，如果該範圍與對應檢視沒有關聯則為空白值。</returns>
      <param name="extent">可指定範圍的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.MappingHashValue">
      <summary>取得針對對應結尾計算後得到的雜湊值。</summary>
      <returns>計算對應結尾所得的雜湊值。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory">
      <summary>指定建立具象 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> 執行個體的方法。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory.Create(System.String,System.String)">
      <summary>為對應容器的名稱所指定之容器對應建立產生的檢視快取執行個體。</summary>
      <returns>可指定產生之檢視快取的 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />。</returns>
      <param name="conceptualModelContainerName">概念模型中的容器名稱。</param>
      <param name="storeModelContainerName">存放區模型中的容器名稱。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute">
      <summary>定義可指定與內容類型 (<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 或 <see cref="T:System.Data.Entity.DbContext" /> 的子類別) 相關聯之對應檢視快取類型 (<see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> 的子類別) 的自訂屬性。快取類型會在執行階段具現化，並且用來在對應的內容中擷取預先產生的檢視。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.#ctor(System.Type,System.String)">
      <summary>建立讓內容類型與對應檢視快取類型產生關聯的 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" /> 執行個體。</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 或 <see cref="T:System.Data.Entity.DbContext" /> 的子類別。</param>
      <param name="cacheTypeName">快取類型的組件完整名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.#ctor(System.Type,System.Type)">
      <summary>建立讓內容類型與對應檢視快取類型產生關聯的 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" /> 執行個體。</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 或 <see cref="T:System.Data.Entity.DbContext" /> 的子類別。</param>
      <param name="cacheType">
        <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> 的子類別。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry">
      <summary>表示 <see cref="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService" /> 所要使用的自訂複數表示字詞</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.#ctor(System.String,System.String)">
      <summary>建立新的執行個體</summary>
      <param name="singular">表示單數的非 null 或空字串。</param>
      <param name="plural">表示複數的非 null 或空字串。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.Plural">
      <summary>取得複數。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.Singular">
      <summary>取得單數。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService">
      <summary>Entity Framework 預設會使用的複數表示服務實作。此複數表示服務是以英文地區設定為基礎。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.#ctor">
      <summary>建構預設用於 Entity Framework 的複數表示服務的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry})">
      <summary>建構預設用於 Entity Framework 的複數表示服務的新執行個體。</summary>
      <param name="userDictionaryEntries">此服務所使用的使用者字典項目集合。這些輸入可以根據使用者的需求來自訂服務。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.Pluralize(System.String)">
      <summary>傳回指定之單字的複數形式。</summary>
      <returns>輸入參數的複數形式。</returns>
      <param name="word">要設定成複數的單字。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.Singularize(System.String)">
      <summary>傳回指定之單字的單數形式。</summary>
      <returns>輸入參數的單數形式。</returns>
      <param name="word">要設定成單數的單字。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService">
      <summary>EF 執行階段所要使用的複數表示服務會實作此介面。依預設，會使用 <see cref="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService" />，但是要使用的複數表示服務可以在衍生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 的類別中設定。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService.Pluralize(System.String)">
      <summary>使用此服務複數化一個單字。</summary>
      <returns>已複數化的單字</returns>
      <param name="word">要複數化的單字。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService.Singularize(System.String)">
      <summary>使用此服務單數化一個單字。</summary>
      <returns>已單數化的單字。</returns>
      <param name="word">要單數化的單字。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigration">
      <summary>表示以程式碼為基礎之移轉的基底類別。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>加入作業以將資料行加入至現有的資料表。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">要加入資料行之資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="name">要加入之資料行的名稱。</param>
      <param name="columnAction">用於指定要加入之資料行的動作。也就是c =&gt; c.Int(nullable:false, defaultValue:3)</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>加入作業以建立新的外部索引鍵限制式。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="dependentTable">包含外部索引鍵資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="dependentColumn">外部索引鍵資料行。</param>
      <param name="principalTable">包含此外部索引鍵所參考之資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="principalColumn">此外部索引鍵所參考的資料行。如果沒有提供值，則會參考主要資料表的主索引鍵。</param>
      <param name="cascadeDelete">值，指出是否應該針對外部索引鍵關聯性設定串聯刪除。如果沒有提供值，則會關閉串聯刪除。</param>
      <param name="name">資料庫中之外部索引鍵限制式的名稱。如果沒有提供值，則會產生唯一名稱。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String[],System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>加入作業以建立新的外部索引鍵限制式。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="dependentTable">包含外部索引鍵資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="dependentColumns">外部索引鍵資料行。</param>
      <param name="principalTable">包含此外部索引鍵所參考之資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="principalColumns">此外部索引鍵所參考的資料行。如果沒有提供值，則會參考主要資料表的主索引鍵。</param>
      <param name="cascadeDelete">值，指出是否應該針對外部索引鍵關聯性設定串聯刪除。如果沒有提供值，則會關閉串聯刪除。</param>
      <param name="name">資料庫中之外部索引鍵限制式的名稱。如果沒有提供值，則會產生唯一名稱。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String,System.String,System.Boolean,System.Object)">
      <summary>加入作業以建立新的主索引鍵。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">包含主索引鍵資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="column">主索引鍵資料行。</param>
      <param name="name">資料庫中之主索引鍵的名稱。如果沒有提供值，則會產生唯一名稱。</param>
      <param name="clustered">值，指出這是否為叢集主索引鍵。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String[],System.String,System.Boolean,System.Object)">
      <summary>加入作業以根據多個資料行建立新的主索引鍵。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">包含主索引鍵資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="columns">主索引鍵資料行。</param>
      <param name="name">資料庫中之主索引鍵的名稱。如果沒有提供值，則會產生唯一名稱。</param>
      <param name="clustered">值，指出這是否為叢集主索引鍵。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>加入作業以更改現有資料行的定義。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">資料行所在之資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="name">要變更之資料行的名稱。</param>
      <param name="columnAction">用於指定資料行新定義的動作。也就是c =&gt; c.String(nullable:false, defaultValue:"none")</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterStoredProcedure``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ParameterBuilder,``0},System.String,System.Object)">
      <summary>加入作業以更改預存程序。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">預存程序 (Stored Procedure) 的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="parametersAction">用於指定預存程序參數的動作。</param>
      <param name="body">預存程序的主體。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
      <typeparam name="TParameters">此更改預存程序作業中的參數。您不需要指定此類型。系統會根據您所提供的 <paramref name="parametersAction" /> 參數推斷此類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterStoredProcedure(System.String,System.String,System.Object)">
      <summary>加入作業以更改預存程序。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">預存程序 (Stored Procedure) 的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="body">預存程序的主體。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterTableAnnotations``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Object)">
      <summary>加入作業以處理針對資料表定義之註釋中的變更。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="columnsAction">用於指定要在資料表中包含之資料行的動作。也就是t =&gt; new { Id = t.Int(identity:true), Name = t.String() }</param>
      <param name="annotations">資料表中已變更的自訂註釋。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
      <typeparam name="TColumns">此作業中的資料行。您不需要指定此類型。系統會根據您所提供的 columnsAction 參數推斷此類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String,System.Boolean,System.String,System.Boolean,System.Object)">
      <summary>加入作業以建立單一資料行的索引。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">要建立索引之資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="column">要建立索引之資料行的名稱。</param>
      <param name="unique">值，指出這是否為唯一索引。如果沒有提供值，則會建立非唯一索引。</param>
      <param name="name">要用於資料庫中之索引的名稱。如果沒有提供值，則會產生唯一名稱。</param>
      <param name="clustered">值，指出這是否為叢集索引。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String[],System.Boolean,System.String,System.Boolean,System.Object)">
      <summary>加入作業以建立多個資料行的索引。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">要建立索引之資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="columns">要建立索引之資料行的名稱。</param>
      <param name="unique">值，指出這是否為唯一索引。如果沒有提供值，則會建立非唯一索引。</param>
      <param name="name">要用於資料庫中之索引的名稱。如果沒有提供值，則會產生唯一名稱。</param>
      <param name="clustered">值，指出這是否為叢集索引。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateStoredProcedure``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ParameterBuilder,``0},System.String,System.Object)">
      <summary>加入作業以建立新的預存程序。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">預存程序 (Stored Procedure) 的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="parametersAction">用於指定預存程序參數的動作。</param>
      <param name="body">預存程序的主體。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
      <typeparam name="TParameters">此建立預存程序作業中的參數。您不需要指定此類型。系統會根據您所提供的 <paramref name="parametersAction" /> 參數推斷此類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateStoredProcedure(System.String,System.String,System.Object)">
      <summary>加入作業以建立新的預存程序。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">預存程序 (Stored Procedure) 的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="body">預存程序的主體。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>加入作業以建立新的資料表。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>允許進一步設定資料表建立作業的物件。</returns>
      <param name="name">資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="columnsAction">用於指定要在資料表中包含之資料行的動作。也就是t =&gt; new { Id = t.Int(identity:true), Name = t.String() }</param>
      <param name="annotations">存在於要建立之資料表中的自訂註釋。可以是空白值或空白。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
      <typeparam name="TColumns">此建立資料表作業中的資料行。您不需要指定此類型。系統會根據您所提供的 columnsAction 參數推斷此類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Object)">
      <summary>加入作業以建立新的資料表。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>允許進一步設定資料表建立作業的物件。</returns>
      <param name="name">資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="columnsAction">用於指定要在資料表中包含之資料行的動作。也就是t =&gt; new { Id = t.Int(identity:true), Name = t.String() }</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
      <typeparam name="TColumns">此建立資料表作業中的資料行。您不需要指定此類型。系統會根據您所提供的 columnsAction 參數推斷此類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Down">
      <summary>要在降級處理序期間執行的作業。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>加入作業以卸除現有的資料行。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">要卸除資料行之資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="name">要卸除的資料行名稱。</param>
      <param name="removedAnnotations">存在於要卸除之資料行中的自訂註釋。可以是空白值或空白。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Object)">
      <summary>加入作業以卸除現有的資料行。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">要卸除資料行之資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="name">要卸除的資料行名稱。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.Object)">
      <summary>加入作業以根據名稱卸除外部索引鍵限制式。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="dependentTable">包含外部索引鍵資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="name">資料庫中之外部索引鍵限制式的名稱。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.Object)">
      <summary>加入作業以根據設為目標的資料行卸除外部索引鍵限制式。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="dependentTable">包含外部索引鍵資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="dependentColumn">外部索引鍵資料行。</param>
      <param name="principalTable">包含此外部索引鍵所參考之資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.String,System.Object)">
      <summary>加入作業以根據設為目標的資料行卸除外部索引鍵限制式。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="dependentTable">包含外部索引鍵資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="dependentColumn">外部索引鍵資料行。</param>
      <param name="principalTable">包含此外部索引鍵所參考之資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="principalColumn">此外部索引鍵所參考的資料行。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String[],System.String,System.Object)">
      <summary>加入作業以根據設為目標的資料行卸除外部索引鍵限制式。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="dependentTable">包含外部索引鍵資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="dependentColumns">外部索引鍵資料行。</param>
      <param name="principalTable">包含此外部索引鍵所參考之資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String,System.Object)">
      <summary>加入作業以根據名稱卸除索引。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">要卸除索引之資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="name">要卸除的索引名稱。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String[],System.Object)">
      <summary>加入作業以根據設為目標的資料行卸除索引。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">要卸除索引之資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="columns">索引設為目標之資料行的名稱。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.Object)">
      <summary>加入作業以卸除使用預設名稱建立的現有主索引鍵。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">包含主索引鍵資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.String,System.Object)">
      <summary>加入作業以卸除沒有預設名稱的現有主索引鍵。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">包含主索引鍵資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="name">要卸除的主索引鍵名稱。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropStoredProcedure(System.String,System.Object)">
      <summary>加入作業以卸除具有指定名稱的現有預存程序。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">要卸除的程序名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>加入作業以卸除資料表。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">要卸除的資料表名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="removedColumnAnnotations">存在於要卸除的資料表之資料行中的自訂註釋。可以是空白值或空白。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>加入作業以卸除資料表。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">要卸除的資料表名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="removedAnnotations">存在於要卸除之資料表中的自訂註釋。可以是空白值或空白。</param>
      <param name="removedColumnAnnotations">存在於要卸除的資料表之資料行中的自訂註釋。可以是空白值或空白。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>加入作業以卸除資料表。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">要卸除的資料表名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="removedAnnotations">存在於要卸除之資料表中的自訂註釋。可以是空白值或空白。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Object)">
      <summary>加入作業以卸除資料表。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">要卸除的資料表名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)">
      <summary>判斷此執行個體是否等於指定的物件。</summary>
      <returns>當指定的物件等於目前的物件時為 true，否則即為 false。</returns>
      <param name="obj">要與目前執行個體比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetHashCode">
      <summary>傳回目前物件的雜湊函數。</summary>
      <returns>目前物件的雜湊函數。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetType">
      <summary>傳回目前執行個體的執行階段類型。</summary>
      <returns>目前執行個體的執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MemberwiseClone">
      <summary>建立目前物件的淺層複本。</summary>
      <returns>目前物件的淺層複本。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveStoredProcedure(System.String,System.String,System.Object)">
      <summary>加入作業以將預存程序移至新的結構描述。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">要移動之預存程序的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="newSchema">預存程序要移往的結構描述。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveTable(System.String,System.String,System.Object)">
      <summary>加入作業以將資料表移至新的結構描述。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">要移動之資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="newSchema">資料表要移往的結構描述。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameColumn(System.String,System.String,System.String,System.Object)">
      <summary>加入作業以重新命名資料行。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">包含要重新命名之資料行的資料表名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="name">要重新命名之資料行的名稱。</param>
      <param name="newName">資料行的新名稱。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameIndex(System.String,System.String,System.String,System.Object)">
      <summary>加入作業以重新命名索引。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">包含要重新命名之索引的資料表名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="name">要重新命名的索引名稱。</param>
      <param name="newName">索引的新名稱。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameStoredProcedure(System.String,System.String,System.Object)">
      <summary>加入作業以重新命名預存程序。若要變更預存程序的結構描述，請使用 MoveStoredProcedure。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">要重新命名之預存程序的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="newName">預存程序的新名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameTable(System.String,System.String,System.Object)">
      <summary>加入作業以重新命名資料表。若要變更資料表的結構描述，請使用 MoveTable。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">要重新命名之資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="newName">資料表的新名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Sql(System.String,System.Boolean,System.Object)">
      <summary>加入作業以執行 SQL 命令。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="sql">要執行的 SQL。</param>
      <param name="suppressTransaction">值，指出是否應該在用於移轉處理序的交易外部執行 SQL。如果沒有提供值，則會在交易內部執行 SQL。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.SqlFile(System.String,System.Boolean,System.Object)">
      <summary>加入作業以執行 SQL 檔案。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="sqlFile">要執行的 SQL 檔案。此處會假設成目前 AppDomain 之 BaseDirectory 的相對路徑。</param>
      <param name="suppressTransaction">值，指出是否應該在用於移轉處理序的交易外部執行 SQL。如果沒有提供值，則會在交易內部執行 SQL。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.SqlResource(System.String,System.Reflection.Assembly,System.Boolean,System.Object)">
      <summary>加入作業以執行 SQL 資源檔案。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="sqlResource">要執行之 SQL 資源檔案的資訊清單資源名稱。</param>
      <param name="resourceAssembly">內含資源檔案的組件。若未提供，會假設成呼叫的組件。</param>
      <param name="suppressTransaction">值，指出是否應該在用於移轉處理序的交易外部執行 SQL。如果沒有提供值，則會在交易內部執行 SQL。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.System#Data#Entity#Migrations#Infrastructure#IDbMigration#AddOperation(System.Data.Entity.Migrations.Model.MigrationOperation)">
      <summary>加入移轉作業。</summary>
      <param name="migrationOperation">要加入的移轉作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Up">
      <summary>要在升級處理序期間執行的作業。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration">
      <summary>與給定模型之移轉用法有關的組態。您通常會建立衍生自 <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" /> 的組態類別，而非使用此類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.#ctor">
      <summary>初始化 DbMigrationsConfiguration 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationDataLossAllowed">
      <summary>取得或設定值，指出自動移轉期間是否可接受資料遺失。如果設定為 false，而且自動移轉期間可能會發生資料遺失，就會擲回例外狀況。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationsEnabled">
      <summary>取得或設定值，指出是否可在移轉資料庫時使用自動移轉。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CodeGenerator">
      <summary>取得或設定要對移轉進行 Scaffold 時使用的程式碼產生器。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CommandTimeout">
      <summary>取得或設定用於移轉內之個別命令的逾時值。null 值表示將會使用基礎提供者的預設值。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextKey">
      <summary>取得或設定字串，此字串可用以區別屬於此組態的移轉與屬於使用相同資料庫之其他組態的移轉。此屬性使得來自多個不同模型的移轉可套用至單一資料庫。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextType">
      <summary>取得或設定表示要移轉之模型的衍生 DbContext。</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrationsConfiguration.DefaultMigrationsDirectory">
      <summary>儲存移轉的預設目錄。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetHistoryContextFactory(System.String)">
      <summary>取得設定為要與給定的資料庫提供者搭配使用的記錄內容 Factory。</summary>
      <returns>針對資料庫提供者所設定的記錄內容 Factory。</returns>
      <param name="providerInvariantName">要取得 Factory 之資料庫提供者的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetSqlGenerator(System.String)">
      <summary>取得設定為要搭配給定之資料庫提供者使用的 SQL 產生器。</summary>
      <returns>針對資料庫提供者所設定的 SQL 產生器。</returns>
      <param name="providerInvariantName">要取得 SQL 產生器之資料庫提供者的名稱。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsAssembly">
      <summary>取得或設定包含以程式碼為基礎之移轉的組件。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsDirectory">
      <summary>取得或設定儲存以程式碼為基礎之移轉的子目錄。請注意，如果是 Visual Studio 專案根目錄下的子目錄，就必須將此屬性設定為相對路徑，不能設定為絕對路徑。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsNamespace">
      <summary>取得或設定用於以程式碼為基礎之移轉的命名空間。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetHistoryContextFactory(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>加入新的 Factory 以建立 <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> 執行個體用於給定的資料庫提供者。</summary>
      <param name="providerInvariantName">要設定 SQL 產生器之資料庫提供者的名稱。</param>
      <param name="factory">用以針對給定的 <see cref="T:System.Data.Common.DbConnection" /> 建立 <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> 執行個體的 Factory，其中 <see cref="T:System.String" /> 表示預設結構描述。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetSqlGenerator(System.String,System.Data.Entity.Migrations.Sql.MigrationSqlGenerator)">
      <summary>加入要用於給定之資料庫提供者的新 SQL 產生器。</summary>
      <param name="providerInvariantName">要設定 SQL 產生器之資料庫提供者的名稱。</param>
      <param name="migrationSqlGenerator">要使用的 SQL 產生器。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.TargetDatabase">
      <summary>取得或設定值以覆寫要移轉之資料庫的連接。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1">
      <summary>與給定模型之移轉用法有關的組態。</summary>
      <typeparam name="TContext">代表套用此組態之模型的內容。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.#ctor">
      <summary>初始化 DbMigrationsConfiguration 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)">
      <summary>判斷目前組態是否等於指定的物件。</summary>
      <returns>如果目前組態等於指定的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前組態比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetHashCode">
      <summary>取得此執行個體的雜湊函數。</summary>
      <returns>此執行個體的雜湊函數。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetType">
      <summary>傳回目前執行個體的執行階段類型。</summary>
      <returns>目前執行個體的執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.MemberwiseClone">
      <summary>建立目前物件的淺層複本。</summary>
      <returns>目前物件的淺層複本。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Seed(`0)">
      <summary>在升級為最新的移轉之後執行，以便允許更新初始資料。</summary>
      <param name="context">要用於更新初始資料的內容。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.ToString">
      <summary>傳回此組態的字串表示法。</summary>
      <returns>此組態的字串表示法。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrator">
      <summary>會使用 DbMigrator 來將現有的移轉套用至資料庫。DbMigrator 可用來升級和降級為任何給定的移轉。若要根據模型的變更對移轉進行 Scaffold，請使用 <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" /></summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>初始化 DbMigrator 類別的新執行個體。</summary>
      <param name="configuration">要用於移轉處理序的組態。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrator.Configuration">
      <summary>取得用於移轉處理序的組態。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetDatabaseMigrations">
      <summary>取得已經套用至目標資料庫的所有移轉。</summary>
      <returns>移轉的清單。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetLocalMigrations">
      <summary>取得已設定之移轉組件中定義的所有移轉。</summary>
      <returns>移轉的清單。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetPendingMigrations">
      <summary>取得已定義於組件但尚未套用至目標資料庫的所有移轉。</summary>
      <returns>移轉的清單。</returns>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrator.InitialDatabase">
      <summary>移轉 ID，表示套用任何移轉之前的資料庫狀態。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.Update(System.String)">
      <summary>將目標資料庫更新至給定的移轉。</summary>
      <param name="targetMigration">要升級/降級的目標移轉。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbSetMigrationsExtensions">
      <summary>一組 <see cref="T:System.Data.Entity.IDbSet`1" /> 的擴充方法</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])">
      <summary>呼叫 SaveChanges 時，按照自訂識別運算式加入或更新實體。相當於資料庫術語中的「更新並插入」作業。當您使用移轉來植入資料時，此方法就很有用。</summary>
      <param name="set">實體所屬的集合。</param>
      <param name="identifierExpression">運算式，它會指定用以判斷應該執行加入或更新作業的屬性。</param>
      <param name="entities">要加入或更新的實體。</param>
      <typeparam name="TEntity">要加入或更新的實體類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])">
      <summary>呼叫 SaveChanges 時，按照索引鍵加入或更新實體。相當於資料庫術語中的「更新並插入」作業。當您使用移轉來植入資料時，此方法就很有用。</summary>
      <param name="set">實體所屬的集合。</param>
      <param name="entities">要加入或更新的實體。</param>
      <typeparam name="TEntity">要加入或更新的實體類型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ColumnBuilder">
      <summary>用來設定資料行的 Helper 類別。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Builders.ColumnBuilder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Binary(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Byte[],System.String,System.Boolean,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>建立新的資料行定義以儲存 Binary 資料。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="maxLength">陣列資料所容許的最大長度。</param>
      <param name="fixedLength">值，指出所有資料是否應該填補至最大長度。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="timestamp">值，指出是否應該將此資料行設定為時間戳記。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料類型。</param>
      <param name="annotations">自訂註釋通常來自於 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Boolean(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>建立新的資料行定義以儲存 Boolean 資料。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料類型。</param>
      <param name="annotations">自訂註釋通常來自於 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Byte(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Byte},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>建立新的資料行定義以儲存 Byte 資料。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="identity">值，指出資料庫是否會在插入期間產生此資料行的值。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料類型。</param>
      <param name="annotations">自訂註釋通常來自於 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTime(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>建立新的資料行定義以儲存 DateTime 資料。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="precision">資料行的整數位數。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料類型。</param>
      <param name="annotations">自訂註釋通常來自於 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTimeOffset(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>建立新的資料行定義以儲存 DateTimeOffset 資料。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="precision">資料行的整數位數。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料類型。</param>
      <param name="annotations">自訂註釋通常來自於 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Decimal(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>建立新的資料行定義以儲存 Decimal 資料。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="precision">資料行的數字整數位數。</param>
      <param name="scale">資料行的數字小數位數。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料類型。</param>
      <param name="identity">值，指出資料庫是否會在插入期間產生此資料行的值。</param>
      <param name="annotations">自訂註釋通常來自於 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Double(System.Nullable{System.Boolean},System.Nullable{System.Double},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>建立新的資料行定義以儲存 Double 資料。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料類型。</param>
      <param name="annotations">自訂註釋通常來自於 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Equals(System.Object)">
      <summary>指出指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geography(System.Nullable{System.Boolean},System.Data.Entity.Spatial.DbGeography,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>建立新的資料行定義以儲存地理資料。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料類型。</param>
      <param name="annotations">自訂註釋通常來自於 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geometry(System.Nullable{System.Boolean},System.Data.Entity.Spatial.DbGeometry,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>建立新的資料行定義以儲存幾何資料。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料類型。</param>
      <param name="annotations">自訂註釋通常來自於 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>此執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Guid(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Guid},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>建立新的資料行定義以儲存 GUID 資料。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="identity">值，指出資料庫是否會在插入期間產生此資料行的值。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料類型。</param>
      <param name="annotations">自訂註釋通常來自於 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Int(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>建立新的資料行定義以儲存 Integer 資料。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="identity">值，指出資料庫是否會在插入期間產生此資料行的值。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料類型。</param>
      <param name="annotations">自訂註釋通常來自於 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Long(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int64},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>建立新的資料行定義以儲存 Long 資料。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="identity">值，指出資料庫是否會在插入期間產生此資料行的值。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料類型。</param>
      <param name="annotations">自訂註釋通常來自於 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.MemberwiseClone">
      <summary>建立目前 <see cref="T:System.Object" /> 的淺層複本 (Shallow Copy)。</summary>
      <returns>目前 <see cref="T:System.Object" /> 的淺層複本。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Short(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int16},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>建立新的資料行定義以儲存 Short 資料。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="identity">值，指出資料庫是否會在插入期間產生此資料行的值。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料類型。</param>
      <param name="annotations">自訂註釋通常來自於 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Single(System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>建立新的資料行定義以儲存 Single 資料。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料類型。</param>
      <param name="annotations">自訂註釋通常來自於 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.String(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>建立新的資料行定義以儲存 String 資料。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="maxLength">字串資料所容許的最大長度。</param>
      <param name="fixedLength">值，指出所有資料是否應該填補至最大長度。</param>
      <param name="unicode">值，指出資料行是否支援 Unicode 內容。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料類型。</param>
      <param name="annotations">自訂註釋通常來自於 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Time(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>建立新的資料行定義以儲存 Time 資料。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="precision">資料行的整數位數。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料類型。</param>
      <param name="annotations">自訂註釋通常來自於 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ParameterBuilder">
      <summary>表示用來設定參數的類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Builders.ParameterBuilder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Binary(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Byte[],System.String,System.String,System.String,System.Boolean)">
      <summary>建立新的參數定義以傳遞 Binary 資料。</summary>
      <returns>新建構的參數定義。</returns>
      <param name="maxLength">陣列資料所容許的最大長度。</param>
      <param name="fixedLength">值，指出所有資料是否應該填補至最大長度。</param>
      <param name="defaultValue">要當做此參數之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此參數之預設值使用的 SQL 運算式。</param>
      <param name="name">參數名稱。</param>
      <param name="storeType">要用於此參數的提供者特有資料類型。</param>
      <param name="outParameter">表示參數是否為輸出參數的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Boolean(System.Nullable{System.Boolean},System.String,System.String,System.String,System.Boolean)">
      <summary>建立新的參數定義以傳遞 Boolean 資料。</summary>
      <returns>新建構的參數定義。</returns>
      <param name="defaultValue">要用為此參數之預設值的常數值。</param>
      <param name="defaultValueSql">用為此參數之預設值的 SQL 運算式。</param>
      <param name="name">參數名稱。</param>
      <param name="storeType">要用於此參數的提供者特有資料類型。</param>
      <param name="outParameter">表示參數是否為輸出參數的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Byte(System.Nullable{System.Byte},System.String,System.String,System.String,System.Boolean)">
      <summary>建立新的參數定義以傳遞 Byte 資料。</summary>
      <returns>新建構的參數定義。</returns>
      <param name="defaultValue">要用為此參數之預設值的常數值。</param>
      <param name="defaultValueSql">用為此參數之預設值的 SQL 運算式。</param>
      <param name="name">參數名稱。</param>
      <param name="storeType">要用於此參數的提供者特有資料類型。</param>
      <param name="outParameter">表示參數是否為輸出參數的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.DateTime(System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Boolean)">
      <summary>建立新的參數定義以傳遞 DateTime 資料。</summary>
      <returns>新建構的參數定義。</returns>
      <param name="precision">參數的精確度。</param>
      <param name="defaultValue">要用為此參數之預設值的常數值。</param>
      <param name="defaultValueSql">用為此參數之預設值的 SQL 運算式。</param>
      <param name="name">參數名稱。</param>
      <param name="storeType">要用於此參數的提供者特有資料類型。</param>
      <param name="outParameter">表示參數是否為輸出參數的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.DateTimeOffset(System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Boolean)">
      <summary>建立新的參數定義以傳遞 DateTimeOffset 資料。</summary>
      <returns>新建構的參數定義。</returns>
      <param name="precision">參數的精確度。</param>
      <param name="defaultValue">要用為此參數之預設值的常數值。</param>
      <param name="defaultValueSql">用為此參數之預設值的 SQL 運算式。</param>
      <param name="name">參數名稱。</param>
      <param name="storeType">要用於此參數的提供者特有資料類型。</param>
      <param name="outParameter">表示參數是否為輸出參數的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Decimal(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean)">
      <summary>建立新的參數定義以傳遞 Decimal 資料。</summary>
      <returns>新建構的參數定義。</returns>
      <param name="precision">參數的數字整數位數。</param>
      <param name="scale">參數的數字小數位數。</param>
      <param name="defaultValue">要用為此參數之預設值的常數值。</param>
      <param name="defaultValueSql">用為此參數之預設值的 SQL 運算式。</param>
      <param name="name">參數名稱。</param>
      <param name="storeType">要用於此參數的提供者特有資料類型。</param>
      <param name="outParameter">表示參數是否為輸出參數的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Double(System.Nullable{System.Double},System.String,System.String,System.String,System.Boolean)">
      <summary>建立新的參數定義以傳遞 Double 資料。</summary>
      <returns>新建構的參數定義。</returns>
      <param name="defaultValue">要用為此參數之預設值的常數值。</param>
      <param name="defaultValueSql">用為此參數之預設值的 SQL 運算式。</param>
      <param name="name">參數名稱。</param>
      <param name="storeType">要用於此參數的提供者特有資料類型。</param>
      <param name="outParameter">表示參數是否為輸出參數的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Equals(System.Object)">
      <summary>指定此執行個體是否等於特定物件。</summary>
      <returns>若此執行個體等於特定物件，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Geography(System.Data.Entity.Spatial.DbGeography,System.String,System.String,System.String,System.Boolean)">
      <summary>建立新的參數定義以傳遞地理位置資料。</summary>
      <returns>新建構的參數定義。</returns>
      <param name="defaultValue">要用為此參數之預設值的常數值。</param>
      <param name="defaultValueSql">用為此參數之預設值的 SQL 運算式。</param>
      <param name="name">參數名稱。</param>
      <param name="storeType">要用於此參數的提供者特有資料類型。</param>
      <param name="outParameter">表示參數是否為輸出參數的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Geometry(System.Data.Entity.Spatial.DbGeometry,System.String,System.String,System.String,System.Boolean)">
      <summary>建立新的參數定義以傳遞幾何資料。</summary>
      <returns>新建構的參數定義。</returns>
      <param name="defaultValue">要用為此參數之預設值的常數值。</param>
      <param name="defaultValueSql">用為此參數之預設值的 SQL 運算式。</param>
      <param name="name">參數名稱。</param>
      <param name="storeType">要用於此參數的提供者特有資料類型。</param>
      <param name="outParameter">表示參數是否為輸出參數的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.GetHashCode">
      <summary>取得與此執行個體相關聯的雜湊碼。</summary>
      <returns>與此執行個體相關聯的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Guid(System.Nullable{System.Guid},System.String,System.String,System.String,System.Boolean)">
      <summary>建立新的參數定義以傳遞 GUID 資料。</summary>
      <returns>新建構的參數定義。</returns>
      <param name="defaultValue">要用為此參數之預設值的常數值。</param>
      <param name="defaultValueSql">用為此參數之預設值的 SQL 運算式。</param>
      <param name="name">參數名稱。</param>
      <param name="storeType">要用於此參數的提供者特有資料類型。</param>
      <param name="outParameter">表示參數是否為輸出參數的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Int(System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean)">
      <summary>建立新的參數定義以傳遞 Integer 資料。</summary>
      <returns>新建構的參數定義。</returns>
      <param name="defaultValue">要用為此參數之預設值的常數值。</param>
      <param name="defaultValueSql">用為此參數之預設值的 SQL 運算式。</param>
      <param name="name">參數名稱。</param>
      <param name="storeType">要用於此參數的提供者特有資料類型。</param>
      <param name="outParameter">表示參數是否為輸出參數的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Long(System.Nullable{System.Int64},System.String,System.String,System.String,System.Boolean)">
      <summary>建立新的參數定義以傳遞 Long 資料。</summary>
      <returns>新建構的參數定義。</returns>
      <param name="defaultValue">要用為此參數之預設值的常數值。</param>
      <param name="defaultValueSql">用為此參數之預設值的 SQL 運算式。</param>
      <param name="name">參數名稱。</param>
      <param name="storeType">要用於此參數的提供者特有資料類型。</param>
      <param name="outParameter">表示參數是否為輸出參數的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.MemberwiseClone">
      <summary>建立目前 <see cref="T:System.Object" /> 的淺層複本 (Shallow Copy)。</summary>
      <returns>目前 <see cref="T:System.Object" /> 的淺層複本。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Short(System.Nullable{System.Int16},System.String,System.String,System.String,System.Boolean)">
      <summary>建立新的參數定義以傳遞 Short 資料。</summary>
      <returns>新建構的參數定義。</returns>
      <param name="defaultValue">要用為此參數之預設值的常數值。</param>
      <param name="defaultValueSql">用為此參數之預設值的 SQL 運算式。</param>
      <param name="name">參數名稱。</param>
      <param name="storeType">要用於此參數的提供者特有資料類型。</param>
      <param name="outParameter">表示參數是否為輸出參數的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Single(System.Nullable{System.Single},System.String,System.String,System.String,System.Boolean)">
      <summary>建立新的參數定義以傳遞 Single 資料。</summary>
      <returns>新建構的參數定義。</returns>
      <param name="defaultValue">要用為此參數之預設值的常數值。</param>
      <param name="defaultValueSql">用為此參數之預設值的 SQL 運算式。</param>
      <param name="name">參數名稱。</param>
      <param name="storeType">要用於此參數的提供者特有資料類型。</param>
      <param name="outParameter">表示參數是否為輸出參數的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.String(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>建立新的參數定義以傳遞 String 資料。</summary>
      <returns>新建構的參數定義。</returns>
      <param name="maxLength">字串資料所容許的最大長度。</param>
      <param name="fixedLength">值，指出所有資料是否應該填補至最大長度。</param>
      <param name="unicode">指出參數是否支援 Unicode 內容的值。</param>
      <param name="defaultValue">要用為此參數之預設值的常數值。</param>
      <param name="defaultValueSql">用為此參數之預設值的 SQL 運算式。</param>
      <param name="name">參數名稱。</param>
      <param name="storeType">要用於此參數的提供者特有資料類型。</param>
      <param name="outParameter">表示參數是否為輸出參數的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Time(System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String,System.Boolean)">
      <summary>建立新的參數定義以傳遞 Time 資料。</summary>
      <returns>新建構的參數定義。</returns>
      <param name="precision">參數的精確度。</param>
      <param name="defaultValue">要用為此參數之預設值的常數值。</param>
      <param name="defaultValueSql">用為此參數之預設值的 SQL 運算式。</param>
      <param name="name">參數名稱。</param>
      <param name="storeType">要用於此參數的提供者特有資料類型。</param>
      <param name="outParameter">表示參數是否為輸出參數的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.ToString">
      <summary>傳回此執行個體的字串表示。</summary>
      <returns>此執行個體的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.TableBuilder`1">
      <summary>Helper 類別，此類別是用來進一步設定 <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 之 CreateTable 呼叫所建立的資料表。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <typeparam name="TColumns">表示資料表資料行的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.#ctor(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.DbMigration)">
      <summary>初始化 TableBuilder 類別的新執行個體。</summary>
      <param name="createTableOperation">要進一步設定的資料表建立作業。</param>
      <param name="migration">用以建立資料表的移轉。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ForeignKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.String,System.Object)">
      <summary>指定要針對資料表建立的外部索引鍵限制式。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>它本身，以便鏈結多個呼叫。</returns>
      <param name="principalTable">外部索引鍵限制式設為目標之資料表的名稱。</param>
      <param name="dependentKeyExpression">Lambda 運算式，表示外部索引鍵的屬性。C#:t =&amp;gt; t.PropertyOne VB.Net:Function(t) t.PropertyOne。若外部索引鍵由多個屬性組成，請指定匿名類型 (包括屬性)。C#:t =&amp;gt; new { t.PropertyOne, t.PropertyTwo } VB.Net:Function(t) New With { t.PropertyOne, t.PropertyTwo }</param>
      <param name="cascadeDelete">值，指出是否應該針對外部索引鍵限制式設定串聯刪除。</param>
      <param name="name">此外部索引鍵限制式的名稱。如果沒有提供名稱，則會計算預設名稱。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetHashCode">
      <summary>取得目前物件的雜湊碼。</summary>
      <returns>目前物件的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean,System.Boolean,System.Object)">
      <summary>指定要針對資料表建立的索引。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>它本身，以便鏈結多個呼叫。</returns>
      <param name="indexExpression">Lambda 運算式，表示要進行索引的屬性。C#:t =&amp;gt; t.PropertyOne VB.Net:Function(t) t.PropertyOne。若要對檢索多個屬性，請指定匿名類型 (包括屬性)。C#:t =&amp;gt; new { t.PropertyOne, t.PropertyTwo } VB.Net:Function(t) New With { t.PropertyOne, t.PropertyTwo }</param>
      <param name="name">索引的名稱。</param>
      <param name="unique">值，指出這是否為唯一索引。</param>
      <param name="clustered">值，指出這是否為叢集索引。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.MemberwiseClone">
      <summary>建立目前 <see cref="T:System.Object" /> 的淺層複本 (Shallow Copy)。</summary>
      <returns>目前 <see cref="T:System.Object" /> 的淺層複本。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.PrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean,System.Object)">
      <summary>指定資料表的主索引鍵。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>它本身，以便鏈結多個呼叫。</returns>
      <param name="keyExpression">Lambda 運算式，表示要當做主索引鍵使用的屬性。C#:t =&amp;gt; t.Id VB.Net:Function(t) t.Id。若主索引鍵由多個屬性組成，請指定匿名類型 (包括屬性)。C#:t =&amp;gt; new { t.Id1, t.Id2 } VB.Net:Function(t) New With { t.Id1, t.Id2 }</param>
      <param name="name">主索引鍵的名稱。如果提供了 null，則會產生預設名稱。</param>
      <param name="clustered">值，指出這是否為叢集主索引鍵。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ToString">
      <summary>傳回目前物件的字串表示。</summary>
      <returns>目前物件的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator">
      <summary>針對以程式碼為基礎的移轉產生 C# 程式碼。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>產生程式碼以指定 <see cref="T:byte[]" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>產生使用者可以檢視和編輯的主要程式碼檔案。</summary>
      <returns>產生的程式碼。</returns>
      <param name="operations">要由移轉執行的作業。</param>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="className">應該產生之類別的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以使用 Lambda 運算式來指定一組資料行名稱。</summary>
      <param name="columns">要產生程式碼的資料行。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />。</summary>
      <param name="addColumnOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />。</summary>
      <param name="addForeignKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />。</summary>
      <param name="addPrimaryKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />。</summary>
      <param name="alterColumnOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />。</summary>
      <param name="alterProcedureOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation" /> 的程式碼。</summary>
      <param name="alterTableOperation">要產生程式碼的目標作業。</param>
      <param name="writer">所產生程式碼要寫入的目標寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>產生程式碼以指定 <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" /> 的定義。</summary>
      <param name="column">要產生程式碼的資料行定義。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
      <param name="emitName">值，指出是否要在定義中包含資料行名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />。</summary>
      <param name="createIndexOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />。</summary>
      <param name="createProcedureOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />。</summary>
      <param name="createTableOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />。</summary>
      <param name="dropColumnOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />。</summary>
      <param name="dropForeignKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />。</summary>
      <param name="dropIndexOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />。</summary>
      <param name="dropPrimaryKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />。</summary>
      <param name="dropProcedureOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />。</summary>
      <param name="dropTableOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" />。</summary>
      <param name="moveProcedureOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />。</summary>
      <param name="moveTableOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ParameterModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>產生程式碼以指定 <see cref="T:System.Data.Entity.Migrations.Model.ParameterModel" /> 的定義。</summary>
      <param name="parameterModel">要為其產生程式碼的參數定義。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
      <param name="emitName">值，指出是否要在定義中包含資料行名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />。</summary>
      <param name="renameColumnOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.RenameIndexOperation" />。</summary>
      <param name="renameIndexOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" />。</summary>
      <param name="renameProcedureOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />。</summary>
      <param name="renameTableOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />。</summary>
      <param name="sqlOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeography)">
      <summary>產生程式碼以指定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>產生程式碼以指定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>產生程式碼以指定 <see cref="T:System.DateTime" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>產生程式碼以指定 <see cref="T:System.DateTimeOffset" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>產生程式碼以指定 <see cref="T:System.Decimal" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Guid)">
      <summary>產生程式碼以指定 <see cref="T:System.Guid" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Int64)">
      <summary>產生程式碼以指定 <see cref="T:System.Int64" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Object)">
      <summary>產生程式碼以指定未知資料類型之資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Single)">
      <summary>產生程式碼以指定 <see cref="T:System.Single" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String)">
      <summary>產生程式碼以指定 <see cref="T:System.String" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>產生包含 <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" /> 的程式碼後置檔案。</summary>
      <returns>產生的程式碼。</returns>
      <param name="migrationId">移轉的唯一識別項。</param>
      <param name="operations">要產生程式碼的作業。</param>
      <param name="sourceModel">要儲存在移轉中繼資料中的來源模型。</param>
      <param name="targetModel">要儲存在移轉中繼資料中的目標模型。</param>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="className">應該產生之類別的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>產生包含移轉中繼資料的程式碼後置檔案。</summary>
      <returns>產生的程式碼。</returns>
      <param name="migrationId">移轉的唯一識別項。</param>
      <param name="sourceModel">要儲存在移轉中繼資料中的來源模型。</param>
      <param name="targetModel">要儲存在移轉中繼資料中的目標模型。</param>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="className">應該產生之類別的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>產生程式碼以指定 <see cref="T:System.TimeSpan" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotation(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>為指定的註釋值產生程式碼，此值可能是空白值。預設行為是使用 <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" /> (如果已註冊的話)，否則會針對註釋值呼叫 ToString。</summary>
      <param name="name">程式碼需要的註釋名稱。</param>
      <param name="annotation">要產生的註釋值。</param>
      <param name="writer">所產生程式碼要寫入的目標寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以重新建立註釋的指定字典，以將這些註釋當做 <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 呼叫的參數進行傳遞。</summary>
      <param name="annotations">要產生的註釋。</param>
      <param name="writer">所產生程式碼要寫入的目標寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以重新建立註釋的指定字典，以將這些註釋當做 <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 呼叫的參數進行傳遞。</summary>
      <param name="annotations">要產生的註釋。</param>
      <param name="writer">所產生程式碼要寫入的目標寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行屬於 <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> 一部分的 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />。</summary>
      <param name="addForeignKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行屬於 <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> 一部分的 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />。</summary>
      <param name="addPrimaryKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行屬於 <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> 一部分的 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />。</summary>
      <param name="createIndexOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Quote(System.String)">
      <summary>使用適當的逸出為識別項加上引號，以便將它儲存在字串中。</summary>
      <returns>引號識別項。</returns>
      <param name="identifier">要加上引號的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.ScrubName(System.String)">
      <summary>從資料庫成品的名稱中移除任何無效的字元。</summary>
      <returns>清理的名稱。</returns>
      <param name="name">要清理的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.TranslateColumnType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>取得要針對給定資料類型之資料行使用的類型名稱。</summary>
      <returns>要用於產生之移轉的類型名稱。</returns>
      <param name="primitiveTypeKind">要轉譯的資料類型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassAttributes(System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>產生類別屬性。</summary>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
      <param name="designer">值，指出是否針對程式碼後置檔案產生此類別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>針對使用 WriteClassStart 啟動的類別產生關閉程式碼。</summary>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>使用陳述式和類別定義來產生命名空間。</summary>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="className">應該產生之類別的名稱。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
      <param name="base">產生之類別的基底類別。</param>
      <param name="designer">值，指出是否針對程式碼後置檔案產生此類別。</param>
      <param name="namespaces">要加入 using 指示詞的命名空間。如果為 null，則會使用 GetDefaultNamespaces 所傳回的命名空間。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生屬性以傳回程式碼後置檔案中的來源或目標模型。</summary>
      <param name="name">屬性的名稱。</param>
      <param name="value">要傳回的值。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator">
      <summary>針對以程式碼為基礎之移轉產生程式碼的提供者基底類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.AnnotationGenerators">
      <summary>取得要使用的 <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" /> 執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>產生應該加入至使用者專案的程式碼。</summary>
      <returns>產生的程式碼。</returns>
      <param name="migrationId">移轉的唯一識別項。</param>
      <param name="operations">要由移轉執行的作業。</param>
      <param name="sourceModel">要儲存在移轉中繼資料中的來源模型。</param>
      <param name="targetModel">要儲存在移轉中繼資料中的目標模型。</param>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="className">應該產生之類別的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetDefaultNamespaces(System.Boolean)">
      <summary>取得預設命名空間，這些命名空間必須針對任何產生的程式碼輸出成 "using" 或 "Imports" 指示詞。</summary>
      <returns>命名空間名稱的排序清單。</returns>
      <param name="designer">值，指出是否針對程式碼後置檔案產生此類別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetNamespaces(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary>取得命名空間，這些命名空間必須輸出成 "using" 或 "Imports" 指示詞，才能處理給定作業所產生的程式碼。</summary>
      <returns>命名空間名稱的排序清單。</returns>
      <param name="operations">即將產生程式碼的目標作業。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationScaffolder">
      <summary>對以程式碼為基礎的移轉進行 Scaffold，以便將暫止的模型變更套用至資料庫。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>初始化 MigrationScaffolder 類別的新執行個體。</summary>
      <param name="migrationsConfiguration">要用於 Scaffolding 的組態。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationScaffolder.Namespace">
      <summary>取得或設定用於移轉之產生程式碼的命名空間。根據預設，此命名空間與傳入建構函式之移轉組態物件的 MigrationsNamespace 相同。若為 VB.NET 專案，您就必須更新此命名空間，才能將專案的根命名空間納入考量。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String)">
      <summary>對以程式碼為基礎的移轉進行 Scaffold，以便將任何暫止的模型變更套用至資料庫。</summary>
      <returns>已進行 Scaffold 的移轉。</returns>
      <param name="migrationName">要用於已進行 Scaffold 之移轉的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String,System.Boolean)">
      <summary>對以程式碼為基礎的移轉進行 Scaffold，以便將任何暫止的模型變更套用至資料庫。</summary>
      <returns>已進行 Scaffold 的移轉。</returns>
      <param name="migrationName">要用於已進行 Scaffold 之移轉的名稱。</param>
      <param name="ignoreChanges">是否要包含模型變更。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.ScaffoldInitialCreate">
      <summary>對以程式碼為基礎的初始移轉 (對應至先前執行的資料庫初始設定式) 進行 Scaffold。</summary>
      <returns>已進行 Scaffold 的移轉。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration">
      <summary>表示已經進行 Scaffold 而且準備寫入檔案之以程式碼為基礎的移轉。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ScaffoldedMigration.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.DesignerCode">
      <summary>取得或設定應該儲存在程式碼後置檔案中的 Scaffold 移轉程式碼。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Directory">
      <summary>取得或設定使用者專案中應該儲存此移轉的子目錄。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.IsRescaffold">
      <summary>取得或設定是否重新對移轉進行 Scaffold。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Language">
      <summary>取得或設定用於此移轉的程式設計語言。通常用於產生之程式碼的副檔名。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.MigrationId">
      <summary>取得或設定此移轉的唯一識別項。通常用於產生之程式碼的檔案名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Resources">
      <summary>取得字串資源字典以加入至移轉資源檔案。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.UserCode">
      <summary>取得或設定使用者可以編輯的 Scaffold 移轉程式碼。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingFacade">
      <summary>設計階段工具用來執行移轉相關命令的 Helper 類別，這些命令必須與正在 Visual Studio 中編輯的應用程式進行互動。因為正在編輯應用程式，所以組件必須載入個別的 AppDomain 中，才能確保系統一律載入最新的版本。此外，系統也會複製啟始專案中的 App/Web.config 檔案，以便確保套用任何組態。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>初始化 ToolingFacade 類別的新執行個體。</summary>
      <param name="migrationsAssemblyName">包含要使用之移轉組態的組件名稱。</param>
      <param name="contextAssemblyName">包含要使用之 DbContext 的組件名稱。</param>
      <param name="configurationTypeName">要使用之移轉組態的命名空間限定名稱。</param>
      <param name="workingDirectory">包含已編譯之組件的工作目錄。</param>
      <param name="configurationFilePath">啟始專案中之組態檔的路徑。</param>
      <param name="dataDirectory">啟始專案中之應用程式資料目錄的路徑。通常是 Web 應用程式的 App_Data 目錄或可執行檔的工作目錄。</param>
      <param name="connectionStringInfo">要移轉之資料庫的連接。如果提供了 null，則會使用內容的預設連接。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose">
      <summary>釋放 <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" /> 類別目前的執行個體所使用的資源。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose(System.Boolean)">
      <summary>釋放外觀使用的所有資源。</summary>
      <param name="disposing">true 表示會同時釋放 Managed 和 Unmanaged 資源，false 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Finalize">
      <summary>釋放外觀使用的所有 Unmanaged 資源。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextType(System.String)">
      <summary>取得衍生自 <see cref="T:System.Data.Entity.DbContext" /> 之類型的完整名稱。</summary>
      <returns>找到的內容類型。</returns>
      <param name="contextTypeName">內容類型的名稱。如果是 null，則會傳回組件中找到的單一內容類型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextTypes">
      <summary>取得衍生自 <see cref="T:System.Data.Entity.DbContext" /> 之所有類型的完整名稱。</summary>
      <returns>找到的所有內容類型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetDatabaseMigrations">
      <summary>取得已經套用至資料庫的所有移轉清單。</summary>
      <returns>已套用之移轉的 ID。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetPendingMigrations">
      <summary>取得尚未套用至資料庫的所有移轉清單。</summary>
      <returns>暫止移轉的 ID。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogInfoDelegate">
      <summary>取得或設定為了記錄資訊所執行的動作。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogVerboseDelegate">
      <summary>取得或設定為了記錄詳細資訊所執行的動作。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogWarningDelegate">
      <summary>取得或設定為了記錄警告所執行的動作。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Scaffold(System.String,System.String,System.String,System.Boolean)">
      <summary>對以程式碼為基礎的移轉進行 Scaffold，以便套用任何暫止的模型變更。</summary>
      <returns>已進行 Scaffold 的移轉。</returns>
      <param name="migrationName">產生之移轉的名稱。</param>
      <param name="language">產生之移轉的程式設計語言。</param>
      <param name="rootNamespace">要加入移轉之專案的根命名空間。</param>
      <param name="ignoreChanges">是否要包含模型變更。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScaffoldInitialCreate(System.String,System.String)">
      <summary>對以程式碼為基礎的初始移轉 (對應至先前執行的資料庫初始設定式) 進行 Scaffold。</summary>
      <returns>已進行 Scaffold 的移轉。</returns>
      <param name="language">產生之移轉的程式設計語言。</param>
      <param name="rootNamespace">要加入移轉之專案的根命名空間。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScriptUpdate(System.String,System.String,System.Boolean)">
      <summary>產生 SQL 指令碼以在兩個移轉之間移轉。</summary>
      <returns>產生的 SQL 指令碼。</returns>
      <param name="sourceMigration">要更新的來源移轉。如果提供了 null，則會產生更新目前資料庫的指令碼。</param>
      <param name="targetMigration">要更新的目標移轉。如果提供了 null，則會產生更新至最新移轉的指令碼。</param>
      <param name="force">值，指出自動移轉期間是否可接受資料遺失。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Update(System.String,System.Boolean)">
      <summary>將資料庫更新至指定的移轉。</summary>
      <param name="targetMigration">要移轉之目標移轉的 ID。如果提供了 null，則會將資料庫更新至最新的移轉。</param>
      <param name="force">值，指出自動移轉期間是否可接受資料遺失。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator">
      <summary>針對以程式碼為基礎的移轉產生 VB.Net 程式碼。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>產生程式碼以指定 <see cref="T:byte[]" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>產生使用者可以檢視和編輯的主要程式碼檔案。</summary>
      <returns>產生的程式碼。</returns>
      <param name="operations">要由移轉執行的作業。</param>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="className">應該產生之類別的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以使用 Lambda 運算式來指定一組資料行名稱。</summary>
      <param name="columns">要產生程式碼的資料行。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />。</summary>
      <param name="addColumnOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />。</summary>
      <param name="addForeignKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />。</summary>
      <param name="addPrimaryKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />。</summary>
      <param name="alterColumnOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />。</summary>
      <param name="alterProcedureOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation" /> 的程式碼。</summary>
      <param name="alterTableOperation">要產生程式碼的目標作業。</param>
      <param name="writer">所產生程式碼要寫入的目標寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>產生程式碼以指定 <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" /> 的定義。</summary>
      <param name="column">要產生程式碼的資料行定義。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
      <param name="emitName">值，指出是否要在定義中包含資料行名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />。</summary>
      <param name="createIndexOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />。</summary>
      <param name="createProcedureOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />。</summary>
      <param name="createTableOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />。</summary>
      <param name="dropColumnOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />。</summary>
      <param name="dropForeignKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />。</summary>
      <param name="dropIndexOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />。</summary>
      <param name="dropPrimaryKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />。</summary>
      <param name="dropProcedureOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />。</summary>
      <param name="dropTableOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" />。</summary>
      <param name="moveProcedureOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />。</summary>
      <param name="moveTableOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ParameterModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.ParameterModel" />。</summary>
      <param name="parameterModel">要為其產生指令碼的參數模型定義。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
      <param name="emitName">true 表示要在定義中包含資料行名稱，否則為 false。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />。</summary>
      <param name="renameColumnOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.RenameIndexOperation" />。</summary>
      <param name="renameIndexOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" />。</summary>
      <param name="renameProcedureOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />。</summary>
      <param name="renameTableOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />。</summary>
      <param name="sqlOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeography)">
      <summary>產生程式碼以指定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>產生程式碼以指定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>產生程式碼以指定 <see cref="T:System.DateTime" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>產生程式碼以指定 <see cref="T:System.DateTimeOffset" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>產生程式碼以指定 <see cref="T:System.Decimal" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Guid)">
      <summary>產生程式碼以指定 <see cref="T:System.Guid" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Int64)">
      <summary>產生程式碼以指定 <see cref="T:System.Int64" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Object)">
      <summary>產生程式碼以指定未知資料類型之資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Single)">
      <summary>產生程式碼以指定 <see cref="T:System.Single" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String)">
      <summary>產生程式碼以指定 <see cref="T:System.String" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>產生包含移轉中繼資料的程式碼後置檔案。</summary>
      <returns>產生的程式碼。</returns>
      <param name="migrationId">移轉的唯一識別項。</param>
      <param name="operations">要由移轉執行的作業。</param>
      <param name="sourceModel">要儲存在移轉中繼資料中的來源模型。</param>
      <param name="targetModel">要儲存在移轉中繼資料中的目標模型。</param>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="className">應該產生之類別的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>產生包含移轉中繼資料的程式碼後置檔案。</summary>
      <returns>產生的程式碼。</returns>
      <param name="migrationId">移轉的唯一識別項。</param>
      <param name="sourceModel">要儲存在移轉中繼資料中的來源模型。</param>
      <param name="targetModel">要儲存在移轉中繼資料中的目標模型。</param>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="className">應該產生之類別的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>產生程式碼以指定 <see cref="T:System.TimeSpan" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotation(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>為指定的註釋值產生程式碼，此值可能是空白值。預設行為是使用 <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" /> (如果已註冊的話)，否則會針對註釋值呼叫 ToString。</summary>
      <param name="name">程式碼需要的註釋名稱。</param>
      <param name="annotation">要產生的註釋值。</param>
      <param name="writer">所產生程式碼要寫入的目標寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以重新建立註釋的指定字典，以將這些註釋當做 <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 呼叫的參數進行傳遞。</summary>
      <param name="annotations">要產生的註釋。</param>
      <param name="writer">所產生程式碼要寫入的目標寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以重新建立註釋的指定字典，以將這些註釋當做 <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 呼叫的參數進行傳遞。</summary>
      <param name="annotations">要產生的註釋。</param>
      <param name="writer">所產生程式碼要寫入的目標寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行屬於 <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> 一部分的 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />。</summary>
      <param name="addForeignKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行屬於 <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> 一部分的 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />。</summary>
      <param name="addPrimaryKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行屬於 <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> 一部分的 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />。</summary>
      <param name="createIndexOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Quote(System.String)">
      <summary>使用適當的逸出為識別項加上引號，以便將它儲存在字串中。</summary>
      <returns>引號識別項。</returns>
      <param name="identifier">要加上引號的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.ScrubName(System.String)">
      <summary>從資料庫成品的名稱中移除任何無效的字元。</summary>
      <returns>清理的名稱。</returns>
      <param name="name">要清理的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.TranslateColumnType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>取得要針對給定資料類型之資料行使用的類型名稱。</summary>
      <returns>要用於產生之移轉的類型名稱。</returns>
      <param name="primitiveTypeKind">要轉譯的資料類型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassAttributes(System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>產生類別屬性。</summary>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
      <param name="designer">值，指出是否針對程式碼後置檔案產生此類別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>針對使用 WriteClassStart 啟動的類別產生關閉程式碼。</summary>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>使用陳述式和類別定義來產生命名空間。</summary>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="className">應該產生之類別的名稱。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
      <param name="base">產生之類別的基底類別。</param>
      <param name="designer">值，指出是否針對程式碼後置檔案產生此類別。</param>
      <param name="namespaces">要加入 Imports 指示詞的命名空間。如果為 null，則會使用 GetDefaultNamespaces 所傳回的命名空間。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生屬性以傳回程式碼後置檔案中的來源或目標模型。</summary>
      <param name="name">屬性的名稱。</param>
      <param name="value">要傳回的值。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryContext">
      <summary>此類別是供 Code First 移轉用來從資料庫讀取和寫入移轉記錄。自訂您可以衍生自此類別的移轉記錄資料表的定義，並覆寫 OnModelCreating。可以使用 <see cref="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetHistoryContextFactory(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" /> 以每個移轉組態為基礎來註冊衍生的執行個體，或使用 <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultHistoryContext(System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" /> 以全域方式註冊。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryContext.#ctor(System.Data.Common.DbConnection,System.String)">
      <summary>初始化 HistoryContext 類別的新執行個體。如果您要建立衍生的記錄內容，通常就會公開一個建構函式，接受相同的參數並且將其傳遞給此基底建構函式。</summary>
      <param name="existingConnection">要用於新內容的現有連接。</param>
      <param name="defaultSchema">移轉之模型的預設結構描述。除非在 OnModelCreating 中設定了不同的結構描述，否則此結構描述會用於移轉記錄資料表。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.CacheKey">
      <summary>取得索引鍵，該索引鍵是用來找出先前為此內容建立的模型。這可用來避免每次建立新的內容執行個體時都要處理 OnModelCreating 和計算模型。依預設此屬性會傳回預設結構描述。在大多數情況下，並不需要覆寫此屬性。不過，如果您的 OnModelCreating 實作包含條件式邏輯，而該邏輯會導致為相同資料庫提供者和預設結構描述建立不同的模型，您就應該覆寫此屬性並計算適當的索引鍵。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.DefaultSchema">
      <summary>取得移轉之模型的預設結構描述。除非在 OnModelCreating 中設定了不同的結構描述，否則此結構描述會用於移轉記錄資料表。</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.History.HistoryContext.DefaultTableName">
      <summary>移轉記錄資料表所使用的預設名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.History">
      <summary>取得或設定 <see cref="T:System.Data.Entity.DbSet`1" />，其可用來讀寫 <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" /> 執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>套用移轉記錄資料表的預設組態。如果您覆寫此方法，建議您在套用自訂組態之前先呼叫此基本實作。</summary>
      <param name="modelBuilder">針對建立的內容定義模型的產生器。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryRow">
      <summary>此類別是供 Code First 移轉用來從資料庫讀取和寫入移轉記錄。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryRow.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ContextKey">
      <summary>取得或設定索引鍵，表示資料列是套用到哪個內容。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.MigrationId">
      <summary>取得或設定此資料列所表示之移轉的 ID。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.Model">
      <summary>取得或設定套用此移轉之後的模型狀態。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ProductVersion">
      <summary>取得或設定建立此項目的 Entity Framework 版本。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException">
      <summary>表示自動移轉會造成資料遺失時發生的錯誤。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor">
      <summary>初始化 AutomaticDataLossException 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String)">
      <summary>初始化 AutomaticDataLossException 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String,System.Exception)">
      <summary>初始化 MigrationsException 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況；如果未指定內部例外狀況則為 null 參考 (在 Visual Basic 中為 Nothing)。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException">
      <summary>表示套用最後一個移轉且停用自動移轉之後存在暫止模型變更時發生的錯誤。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor">
      <summary>初始化 AutomaticMigrationsDisabledException 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String)">
      <summary>初始化 AutomaticMigrationsDisabledException 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String,System.Exception)">
      <summary>初始化 MigrationsException 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況；如果未指定內部例外狀況則為 null 參考 (在 Visual Basic 中為 Nothing)。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IDbMigration">
      <summary>由 <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 明確地實作，以防止特定成員顯示在已進行 Scaffold 之移轉的 IntelliSense 中。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.IDbMigration.AddOperation(System.Data.Entity.Migrations.Model.MigrationOperation)">
      <summary>將自訂 <see cref="T:System.Data.Entity.Migrations.Model.MigrationOperation" /> 加入至移轉。建議自訂作業的實作者建立 <see cref="T:System.Data.Entity.Migrations.Infrastructure.IDbMigration" /> 的擴充方法，以提供 Fluent 樣式的應用程式開發介面來加入新的作業。</summary>
      <param name="migrationOperation">要加入的作業。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata">
      <summary>提供有關以程式碼為基礎之移轉的其他中繼資料。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Id">
      <summary>取得移轉的唯一識別項。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Source">
      <summary>取得執行此移轉之前的模型狀態。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Target">
      <summary>取得執行此移轉之後的模型狀態。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsException">
      <summary>表示在 Code First 移轉管線內部發生的錯誤。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor">
      <summary>初始化 MigrationsException 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 MigrationsException 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，其中保存有關擲回之例外狀況的序列化物件資料。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，包含關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String)">
      <summary>初始化 MigrationsException 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String,System.Exception)">
      <summary>初始化 MigrationsException 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況；如果未指定內部例外狀況則為 null 參考 (在 Visual Basic 中為 Nothing)。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger">
      <summary>可用於移轉處理序之記錄器的基底類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Info(System.String)">
      <summary>記錄告知性訊息。</summary>
      <param name="message">要記錄的訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Verbose(System.String)">
      <summary>記錄只有在使用者要求詳細資訊輸出時才呈現給他們的一些其他資訊。</summary>
      <param name="message">要記錄的訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Warning(System.String)">
      <summary>記錄使用者應該注意的警告。</summary>
      <param name="message">要記錄的訊息。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException">
      <summary>當作業由於某些現有的移轉仍未套用至資料庫而無法執行時擲回。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor">
      <summary>初始化 MigrationsPendingException 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor(System.String)">
      <summary>初始化 MigrationsPendingException 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor(System.String,System.Exception)">
      <summary>初始化 MigrationsPendingException 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況；如果未指定內部例外狀況則為 null 參考 (在 Visual Basic 中為 Nothing)。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase">
      <summary>表示包裝核心 <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> 之裝飾項目的基底類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase" /> 類別的新執行個體。</summary>
      <param name="innerMigrator">此裝飾項目所包裝的移轉程式。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Configuration">
      <summary>取得用於移轉處理序的組態。</summary>
      <returns>用於移轉程序的處理序。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetDatabaseMigrations">
      <summary>取得已經套用至資料庫的移轉清單。</summary>
      <returns>移轉 ID 的清單。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetLocalMigrations">
      <summary>取得組件中所定義的移轉清單。</summary>
      <returns>移轉 ID 的清單。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetPendingMigrations">
      <summary>取得尚未套用至資料庫的暫止移轉清單。</summary>
      <returns>移轉 ID 的清單。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update">
      <summary>將目標資料庫更新至最新的移轉。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update(System.String)">
      <summary>將目標資料庫更新至給定的移轉。</summary>
      <param name="targetMigration">要升級/降級的目標移轉。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator">
      <summary>要在移轉作業期間提供記錄的裝飾項目。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase,System.Data.Entity.Migrations.Infrastructure.MigrationsLogger)">
      <summary>初始化 MigratorLoggingDecorator 類別的新執行個體。</summary>
      <param name="innerMigrator">此裝飾項目所包裝的移轉程式。</param>
      <param name="logger">要寫入訊息的記錄器。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator">
      <summary>要產生 SQL 指令碼而非套用變更至資料庫的裝飾項目。使用此裝飾項目來包裝 <see cref="T:System.Data.Entity.Migrations.DbMigrator" />，可防止 <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> 將任何變更套用至目標資料庫。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>初始化 MigratorScriptingDecorator 類別的新執行個體。</summary>
      <param name="innerMigrator">此裝飾項目所包裝的移轉程式。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)">
      <summary>產生指令碼以更新資料庫。</summary>
      <returns>產生的 SQL 指令碼。</returns>
      <param name="sourceMigration">要更新的來源移轉。如果提供了 null，則會產生更新目前資料庫的指令碼。</param>
      <param name="targetMigration">要更新的目標移轉。如果提供了 null，則會產生更新至最新移轉的指令碼。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddColumnOperation">
      <summary>表示正在將資料行加入至資料表。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Object)">
      <summary>初始化 AddColumnOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">應該加入資料行的資料表名稱。</param>
      <param name="column">正在加入之資料行的詳細資料。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Column">
      <summary>取得正在加入之資料行的詳細資料。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Inverse">
      <summary>取得表示卸除已加入之資料行的作業。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.IsDestructiveChange">
      <summary>取得值，指出此變更是否為破壞性。</summary>
      <returns>如果此變更為破壞性，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Table">
      <summary>取得應該加入資料行的資料表名稱。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation">
      <summary>表示正在加入至資料表的外部索引鍵限制式。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.#ctor(System.Object)">
      <summary>初始化 AddForeignKeyOperation 類別的新執行個體。您也應該填入 PrincipalTable、PrincipalColumns、DependentTable 和 DependentColumns 屬性。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CascadeDelete">
      <summary>取得或設定值，指出是否應該針對外部索引鍵限制式設定串聯刪除。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CreateCreateIndexOperation">
      <summary>取得要針對外部索引鍵資料行建立索引的作業。</summary>
      <returns>要加入索引的作業。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.Inverse">
      <summary>取得要卸除外部索引鍵限制式的作業。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.IsDestructiveChange">
      <summary>取得或設定值，指出此變更是否會導致資料遺失。</summary>
      <returns>如果此變更會導致資料遺失，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.PrincipalColumns">
      <summary>外部索引鍵限制式應該設為目標之資料行的名稱。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation">
      <summary>表示將主索引鍵加入至資料表。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.#ctor(System.Object)">
      <summary>初始化 AddPrimaryKeyOperation 類別的新執行個體。您也應該填入 Table 和 Columns 屬性。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.Inverse">
      <summary>取得要卸除主索引鍵的作業。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.IsClustered">
      <summary>取得或設定是否為叢集主索引鍵。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterColumnOperation">
      <summary>表示更改現有的資料行。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Object)">
      <summary>初始化 AlterColumnOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">資料行所屬之資料表的名稱。</param>
      <param name="column">應該更改之目標資料行內容的詳細資料。</param>
      <param name="isDestructiveChange">值，指出這項變更是否會造成資料遺失。</param>
      <param name="inverse">要還原這項資料行更改的作業。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Object)">
      <summary>初始化 AlterColumnOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">資料行所屬之資料表的名稱。</param>
      <param name="column">應該更改之目標資料行內容的詳細資料。</param>
      <param name="isDestructiveChange">值，指出這項變更是否會造成資料遺失。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Column">
      <summary>取得資料行的新定義。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Inverse">
      <summary>取得表示還原更改的作業。系統無法自動計算反向，而且如果沒有提供給建構函式，此屬性將會傳回 null。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.IsDestructiveChange">
      <summary>取得值，指出此變更是否會導致資料遺失。</summary>
      <returns>如果此變更會導致資料遺失，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Table">
      <summary>取得資料行所屬之資料表的名稱。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation">
      <summary>表示更改現有的預存程序。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" /> 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">預存程序 (Stored Procedure) 的名稱。</param>
      <param name="bodySql">以 SQL 表示之預存程序的主體。</param>
      <param name="anonymousArguments">請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterProcedureOperation.Inverse">
      <summary>取得將會還原此作業的作業。一律傳回 <see cref="T:System.Data.Entity.Migrations.Model.NotSupportedOperation" />。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterTableOperation">
      <summary>表示對資料表的自訂註釋所做的變更。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation" /> 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">註釋有所變更之資料表的名稱。</param>
      <param name="annotations">資料表中已變更的自訂註釋。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Annotations">
      <summary>取得資料表中已變更的自訂註釋。</summary>
      <returns>資料表有所變更的自訂註釋。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Columns">
      <summary>取得要包含在註釋已變更之資料表中的資料行。</summary>
      <returns>要包含在註釋有所變更之資料表中的資料行。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Inverse">
      <summary>取得此作業的反向作業，如此註釋將會變回套用此作業之前的狀態。</summary>
      <returns>此作業的反向作業，會將註釋變更回套用此作業之前的狀態。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.IsDestructiveChange">
      <summary>取得值，指出此作業是否可能會造成資料遺失。</summary>
      <returns>如果這項作業可能會造成資料遺失，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Name">
      <summary>取得註釋已變更之資料表的名稱。</summary>
      <returns>註釋有所變更之資料表的名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ColumnModel">
      <summary>表示資料行的相關資訊。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>初始化 ColumnModel 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="type">此資料行的資料類型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>初始化 ColumnModel 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="type">此資料行的資料類型。</param>
      <param name="typeUsage">關於資料類型的其他詳細資料。這包括最大長度、Null 屬性等詳細資料。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Annotations">
      <summary>取得或設定資料行中已變更的自訂註釋。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrDefaultValue">
      <summary>取得對應至此資料行之資料庫類型的 CLR 類型的預設值。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrType">
      <summary>取得對應至此資料行之資料庫類型的 CLR 類型。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsIdentity">
      <summary>取得或設定值，指出資料庫是否將使用識別模式來產生此資料行的值。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.IsNarrowerThan(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Core.Common.DbProviderManifest)">
      <summary>判斷此資料行的資料類型是否比另一個資料行要窄。用來判斷將提供的資料行定義更改為此定義是否會造成資料遺失。</summary>
      <returns>如果此資料行的資料類型比較窄，則為 True。</returns>
      <param name="column">要比較的資料行。</param>
      <param name="providerManifest">正在使用之資料庫提供者的詳細資料。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsNullable">
      <summary>取得或設定值，指出此資料行是否可以儲存 null 值。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsTimestamp">
      <summary>取得或設定值，指出是否應該將此屬性模型設定為時間戳記。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateIndexOperation">
      <summary>表示建立資料庫索引。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateIndexOperation.#ctor(System.Object)">
      <summary>初始化 CreateIndexOperation 類別的新執行個體。您也應該填入 Table 和 Columns 屬性。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.Inverse">
      <summary>取得要卸除此索引的作業。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsClustered">
      <summary>取得或設定是否為叢集索引。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsDestructiveChange">
      <summary>取得或設定值，指出此變更是否會導致資料遺失。</summary>
      <returns>如果此變更會導致資料遺失，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsUnique">
      <summary>取得或設定值，指出這是否為唯一索引。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation">
      <summary>用來將新預存程序加入至資料庫的移轉作業。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" /> 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">預存程序 (Stored Procedure) 的名稱。</param>
      <param name="bodySql">以 SQL 表示之預存程序的主體。</param>
      <param name="anonymousArguments">請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateProcedureOperation.Inverse">
      <summary>取得用來卸除主預存程序的作業。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateTableOperation">
      <summary>表示建立資料表。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">要建立之資料表的名稱。</param>
      <param name="annotations">存在於要建立之資料表中的自訂註釋。可以是空白值或空白。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">要建立之資料表的名稱。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Annotations">
      <summary>取得存在於要建立之資料表中的自訂註釋。</summary>
      <returns>存在於要建立之資料表中的自訂註釋。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Columns">
      <summary>取得要包含在新資料表中的資料行。</summary>
      <returns>要包含在新資料表中的資料行。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Inverse">
      <summary>取得要卸除資料表的作業。</summary>
      <returns>要卸除資料表的作業。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.IsDestructiveChange">
      <summary>取得值，指出這項作業是否會造成資料遺失。</summary>
      <returns>如果這項作業可能會造成資料遺失，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Name">
      <summary>取得要建立之資料表的名稱。</summary>
      <returns>要建立之資料表的名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.PrimaryKey">
      <summary>取得或設定新資料表的主索引鍵。</summary>
      <returns>新資料表的主索引鍵。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropColumnOperation">
      <summary>表示正在從資料表中卸除資料行。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>初始化 DropColumnOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">應該從中卸除資料行的資料表名稱。</param>
      <param name="name">要卸除的資料行名稱。</param>
      <param name="removedAnnotations">存在於要卸除之資料行中的自訂註釋。可以是空白值或空白。</param>
      <param name="inverse">表示還原卸除作業的作業。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>初始化 DropColumnOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">應該從中卸除資料行的資料表名稱。</param>
      <param name="name">要卸除的資料行名稱。</param>
      <param name="removedAnnotations">存在於要卸除之資料行中的自訂註釋。可以是空白值或空白。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>初始化 DropColumnOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">應該從中卸除資料行的資料表名稱。</param>
      <param name="name">要卸除的資料行名稱。</param>
      <param name="inverse">表示還原卸除作業的作業。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Object)">
      <summary>初始化 DropColumnOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">應該從中卸除資料行的資料表名稱。</param>
      <param name="name">要卸除的資料行名稱。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Inverse">
      <summary>取得表示還原卸除資料行的作業。系統無法自動計算反向，而且如果沒有提供給建構函式，此屬性將會傳回 null。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.IsDestructiveChange">
      <summary>取得值，指出這項作業是否可能會造成資料遺失。</summary>
      <returns>如果這項作業可能會造成資料遺失，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Name">
      <summary>取得要卸除的資料行名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.RemovedAnnotations">
      <summary>取得存在於要卸除之資料行中的自訂註釋。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Table">
      <summary>取得應該從中卸除資料行的資料表名稱。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation">
      <summary>表示正在從資料表中卸除外部索引鍵限制式。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" /> 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="inverse">表示還原卸除外部索引鍵限制式的作業。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" /> 類別的新執行個體。您也應該填入 PrincipalTable、DependentTable 和 DependentColumns 屬性。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.CreateDropIndexOperation">
      <summary>取得要卸除外部索引鍵資料行之相關聯索引的作業。</summary>
      <returns>要卸除索引的作業。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.Inverse">
      <summary>取得表示還原卸除外部索引鍵限制式的作業。系統無法自動計算反向，而且如果沒有提供給建構函式，此屬性將會傳回 null。</summary>
      <returns>表示還原卸除外部索引鍵限制式的作業。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.IsDestructiveChange">
      <summary>取得值，指出變更是否為破壞性。</summary>
      <returns>如果變更為破壞性，則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropIndexOperation">
      <summary>表示卸除現有的索引。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Object)">
      <summary>初始化 DropIndexOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="inverse">表示還原卸除索引的作業。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Object)">
      <summary>初始化 DropIndexOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.Inverse">
      <summary>取得表示還原卸除索引的作業。系統無法自動計算反向，而且如果沒有提供給建構函式，此屬性將會傳回 null。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.IsDestructiveChange">
      <summary>取得值，指出這項作業是否可能會造成資料遺失。</summary>
      <returns>如果這項作業可能會造成資料遺失，則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation">
      <summary>表示從資料表中卸除主索引鍵。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.#ctor(System.Object)">
      <summary>初始化 DropPrimaryKeyOperation 類別的新執行個體。您也應該填入 Table 和 Columns 屬性。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.CreateTableOperation">
      <summary>更改移轉記錄資料表時使用，便能夠重建資料表而不單只是卸除再加入主索引鍵。</summary>
      <returns>移轉記錄資料表的建立資料表作業。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.Inverse">
      <summary>取得要加入主索引鍵的作業。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropProcedureOperation">
      <summary>從資料庫卸除預存程序。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropProcedureOperation.#ctor(System.String,System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" /> 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">要卸除的預存程序名稱。</param>
      <param name="anonymousArguments">請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.Inverse">
      <summary>取得將會還原此作業的作業。一律傳回 <see cref="T:System.Data.Entity.Migrations.Model.NotSupportedOperation" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.IsDestructiveChange">
      <summary>取得值，指出這項作業是否會造成資料遺失。一律傳回 false。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.Name">
      <summary>取得要卸除之預存程序的名稱。</summary>
      <returns>要卸除的預存程序名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropTableOperation">
      <summary>表示卸除現有的資料表。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>初始化 DropTableOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">要卸除的資料表名稱。</param>
      <param name="removedAnnotations">存在於要卸除之資料表中的自訂註釋。可以是空白值或空白。</param>
      <param name="removedColumnAnnotations">存在於要卸除的資料表之資料行中的自訂註釋。可以是空白值或空白。</param>
      <param name="inverse">表示還原卸除資料表的作業。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>初始化 DropTableOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">要卸除的資料表名稱。</param>
      <param name="removedAnnotations">存在於要卸除之資料表中的自訂註釋。可以是空白值或空白。</param>
      <param name="removedColumnAnnotations">存在於要卸除的資料表之資料行中的自訂註釋。可以是空白值或空白。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>初始化 DropTableOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">要卸除的資料表名稱。</param>
      <param name="inverse">表示還原卸除資料表的作業。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Object)">
      <summary>初始化 DropTableOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">要卸除的資料表名稱。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Inverse">
      <summary>取得表示還原卸除資料表的作業。系統無法自動計算反向，而且如果沒有提供給建構函式，此屬性將會傳回 null。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.IsDestructiveChange">
      <summary>取得值，指出此作業是否可能會造成資料遺失。</summary>
      <returns>如果此作業可能會造成資料遺失，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Name">
      <summary>取得要卸除之資料表的名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.RemovedAnnotations">
      <summary>取得存在於要卸除之資料表中的自訂註釋。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.RemovedColumnAnnotations">
      <summary>取得存在於要卸除的資料表之資料行中的自訂註釋。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ForeignKeyOperation">
      <summary>影響外部索引鍵限制式之變更的基底類別。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ForeignKeyOperation.#ctor(System.Object)">
      <summary>初始化 ForeignKeyOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentColumns">
      <summary>外部索引鍵資料行的名稱。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentTable">
      <summary>取得或設定外部索引鍵資料行所在之資料表的名稱。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.HasDefaultName">
      <summary>取得值，指出是否已經針對此外部索引鍵限制式提供特定名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.Name">
      <summary>取得或設定此外部索引鍵限制式的名稱。如果沒有提供名稱，則會計算預設名稱。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.PrincipalTable">
      <summary>取得或設定外部索引鍵限制式設為目標之資料表的名稱。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.HistoryOperation">
      <summary>表示對移轉記錄資料表進行 DML 變更的作業。移轉記錄資料表是用來儲存已經套用至資料庫的移轉記錄。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.HistoryOperation.#ctor(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree},System.Object)">
      <summary>初始化 HistoryOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="commandTrees">一連串的命令樹，表示套用到記錄資料表的作業。</param>
      <param name="anonymousArguments">請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.CommandTrees">
      <summary>一連串的命令，表示套用到記錄資料表的作業。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.IsDestructiveChange">
      <summary>取得值，指出這項作業是否可能會造成資料遺失。</summary>
      <returns>如果這項作業可能會造成資料遺失，則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.IndexOperation">
      <summary>影響索引之作業的通用基底類別。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.#ctor(System.Object)">
      <summary>初始化 IndexOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.BuildDefaultName(System.Collections.Generic.IEnumerable{System.String})">
      <summary>根據指定的資料行名稱建立預設索引名稱。</summary>
      <returns>預設索引名稱。</returns>
      <param name="columns">用來建立預設索引名稱的資料行名稱。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Columns">
      <summary>取得進行索引的資料行。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.HasDefaultName">
      <summary>取得值，指出是否已經針對此索引提供特定名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Name">
      <summary>取得或設定此索引的名稱。如果沒有提供名稱，則會計算預設名稱。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Table">
      <summary>取得或設定索引所屬的資料表。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MigrationOperation">
      <summary>表示要修改資料結構描述的作業。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MigrationOperation.#ctor(System.Object)">
      <summary>初始化 MigrationOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="anonymousArguments">請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.AnonymousArguments">
      <summary>取得提供者可處理的其他引數。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.Inverse">
      <summary>取得將會還原此作業的作業。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.IsDestructiveChange">
      <summary>取得值，指出這項作業是否會造成資料遺失。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation">
      <summary>表示將預存程序移至資料庫中的新結構描述。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" /> 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">要移動的預存程序名稱。</param>
      <param name="newSchema">預存程序的新結構描述。</param>
      <param name="anonymousArguments">請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.Inverse">
      <summary>取得將會還原此作業的作業。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.IsDestructiveChange">
      <summary>取得值，指出這項作業是否會造成資料遺失。一律傳回 false。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.Name">
      <summary>取得要移動之預存程序的名稱。</summary>
      <returns>要移動的預存程序名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.NewSchema">
      <summary>取得預存程序的新結構描述。</summary>
      <returns>預存程序的新結構描述。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveTableOperation">
      <summary>表示將資料表從某個結構描述移至另一個結構描述。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>初始化 MoveTableOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">要移動之資料表的名稱。</param>
      <param name="newSchema">要移動資料表之目標結構描述的名稱。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.ContextKey">
      <summary>更改移轉記錄資料表時使用，便能夠將資料移至新的資料表。</summary>
      <returns>模型的內容索引鍵。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.CreateTableOperation">
      <summary>更改移轉記錄資料表時使用，便能夠重建資料表而不單只是卸除再加入主索引鍵。</summary>
      <returns>移轉記錄資料表的建立資料表作業。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Inverse">
      <summary>取得將資料表移回其原始結構描述的作業。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsDestructiveChange">
      <summary>取得值，指出此變更是否會導致資料遺失。</summary>
      <returns>如果此變更會導致資料遺失，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsSystem">
      <summary>取得值，此值表示資料表是否為系統資料表。</summary>
      <returns>如果資料表是系統資料表則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Name">
      <summary>取得要移動之資料表的名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.NewSchema">
      <summary>取得要移動資料表之目標結構描述的名稱。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.NotSupportedOperation">
      <summary>表示無法執行的移轉作業，其原因可能是目標資料庫提供者不支援該作業。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.NotSupportedOperation.IsDestructiveChange">
      <summary>取得值，指出這項作業是否會造成資料遺失。一律傳回 false。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ParameterModel">
      <summary>表示參數的相關資訊。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ParameterModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>初始化具有指定類型之 ParameterModel 類別的新執行個體。</summary>
      <param name="type">此參數的資料類型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ParameterModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>使用指定的類型和類型使用情況，初始化 ParameterModel 類別的新執行個體。</summary>
      <param name="type">此參數的資料類型。</param>
      <param name="typeUsage">關於資料類型的其他詳細資料。這包括最大長度、Null 屬性等詳細資料。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ParameterModel.IsOutParameter">
      <summary>取得或設定值，指出此執行個體是否為輸出參數。</summary>
      <returns>若此執行個體為輸出參數，則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PrimaryKeyOperation">
      <summary>表示影響主索引鍵之作業的通用基底類別。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.#ctor(System.Object)">
      <summary>初始化 PrimaryKeyOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.BuildDefaultName(System.String)">
      <summary>傳回主索引鍵的預設名稱。</summary>
      <returns>預設的主索引鍵名稱。</returns>
      <param name="table">目標資料表名稱。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Columns">
      <summary>取得組成主索引鍵的資料行。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.HasDefaultName">
      <summary>取得值，指出是否已經針對此主索引鍵提供特定名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.IsDestructiveChange">
      <summary>取得值，指出這項作業是否可能會造成資料遺失。</summary>
      <returns>如果這項作業可能會造成資料遺失，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Name">
      <summary>取得或設定此主索引鍵的名稱。如果沒有提供名稱，則會計算預設名稱。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Table">
      <summary>取得或設定包含主索引鍵之資料表的名稱。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ProcedureOperation">
      <summary>會影響預存程序的移轉作業。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.ProcedureOperation" /> 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">預存程序 (Stored Procedure) 的名稱。</param>
      <param name="bodySql">以 SQL 表示之預存程序的主體。</param>
      <param name="anonymousArguments">請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.BodySql">
      <summary>取得以 SQL 表示之預存程序的主體。</summary>
      <returns>以 SQL 表示之預存程序的主體。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.IsDestructiveChange">
      <summary>取得值，指出這項作業是否會造成資料遺失。一律傳回 false。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.Name">
      <summary>取得預存程序的名稱。</summary>
      <returns>預存程序 (Stored Procedure) 的名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.Parameters">
      <summary>取得預存程序的參數。</summary>
      <returns>預存程序的參數。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PropertyModel">
      <summary>表示實體之屬性的相關資訊。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PropertyModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>初始化 PropertyModel 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="type">此屬性模型的資料類型。</param>
      <param name="typeUsage">關於資料類型的其他詳細資料。這包括最大長度、Null 屬性等詳細資料。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.DefaultValue">
      <summary>取得或設定要當做此屬性模型之預設值使用的常數值。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.DefaultValueSql">
      <summary>取得或設定當做此屬性模型之預設值使用的 SQL 運算式。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.IsFixedLength">
      <summary>取得或設定值，此值表示此屬性模型的長度是否固定。只對陣列資料類型有效。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.IsUnicode">
      <summary>取得或設定值，此值表示此屬性模型是否支援 Unicode 字元。只對文字資料類型有效。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.MaxLength">
      <summary>取得或設定此屬性模型的長度上限。只對陣列資料類型有效。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Name">
      <summary>取得或設定屬性模型的名稱。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Precision">
      <summary>取得或設定此屬性模型的有效位數。只對十進位資料類型有效。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Scale">
      <summary>取得或設定此屬性模型的小數位數。只對十進位資料類型有效。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.StoreType">
      <summary>取得或設定要用於此屬性模型的提供者特有資料類型。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Type">
      <summary>取得此屬性模型的資料類型。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.TypeUsage">
      <summary>取得有關此屬性模型之資料類型的其他詳細資料。這包括最大長度、Null 屬性等詳細資料。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameColumnOperation">
      <summary>表示重新命名現有的資料行。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameColumnOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>初始化 RenameColumnOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="table">資料行所屬之資料表的名稱。</param>
      <param name="name">要重新命名之資料行的名稱。</param>
      <param name="newName">資料行的新名稱。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Inverse">
      <summary>取得還原重新命名的作業。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.IsDestructiveChange">
      <summary>取得值，指出這項作業是否可能會造成資料遺失。</summary>
      <returns>如果這項作業可能會造成資料遺失，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Name">
      <summary>取得要重新命名的資料行名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.NewName">
      <summary>取得資料行的新名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Table">
      <summary>取得資料行所屬之資料表的名稱。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameIndexOperation">
      <summary>表示重新命名現有索引的作業。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameIndexOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>初始化 RenameIndexOperation 類別的新執行個體。</summary>
      <param name="table">索引所屬資料表的名稱。</param>
      <param name="name">要重新命名的索引名稱。</param>
      <param name="newName">索引的新名稱。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Inverse">
      <summary>取得還原索引舊名稱的作業。</summary>
      <returns>還原索引舊名稱的作業。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.IsDestructiveChange">
      <summary>取得重新命名索引是否會破壞作業。</summary>
      <returns>若重新命名索引會破壞作業，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Name">
      <summary>取得要重新命名之索引的名稱。</summary>
      <returns>要重新命名的索引名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.NewName">
      <summary>取得索引的新名稱。</summary>
      <returns>索引的新名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Table">
      <summary>取得索引所屬之資料表的名稱。</summary>
      <returns>索引所屬資料表的名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation">
      <summary>表示重新命名資料庫中的預存程序。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" /> 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">要重新命名的預存程序名稱。</param>
      <param name="newName">預存程序的新名稱。</param>
      <param name="anonymousArguments">請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.Inverse">
      <summary>取得將會還原此作業的作業。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.IsDestructiveChange">
      <summary>取得值，指出這項作業是否會造成資料遺失。一律傳回 false。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.Name">
      <summary>取得要重新命名的預存程序名稱。</summary>
      <returns>要重新命名的預存程序名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.NewName">
      <summary>取得預存程序的新名稱。</summary>
      <returns>預存程序的新名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameTableOperation">
      <summary>表示重新命名現有的資料表。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>初始化 RenameTableOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="name">要重新命名之資料表的名稱。</param>
      <param name="newName">資料表的新名稱。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Inverse">
      <summary>取得還原重新命名的作業。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.IsDestructiveChange">
      <summary>取得值，指出此變更是否為破壞性。</summary>
      <returns>如果此變更為破壞性，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Name">
      <summary>取得要重新命名之資料表的名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.NewName">
      <summary>取得資料表的新名稱。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.SqlOperation">
      <summary>表示要直接對目標資料庫執行的提供者特有 SQL 陳述式。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.SqlOperation.#ctor(System.String,System.Object)">
      <summary>初始化 SqlOperation 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="sql">要執行的 SQL。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名類型語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.IsDestructiveChange">
      <summary>取得值，指出這項作業是否可能會造成資料遺失。</summary>
      <returns>如果這項作業可能會造成資料遺失，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.Sql">
      <summary>取得要執行的 SQL。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.SuppressTransaction">
      <summary>取得或設定值，指出是否應該在用來讓移轉處理序可交易的交易範圍以外執行此陳述式。如果設定為 true，系統就不會在移轉處理序失敗時回復此作業。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation">
      <summary>在撰寫更新資料庫作業的指令碼時使用，方便儲存已對資料庫執行的作業。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.#ctor(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree})">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation" /> 類別的新執行個體。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="historyQueryTrees">用來判斷這項移轉是否必須套用至資料庫的查詢。這是用來產生可針對任何版本之資料庫執行的等冪 SQL 指令碼。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.AddMigration(System.String,System.Collections.Generic.IList{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary>將移轉加入至此更新資料庫作業。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <param name="migrationId">移轉的識別碼。</param>
      <param name="operations">移轉所套用的個別作業。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.HistoryQueryTrees">
      <summary>用來判斷這項移轉是否必須套用至資料庫的查詢。這是用來產生可針對任何版本之資料庫執行的等冪 SQL 指令碼。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.IsDestructiveChange">
      <summary>取得值，此值表示是否有任何作業會造成資料遺失。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migrations">
      <summary>取得在更新資料庫作業期間套用的移轉。</summary>
      <returns>在更新資料庫作業期間套用的移轉。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration">
      <summary>表示要套用至資料庫的移轉。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration.MigrationId">
      <summary>取得移轉的識別碼。</summary>
      <returns>移轉的識別碼。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration.Operations">
      <summary>取得此移轉所套用的個別作業。</summary>
      <returns>此移轉所套用的個別作業。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator">
      <summary>將無從驗證提供者之移轉作業轉換成資料庫提供者特有 SQL 命令的提供者的通用基底類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.BuildStoreTypeUsage(System.String,System.Data.Entity.Migrations.Model.PropertyModel)">
      <summary>從指定的 <paramref name="propertyModel" /> 使用 Facet 為指定的 <paramref name="storeTypeName" /> 建置存放區類型使用情況。</summary>
      <returns>存放區專屬 TypeUsage</returns>
      <param name="storeTypeName">存放區類型的名稱。</param>
      <param name="propertyModel">目標屬性。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>將一組移轉作業轉換成資料庫提供者特有的 SQL。</summary>
      <returns>為了進行移轉作業所執行的 SQL 陳述式清單。</returns>
      <param name="migrationOperations">要轉換的作業。</param>
      <param name="providerManifestToken">表示設為目標之資料庫版本的語彙基元。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.GenerateProcedureBody(System.Collections.Generic.ICollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree},System.String,System.String)">
      <summary>產生預存程序的 SQL 本文。</summary>
      <returns>預存程序的 SQL 本文。</returns>
      <param name="commandTrees">表示插入、更新或刪除作業等命令的命令樹。</param>
      <param name="rowsAffectedParameter">受影響資料列參數名稱。</param>
      <param name="providerManifestToken">提供者資訊清單語彙基元。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.ProviderManifest">
      <summary>取得或設定提供者資訊清單。</summary>
      <returns>提供者資訊清單。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationStatement">
      <summary>表示已經轉譯成 SQL 陳述式的移轉作業。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationStatement.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Sql.MigrationStatement" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.BatchTerminator">
      <summary>取得或設定資料庫提供者的批次結束字元。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
      <returns>資料庫提供者的批次結束字元。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.Sql">
      <summary>取得或設定為了進行此移轉作業所執行的 SQL。Entity Framework 移轉應用程式開發介面的設計不適合接受由未受信任來源 (例如應用程式的使用者) 所提供的輸入。如果接受了來自這類來源的輸入，即應先對輸入進行驗證再傳遞至這些應用程式開發介面，以防範 SQL 插入式攻擊等風險。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.SuppressTransaction">
      <summary>取得或設定值，指出是否應該在用來讓移轉處理序可交易的交易範圍以外執行此陳述式。如果設定為 true，系統就不會在移轉處理序失敗時回復此作業。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter">
      <summary>與 <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> 相同但在部分信任下運作，而且還會明確快取所產生的縮排字串並將只含有 \r\n 或 \n 的寫入字串辨識為 WriteLine 字元以確保適當縮排下一行。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>使用指定的文字寫入器和預設的定位點字串，初始化 IndentedTextWriter 類別的新執行個體。請注意，傳遞至此建構函式的寫入器必須使用 <see cref="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture" /> 屬性所指定的 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <param name="writer">要用於輸出的 <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>使用指定的文字寫入器和定位點字串，初始化 IndentedTextWriter 類別的新執行個體。請注意，傳遞至此建構函式的寫入器必須使用 <see cref="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture" /> 屬性所指定的 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <param name="writer">要用於輸出的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="tabString">要用於縮排的定位點字串。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Close">
      <summary>關閉正在寫入的文件。</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture">
      <summary>指定基礎 TextWriter 將會使用的文化特性。此靜態屬性為唯讀。請注意，任何傳遞至 <see cref="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter" /> 其中一個建構函式的寫入器都必須使用與此相同的文化特性。文化特性是 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.CurrentIndentation">
      <summary>建置字串代表新行目前的縮排層次。</summary>
      <returns>空字串或縮排層次相當於指定之定位點字串的字串。</returns>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.DefaultTabString">
      <summary>指定預設的定位點字串。此欄位是常數。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Encoding">
      <summary>取得要使用的文字寫入器編碼方式。</summary>
      <returns>
        <see cref="T:System.Text.Encoding" />，表示要使用的文字寫入器的編碼方式。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Flush">
      <summary>清除資料流。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Indent">
      <summary>取得或設定要縮排的空格數。</summary>
      <returns>要縮排的空格數。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.InnerWriter">
      <summary>取得要使用的 <see cref="T:System.IO.TextWriter" />。</summary>
      <returns>要使用的 <see cref="T:System.IO.TextWriter" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.NewLine">
      <summary>取得或設定要使用的新行字元。</summary>
      <returns>要使用的新行字元。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.OutputTabs">
      <summary>根據 <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" /> 屬性，針對每一層縮排輸出定位點字串一次。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Boolean)">
      <summary>將布林值的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的布林值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char)">
      <summary>將字元寫入文字資料流。</summary>
      <param name="value">要寫入的字元。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[])">
      <summary>將字元陣列寫入文字資料流。</summary>
      <param name="buffer">要寫入的字元陣列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>將字元的子陣列寫入文字資料流。</summary>
      <param name="buffer">要寫入資料的來源字元陣列。</param>
      <param name="index">緩衝區中的起始索引。</param>
      <param name="count">要寫入的字元數。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Double)">
      <summary>將 Double 的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的 Double。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int32)">
      <summary>將整數的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的整數。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int64)">
      <summary>將 8 位元組整數的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的 8 位元組整數。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Object)">
      <summary>將物件的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Single)">
      <summary>將 Single 的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的 Single。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String)">
      <summary>將指定的字串寫入文字資料流。</summary>
      <param name="value">要寫入的字串。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>使用與指定語意相同的語意來寫出格式化字串。</summary>
      <param name="format">格式化字串。</param>
      <param name="arg0">要寫入格式化字串的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>使用與指定語意相同的語意來寫出格式化字串。</summary>
      <param name="format">要使用的格式化字串。</param>
      <param name="arg0">要寫入格式化字串的第一個物件。</param>
      <param name="arg1">要寫入格式化字串的第二個物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>使用與指定語意相同的語意來寫出格式化字串。</summary>
      <param name="format">要使用的格式化字串。</param>
      <param name="arg">要輸出的引數陣列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine">
      <summary>寫入行結束字元。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>依序將布林值的文字表示以及行結束字元寫入文字資料流。</summary>
      <param name="value">要寫入的布林值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char)">
      <summary>依序將字元以及行結束字元寫入文字資料流。</summary>
      <param name="value">要寫入的字元。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>依序將字元陣列以及行結束字元寫入文字資料流。</summary>
      <param name="buffer">要寫入的字元陣列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>依序將字元的子陣列以及行結束字元寫入文字資料流。</summary>
      <param name="buffer">要寫入資料的來源字元陣列。</param>
      <param name="index">緩衝區中的起始索引。</param>
      <param name="count">要寫入的字元數。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Double)">
      <summary>依序將 Double 的文字表示以及行結束字元寫入文字資料流。</summary>
      <param name="value">要寫入的 Double。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>依序將整數的文字表示以及行結束字元寫入文字資料流。</summary>
      <param name="value">要寫入的整數。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>依序將 8 位元組整數的文字表示以及行結束字元寫入文字資料流。</summary>
      <param name="value">要寫入的 8 位元組整數。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Object)">
      <summary>依序將物件的文字表示以及行結束字元寫入文字資料流。</summary>
      <param name="value">要寫入的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Single)">
      <summary>依序將 Single 的文字表示以及行結束字元寫入文字資料流。</summary>
      <param name="value">要寫入的 Single。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String)">
      <summary>依序將指定的字串以及行結束字元寫入文字資料流。</summary>
      <param name="value">要寫入的字串。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>使用與指定語意相同的語意，依序寫出格式化字串以及行結束字元。</summary>
      <param name="format">格式化字串。</param>
      <param name="arg0">要寫入格式化字串的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>使用與指定語意相同的語意，依序寫出格式化字串以及行結束字元。</summary>
      <param name="format">要使用的格式化字串。</param>
      <param name="arg0">要寫入格式化字串的第一個物件。</param>
      <param name="arg1">要寫入格式化字串的第二個物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>使用與指定語意相同的語意，依序寫出格式化字串以及行結束字元。</summary>
      <param name="format">要使用的格式化字串。</param>
      <param name="arg">要輸出的引數陣列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>依序將 UInt32 的文字表示以及行結束字元寫入文字資料流。</summary>
      <param name="value">要輸出的 UInt32。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>將指定的字串寫入沒有定位點的一行。</summary>
      <param name="value">要寫入的字串。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1">
      <summary>允許針對模型中的複雜類型執行組態。可以透過 <see cref="T:System.Data.Entity.DbModelBuilder" /> 的 ComplexType 方法來取得 ComplexTypeConfiguration，或是透過 <see cref="T:System.Data.Entity.DbModelBuilder" /> 的 Configurations 屬性來註冊衍生自 ComplexTypeConfiguration 的自訂類型。</summary>
      <typeparam name="TComplexType">要設定的複雜類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.#ctor">
      <summary>初始化 ComplexTypeConfiguration 的新執行個體</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">要與指定物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetHashCode">
      <summary>做為特定類型的雜湊函式。</summary>
      <returns>特定類型的雜湊函數。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetType">
      <summary>取得目前執行個體的類型。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>從模型中排除屬性，好讓它不會對應到資料庫。</summary>
      <returns>相同的 ComplexTypeConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="TProperty">要忽略之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1">
      <summary>允許針對模型中的實體類型執行組態。可以透過 <see cref="T:System.Data.Entity.DbModelBuilder" /> 的 Entity 方法來取得 EntityTypeConfiguration，或是透過 <see cref="T:System.Data.Entity.DbModelBuilder" /> 的 Configurations 屬性來註冊衍生自 EntityTypeConfiguration 的自訂類型。</summary>
      <typeparam name="TEntityType">正在設定的實體類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.#ctor">
      <summary>初始化 EntityTypeConfiguration 的新執行個體</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)">
      <summary>傳回指定的組態模型是否等於目前的組態模型。</summary>
      <returns>如果指定的組態模型等於目前的組態模型，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件比較的模型。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetHashCode">
      <summary>傳回指定之組態模型的雜湊函數。</summary>
      <returns>指定之模型產生器的雜湊函式。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetType">
      <summary>取得目前模型組態的類型。</summary>
      <returns>目前模型組態的類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary>設定要用於此實體類型的實體集名稱。只能針對每一個實體集中的基底類型設定實體集名稱。</summary>
      <returns>相同的 EntityTypeConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="entitySetName">實體集的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>為此實體類型設定主索引鍵屬性。</summary>
      <returns>相同的 EntityTypeConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="keyExpression">Lambda 運算式，表示要當做主索引鍵使用的屬性。C#:t =&amp;gt; t.Id VB.Net:Function(t) t.Id。若主索引鍵由多個屬性組成，請指定匿名類型 (包括屬性)。C#:t =&amp;gt; new { t.Id1, t.Id2 } VB.Net:Function(t) New With { t.Id1, t.Id2 }</param>
      <typeparam name="TKey">索引鍵的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>從此實體類型設定 many 關聯性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression">Lambda 運算式，表示關聯性的導覽屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">關聯性另一端之實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>從此實體類型設定 optional 關聯性。此實體類型的執行個體將能夠儲存到資料庫中，而不必指定此關聯性。資料庫中的外部索引鍵可為 Null。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression">Lambda 運算式，表示關聯性的導覽屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">關聯性另一端之實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>從此實體類型設定 required 關聯性。此實體類型的執行個體將無法儲存到資料庫中，除非指定此關聯性。資料庫中的外部索引鍵不可為 Null。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression">Lambda 運算式，表示關聯性的導覽屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">關聯性另一端之實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>在模型中針對此實體的對應資料表設定註釋。此註釋值可以在稍後處理資料表 (例如建立移轉) 時使用。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="name">註釋名稱，此名稱必須是有效的 C#/EDM 識別項。</param>
      <param name="value">註釋值，此值可以是字串或可透過 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的其他類型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>從模型中排除屬性，好讓它不會對應到資料庫。</summary>
      <returns>相同的 EntityTypeConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="TProperty">要忽略之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map``1(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{``0}})">
      <summary>允許有關衍生實體類型如何對應到資料庫結構描述的進階組態設定。對 Map 的呼叫會加總，後續的呼叫將不會覆寫已透過 Map 執行的組態。</summary>
      <returns>相同的 EntityTypeConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="derivedTypeMapConfigurationAction">針對 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> 執行組態的動作。</param>
      <typeparam name="TDerived">要設定的衍生實體類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{`0}})">
      <summary>允許有關此實體類型如何對應到資料庫結構描述的進階組態設定。根據預設，任何組態也會套用到衍生自此實體類型的任何類型。若要設定衍生類型，可以透過會設定衍生類型的 Map 多載，或是經由使用衍生類型的 EntityTypeConfiguration。可以使用多個 Map 呼叫，在多個資料表之間分割實體的屬性。對 Map 的呼叫會加總，後續的呼叫將不會覆寫已透過 Map 執行的組態。</summary>
      <returns>相同的 EntityTypeConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="entityMappingConfigurationAction">針對 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> 執行組態的動作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.MapToStoredProcedures">
      <summary>設定此類型以使用預存程序執行插入、更新和刪除。將會使用程序和參數名稱的預設慣例。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration{`0}})">
      <summary>設定此類型以使用預存程序執行插入、更新和刪除。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="modificationStoredProcedureMappingConfigurationAction">要覆寫程序和參數名稱之預設慣例的組態。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToString">
      <summary>傳回模型組態的字串表示法。</summary>
      <returns>模型產生器的字串表示法。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String)">
      <summary>設定此實體類型所對應的資料表名稱。</summary>
      <returns>相同的 EntityTypeConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="tableName">資料表的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary>設定此實體類型所對應的資料表名稱。</summary>
      <returns>相同的 EntityTypeConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="tableName">資料表的名稱。</param>
      <param name="schemaName">資料表的資料庫結構描述。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ModelValidationException">
      <summary>當產生無效的模型時，<see cref="T:System.Data.Entity.DbModelBuilder" /> 在模型建立期間所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor">
      <summary>初始化 ModelValidationException 的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資訊與資料流內容，初始化 <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" /> 類別的新執行個體。</summary>
      <param name="info">序列化資訊。</param>
      <param name="context">資料流內容。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String)">
      <summary>初始化 ModelValidationException 的新執行個體。</summary>
      <param name="message">例外狀況訊息。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String,System.Exception)">
      <summary>初始化 ModelValidationException 的新執行個體。</summary>
      <param name="message">例外狀況訊息。</param>
      <param name="innerException">內部例外狀況。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration">
      <summary>用來執行關聯性之組態的基底類別。此組態功能是透過 Code First Fluent 應用程式開發介面所取得，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1">
      <summary>允許針對用以修改關聯性的預存程序執行組態。</summary>
      <typeparam name="TEntityType">要設定其關聯性之實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
      <typeparam name="TProperty">此屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
      <typeparam name="TProperty">此屬性的類型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration">
      <summary>用來設定實體類型或複雜類型的 <see cref="T:System.byte[]" /> 屬性。此組態功能是透過 Code First Fluent 應用程式開發介面所取得，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>在模型中設定用來儲存屬性之資料庫資料行的註釋。此註釋值可以在稍後處理資料行 (例如建立移轉) 時使用。</summary>
      <returns>相同的 BinaryPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="name">註釋名稱，此名稱必須是有效的 C#/EDM 識別項。</param>
      <param name="value">註釋值，此值可以是字串或可透過 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的其他類型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnName(System.String)">
      <summary>設定用來儲存此屬性的資料庫資料行名稱。</summary>
      <returns>相同的 BinaryPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnName">資料行名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>設定用來儲存此屬性之資料庫資料行的順序。當實體類型有複合索引鍵時，此方法也會用來指定索引鍵排序。</summary>
      <returns>相同的 BinaryPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnOrder">此資料行應該出現在資料庫資料表中的順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnType(System.String)">
      <summary>設定用來儲存此屬性之資料庫資料行的資料類型。</summary>
      <returns>相同的 BinaryPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnType">資料庫提供者特有的資料類型名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>設定資料庫如何產生此屬性的值。</summary>
      <returns>相同的 BinaryPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="databaseGeneratedOption">用來針對資料庫中的屬性產生值的模式。設定為 'null' 表示將視屬性的類型、它在模型中的語意 (處理主索引鍵的方式不同) 以及所使用的慣例集合而定，使用預設選項「無」、「識別」或「計算」。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>設定此屬性具有指定的最大長度。</summary>
      <returns>相同的 BinaryPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="value">此屬性的最大長度。設定 'null' 將會從此屬性中移除任何最大長度限制。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken">
      <summary>設定此屬性當做開放式並行存取 Token 使用。</summary>
      <returns>相同的 BinaryPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>設定此屬性是否當做開放式並行存取 Token 使用。</summary>
      <returns>相同的 BinaryPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="concurrencyToken">指出此屬性是否為並行 Token 的值。指定 'null' 將會從此屬性中移除並行 Token Facet。指定 'null' 將會產生與指定 'false' 相同的執行階段行為。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsFixedLength">
      <summary>設定此屬性具有固定長度。使用 HasMaxLength 設定此屬性的固定長度。</summary>
      <returns>相同的 BinaryPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsMaxLength">
      <summary>設定此屬性允許資料庫提供者支援的最大長度。</summary>
      <returns>相同的 BinaryPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsOptional">
      <summary>將此屬性設定為 optional。用來儲存此屬性的資料庫資料行將會是 nullable。<see cref="T:System.byte[]" /> 屬性預設為選擇項。</summary>
      <returns>相同的 BinaryPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRequired">
      <summary>將此屬性設定為 required。用來儲存此屬性的資料庫資料行將不會是 nullable。</summary>
      <returns>相同的 BinaryPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRowVersion">
      <summary>設定此屬性為資料庫中的資料列版本。實際資料類型將會根據使用的資料庫提供者而異。將此屬性設定為資料列版本會自動將它設定為開放式並行存取 Token。</summary>
      <returns>相同的 BinaryPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsVariableLength">
      <summary>設定此屬性具有變動長度。根據預設，<see cref="T:System.byte[]" /> 屬性具有變動長度。</summary>
      <returns>相同的 BinaryPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration">
      <summary>設定可以支援串聯刪除功能的關聯性。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetHashCode">
      <summary>做為特定類型的雜湊函式。</summary>
      <returns>目前類型的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete">
      <summary>針對關聯性設定串聯刪除為啟用狀態。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete(System.Boolean)">
      <summary>針對關聯性設定串聯刪除是否為啟用狀態。</summary>
      <param name="value">指出串聯刪除是否為開啟的值。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar">
      <summary>允許向 <see cref="T:System.Data.Entity.DbModelBuilder" /> 註冊實體和複雜類型的衍生組態類別。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration{``0})">
      <summary>將 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> 加入至 <see cref="T:System.Data.Entity.DbModelBuilder" />。只能針對模型中的每一個類型加入一個 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" />。</summary>
      <returns>相同的 ConfigurationRegistrar 執行個體，以便鏈結多個呼叫。</returns>
      <param name="complexTypeConfiguration">要加入的複雜類型組態</param>
      <typeparam name="TComplexType">正在設定的複雜類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0})">
      <summary>將 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> 加入至 <see cref="T:System.Data.Entity.DbModelBuilder" />。只能針對模型中的每一個類型加入一個 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" />。</summary>
      <returns>相同的 ConfigurationRegistrar 執行個體，以便鏈結多個呼叫。</returns>
      <param name="entityTypeConfiguration">要加入的實體類型組態。</param>
      <typeparam name="TEntityType">正在設定的實體類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.AddFromAssembly(System.Reflection.Assembly)">
      <summary>探索給定組件中繼承自 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> 或 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> 的所有類型，並將所發現的每個類型的執行個體加入至此登錄器。</summary>
      <returns>相同的 ConfigurationRegistrar 執行個體，以便鏈結多個呼叫。</returns>
      <param name="assembly">包含要加入之模型組態的組件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetHashCode">
      <summary>做為特定類型的雜湊函式。</summary>
      <returns>目前物件的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration">
      <summary>建立慣例以設定預存程序用來刪除資料庫中的實體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Equals(System.Object)">
      <summary>指定此執行個體是否等於特定物件。</summary>
      <returns>若此執行個體等於特定物件，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.GetHashCode">
      <summary>取得與此執行個體相關聯的雜湊碼。</summary>
      <returns>與此執行個體相關聯的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.GetType">
      <summary>取得此執行個體的基礎類型。</summary>
      <returns>此執行個體的基礎類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>設定預存程序的名稱。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="procedureName">預存程序名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>設定預存程序的名稱。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="procedureName">預存程序名稱。</param>
      <param name="schemaName">結構描述名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyInfo">將要設定參數的屬性。</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyName">將要設定參數的屬性其名稱。</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.RowsAffectedParameter(System.String)">
      <summary>設定要傳回受此預存程序影響之資料列的輸出參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.ToString">
      <summary>傳回此執行個體的字串表示。</summary>
      <returns>此執行個體的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration">
      <summary>建立慣例以設定預存程序用來插入實體至資料庫。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的執行個體。</summary>
      <returns>如果指定的物件等於目前的執行個體，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.GetHashCode">
      <summary>取得目前執行個體的雜湊碼。</summary>
      <returns>目前執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.GetType">
      <summary>取得與此組態相關聯的類型。</summary>
      <returns>與此組態相關聯的類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>設定預存程序的名稱。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="procedureName">預存程序名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>設定預存程序的名稱。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="procedureName">預存程序名稱。</param>
      <param name="schemaName">結構描述名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyInfo">將要設定參數的屬性。</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyName">將要設定參數的屬性其名稱。</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Result(System.Reflection.PropertyInfo,System.String)">
      <summary>設定供此預存程序對應至屬性的結果資料行。這是用於資料庫所產生的資料行。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyInfo">將要設定結果的屬性。</param>
      <param name="columnName">結果資料行的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Result(System.String,System.String)">
      <summary>設定供此預存程序對應至屬性的結果資料行。這是用於資料庫所產生的資料行。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyName">將要設定結果的屬性其名稱。</param>
      <param name="columnName">結果資料行的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.ToString">
      <summary>傳回此執行個體的字串表示。</summary>
      <returns>此執行個體的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProcedureConfiguration">
      <summary>表示設定用來修改資料庫中實體之預存程序的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration">
      <summary>建立慣例以設定預存程序用來修改資料庫中的實體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration})">
      <summary>設定預存程序用以刪除實體。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="modificationStoredProcedureConfigurationAction">執行預存程序組態的 Lambda 運算式。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Equals(System.Object)">
      <summary>指定此組態是否等於特定物件。</summary>
      <returns>若此組態等於特定物件，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.GetHashCode">
      <summary>取得與此組態相關聯的雜湊碼。</summary>
      <returns>與此組態相關聯的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration})">
      <summary>設定預存程序用以插入實體。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="modificationStoredProcedureConfigurationAction">執行預存程序組態的 Lambda 運算式。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.ToString">
      <summary>傳回 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration" /> 類別的字串表示。</summary>
      <returns>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration" /> 類別的字串表示。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Update(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration})">
      <summary>設定預存程序用以更新實體。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="modificationStoredProcedureConfigurationAction">執行預存程序組態的 Lambda 運算式。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration">
      <summary>表示實體類型或複雜類型的基本屬性。</summary>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ClrPropertyInfo">
      <summary>取得此屬性的 <see cref="T:System.Reflection.PropertyInfo" />。</summary>
      <returns>此屬性的 <see cref="T:System.Reflection.PropertyInfo" />。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.Equals(System.Object)">
      <summary>指定此執行個體是否等於另一個物件。</summary>
      <returns>如果此執行個體等於另一個物件，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.GetHashCode">
      <summary>取得此執行個體的雜湊碼。</summary>
      <returns>此執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>在模型中設定用來儲存屬性之資料庫資料行的註釋。此註釋值可以在稍後處理資料行 (例如建立移轉) 時使用。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="name">註釋名稱，此名稱必須是有效的 C#/EDM 識別項。</param>
      <param name="value">註釋值，此值可以是字串或可透過 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的其他類型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary>設定用來儲存此屬性的資料庫資料行名稱。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行個體。</returns>
      <param name="columnName">資料行名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnOrder(System.Int32)">
      <summary>設定用來儲存此屬性之資料庫資料行的順序。當實體類型有複合索引鍵時，此方法也會用來指定索引鍵排序。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行個體。</returns>
      <param name="columnOrder">此資料行應該出現在資料庫資料表中的順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary>設定用來儲存此屬性之資料庫資料行的資料類型。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行個體。</returns>
      <param name="columnType">資料庫提供者特有的資料類型名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption)">
      <summary>設定資料庫如何產生此屬性的值。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行個體。</returns>
      <param name="databaseGeneratedOption">用來針對資料庫中的屬性產生值的模式。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasMaxLength(System.Int32)">
      <summary>設定此屬性具有指定的最大長度。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行個體。</returns>
      <param name="maxLength">此屬性的最大長度。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasParameterName(System.String)">
      <summary>設定此屬性所指預存程序中使用之參數的名稱。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行個體。</returns>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasPrecision(System.Byte)">
      <summary>設定 <see cref="T:System.DateTime" /> 屬性的有效位數。如果資料庫提供者不支援此資料行之資料類型的有效位數，就會忽略此值。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行個體。</returns>
      <param name="value">此屬性的有效位數。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary>設定 <see cref="T:System.Decimal" /> 屬性的有效位數和小數位數。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行個體。</returns>
      <param name="precision">此屬性的有效位數。</param>
      <param name="scale">此屬性的小數位數。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary>設定此屬性當做開放式並行存取 Token 使用。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsConcurrencyToken(System.Boolean)">
      <summary>設定此屬性是否當做開放式並行存取 Token 使用。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行個體。</returns>
      <param name="concurrencyToken">指出此屬性是否為並行 Token 的值。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsFixedLength">
      <summary>設定此屬性具有固定長度。使用 HasMaxLength 設定此屬性的固定長度。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsKey">
      <summary>將此屬性設定為實體類型之主索引鍵的一部分。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsMaxLength">
      <summary>設定此屬性允許資料庫提供者支援的最大長度。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsOptional">
      <summary>將此屬性設定為 optional。用來儲存此屬性的資料庫資料行將會是 nullable。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsRequired">
      <summary>將此屬性設定為 required。用來儲存此屬性的資料庫資料行將不會是 nullable。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsRowVersion">
      <summary>設定此屬性為資料庫中的資料列版本。實際資料類型將會根據使用的資料庫提供者而異。將此屬性設定為資料列版本會自動將它設定為開放式並行存取 Token。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsUnicode">
      <summary>設定此屬性支援 Unicode 字串內容。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsUnicode(System.Boolean)">
      <summary>設定此屬性是否支援 Unicode 字串內容。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行個體。</returns>
      <param name="unicode">指出此屬性是否支援 Unicode 字串內容的值。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsVariableLength">
      <summary>設定此屬性具有變動長度。根據預設，屬性具有變動長度。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ToString">
      <summary>傳回此執行個體的字串表示。</summary>
      <returns>此執行個體的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration">
      <summary>允許自訂 <see cref="T:System.Data.Entity.DbModelBuilder" /> 執行個體所使用的慣例。預設慣例可以在 System.Data.Entity.ModelConfiguration.Conventions 命名空間中找到。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Add``1">
      <summary>啟用 <see cref="T:System.Data.Entity.DbModelBuilder" /> 的慣例。</summary>
      <typeparam name="TConvention">要啟用之慣例的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Add(System.Data.Entity.ModelConfiguration.Conventions.IConvention[])">
      <summary>啟用 <see cref="T:System.Data.Entity.DbModelBuilder" /> 的一個或多個慣例。</summary>
      <param name="conventions">要啟用的慣例。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddAfter``1(System.Data.Entity.ModelConfiguration.Conventions.IConvention)">
      <summary>啟用 <see cref="T:System.Data.Entity.DbModelBuilder" /> 的慣例。此慣例會在所指定的慣例之後執行。</summary>
      <param name="newConvention">要啟用的慣例。</param>
      <typeparam name="TExistingConvention">啟用的慣例會在其後執行之慣例的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddBefore``1(System.Data.Entity.ModelConfiguration.Conventions.IConvention)">
      <summary>啟用 <see cref="T:System.Data.Entity.DbModelBuilder" /> 的組態慣例。此慣例會在所指定的慣例之前執行。</summary>
      <param name="newConvention">要啟用的慣例。</param>
      <typeparam name="TExistingConvention">啟用的慣例會在其前面執行之慣例的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddFromAssembly(System.Reflection.Assembly)">
      <summary>在給定組件中探索所有慣例，並將它們加入至 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
      <param name="assembly">包含要加入之慣例的組件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetHashCode">
      <summary>做為特定類型的雜湊函式。</summary>
      <returns>目前類型的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove``1">
      <summary>停用 <see cref="T:System.Data.Entity.DbModelBuilder" /> 的慣例。可供移除的預設慣例可以在 System.Data.Entity.ModelConfiguration.Conventions 命名空間中找到。</summary>
      <typeparam name="TConvention">要停用之慣例的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove(System.Data.Entity.ModelConfiguration.Conventions.IConvention[])">
      <summary>停用 <see cref="T:System.Data.Entity.DbModelBuilder" /> 的一個或多個慣例。</summary>
      <param name="conventions">要停用的慣例。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration">
      <summary>允許針對模型中的實體類型執行組態。此組態功能是透過輕量型慣例提供。</summary>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ClrType">
      <summary>取得此實體類型的 <see cref="T:System.Type" />。</summary>
      <returns>此實體類型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的執行個體。</summary>
      <returns>如果指定的物件等於目前的執行個體，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.GetHashCode">
      <summary>傳回目前執行個體的雜湊碼。</summary>
      <returns>目前執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasEntitySetName(System.String)">
      <summary>設定要用於此實體類型的實體集名稱。只能針對每一個實體集中的基底類型設定實體集名稱。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 執行個體。</returns>
      <param name="entitySetName">實體集的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
      <summary>為此實體類型設定主索引鍵屬性。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 執行個體。</returns>
      <param name="keyProperties">要當做主索引鍵使用的屬性。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Collections.Generic.IEnumerable{System.String})">
      <summary>為此實體類型設定主索引鍵屬性。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 執行個體。</returns>
      <param name="propertyNames">要當做主索引鍵使用之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Reflection.PropertyInfo)">
      <summary>為此實體類型設定主索引鍵屬性。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 執行個體。</returns>
      <param name="propertyInfo">要當做主索引鍵使用的屬性。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.String)">
      <summary>為此實體類型設定主索引鍵屬性。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 執行個體。</returns>
      <param name="propertyName">要當做主索引鍵使用之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasTableAnnotation(System.String,System.Object)">
      <summary>在模型中針對此實體的對應資料表設定註釋。此註釋值可以在稍後處理資料表 (例如建立移轉) 時使用。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="name">註釋名稱，此名稱必須是有效的 C#/EDM 識別項。</param>
      <param name="value">註釋值，此值可以是字串或可透過 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的其他類型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore">
      <summary>從模型中排除此實體類型，好讓它不會對應到資料庫。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore(System.Reflection.PropertyInfo)">
      <summary>從模型中排除屬性，好讓它不會對應到資料庫。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 執行個體。</returns>
      <param name="propertyInfo">要設定的屬性。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore(System.String)">
      <summary>從模型中排除屬性，好讓它不會對應到資料庫。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 執行個體。</returns>
      <param name="propertyName">要設定之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.IsComplexType">
      <summary>將此實體類型變更為複雜類型。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.MapToStoredProcedures">
      <summary>設定此類型以使用預存程序執行插入、更新和刪除。將會使用程序和參數名稱的預設慣例。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration})">
      <summary>設定此類型以使用預存程序執行插入、更新和刪除。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="modificationStoredProceduresConfigurationAction">要覆寫程序和參數名稱之預設慣例的組態。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Property(System.Reflection.PropertyInfo)">
      <summary>設定在此類型上定義的屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyInfo">正在設定的屬性。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Property(System.String)">
      <summary>設定在此類型上定義的屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyName">正在設定之屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToString">
      <summary>傳回此執行個體的字串表示。</summary>
      <returns>此執行個體的字串表示。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToTable(System.String)">
      <summary>設定此實體類型所對應的資料表名稱。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 執行個體。</returns>
      <param name="tableName">資料表的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToTable(System.String,System.String)">
      <summary>設定此實體類型所對應的資料表名稱。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 執行個體。</returns>
      <param name="tableName">資料表的名稱。</param>
      <param name="schemaName">資料表的資料庫結構描述。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1">
      <summary>允許針對模型中的實體類型執行組態。此組態功能是透過輕量型慣例提供。</summary>
      <typeparam name="T">由實體類型繼承的類型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ClrType">
      <summary>取得此實體類型的 <see cref="T:System.Type" />。</summary>
      <returns>此實體類型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的執行個體。</summary>
      <returns>如果指定的物件等於目前的執行個體，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.GetHashCode">
      <summary>擷取目前執行個體的雜湊碼。</summary>
      <returns>目前執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary>設定要用於此實體類型的實體集名稱。只能針對每一個實體集中的基底類型設定實體集名稱。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 執行個體。</returns>
      <param name="entitySetName">實體集的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>為此實體類型設定主索引鍵屬性。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 執行個體。</returns>
      <param name="keyExpression">Lambda 運算式，表示要當做主索引鍵使用的屬性。C#:t =&amp;gt; t.Id VB.Net:Function(t) t.Id。若主索引鍵由多個屬性組成，請指定匿名類型 (包括屬性)。C#:t =&amp;gt; new { t.Id1, t.Id2 } VB.Net:Function(t) New With { t.Id1, t.Id2 }</param>
      <typeparam name="TProperty">索引鍵的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>在模型中針對此實體的對應資料表設定註釋。此註釋值可以在稍後處理資料表 (例如建立移轉) 時使用。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="name">註釋名稱，此名稱必須是有效的 C#/EDM 識別項。</param>
      <param name="value">此註釋值可以字串或可透過 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的其他類型。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Ignore">
      <summary>從模型中排除此實體類型，好讓它不會對應到資料庫。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>從模型中排除屬性，好讓它不會對應到資料庫。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 執行個體。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="TProperty">要忽略之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.IsComplexType">
      <summary>將此實體類型變更為複雜類型。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.MapToStoredProcedures">
      <summary>設定此類型以使用預存程序執行插入、更新和刪除。將會使用程序和參數名稱的預設慣例。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration{`0}})">
      <summary>設定此類型以使用預存程序執行插入、更新和刪除。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="modificationStoredProceduresConfigurationAction">要覆寫程序和參數名稱之預設慣例的組態。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>設定在此類型上定義的屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="TProperty">正在設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToString">
      <summary>將目前執行個體的值轉換為其對應的字串表示。</summary>
      <returns>目前執行個體的字串表示。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToTable(System.String)">
      <summary>設定此實體類型所對應的資料表名稱。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 執行個體。</returns>
      <param name="tableName">資料表的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary>設定此實體類型所對應的資料表名稱。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 執行個體。</returns>
      <param name="tableName">資料表的名稱。</param>
      <param name="schemaName">資料表的資料庫結構描述。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration">
      <summary>建立慣例以設定預存程序用來更新資料庫中的實體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Equals(System.Object)">
      <summary>判斷此執行個體是否等於指定的物件。</summary>
      <returns>若此執行個體等於指定的物件，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.GetHashCode">
      <summary>傳回目前執行個體的雜湊碼。</summary>
      <returns>目前執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.GetType">
      <summary>傳回與目前執行個體相關聯的類型。</summary>
      <returns>與目前執行個體相關聯的類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>設定預存程序的名稱。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="procedureName">預存程序名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>設定預存程序的名稱。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="procedureName">預存程序名稱。</param>
      <param name="schemaName">結構描述名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyInfo">將要設定參數的屬性。</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String,System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyInfo">將要設定參數的屬性。</param>
      <param name="currentValueParameterName">目前的值參數名稱。</param>
      <param name="originalValueParameterName">原始的值參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyName">將要設定參數的屬性其名稱。</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.String,System.String,System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyName">將要設定參數的屬性其名稱。</param>
      <param name="currentValueParameterName">目前的值參數名稱。</param>
      <param name="originalValueParameterName">原始的值參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Result(System.Reflection.PropertyInfo,System.String)">
      <summary>設定供此預存程序對應至屬性的結果資料行。這是用於資料庫所產生的資料行。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyInfo">將要設定結果的屬性。</param>
      <param name="columnName">結果資料行的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Result(System.String,System.String)">
      <summary>設定供此預存程序對應至屬性的結果資料行。這是用於資料庫所產生的資料行。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyName">將要設定結果的屬性其名稱。</param>
      <param name="columnName">結果資料行的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.RowsAffectedParameter(System.String)">
      <summary>設定要傳回受此預存程序影響之資料列的輸出參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.ToString">
      <summary>傳回此執行個體的字串表示。</summary>
      <returns>此執行個體的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration">
      <summary>用來設定實體類型或複雜類型的 <see cref="T:System.DateTime" /> 屬性。此組態功能是透過 Code First Fluent 應用程式開發介面所取得，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>在模型中設定用來儲存屬性之資料庫資料行的註釋。此註釋值可以在稍後處理資料行 (例如建立移轉) 時使用。</summary>
      <returns>相同的 DateTimePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="name">註釋名稱，此名稱必須是有效的 C#/EDM 識別項。</param>
      <param name="value">註釋值，此值可以是字串或可透過 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的其他類型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnName(System.String)">
      <summary>設定用來儲存此屬性的資料庫資料行名稱。</summary>
      <returns>相同的 DateTimePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnName">資料行名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>設定用來儲存此屬性之資料庫資料行的順序。當實體類型有複合索引鍵時，此方法也會用來指定索引鍵排序。</summary>
      <returns>相同的 DateTimePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnOrder">此資料行應該出現在資料庫資料表中的順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnType(System.String)">
      <summary>設定用來儲存此屬性之資料庫資料行的資料類型。</summary>
      <returns>相同的 DateTimePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnType">資料庫提供者特有的資料類型名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>設定資料庫如何產生此屬性的值。</summary>
      <returns>相同的 DateTimePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="databaseGeneratedOption">用來針對資料庫中的屬性產生值的模式。設定為 'null' 表示將視屬性的類型、它在模型中的語意 (處理主索引鍵的方式不同) 以及所使用的慣例集合而定，使用預設選項「無」、「識別」或「計算」。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasPrecision(System.Byte)">
      <summary>設定此屬性的有效位數。如果資料庫提供者不支援此資料行之資料類型的有效位數，就會忽略此值。</summary>
      <returns>相同的 DateTimePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="value">此屬性的有效位數。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken">
      <summary>設定此屬性當做開放式並行存取 Token 使用。</summary>
      <returns>相同的 DateTimePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>設定此屬性是否當做開放式並行存取 Token 使用。</summary>
      <returns>相同的 DateTimePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="concurrencyToken">指出此屬性是否為並行 Token 的值。指定 'null' 將會從此屬性中移除並行 Token Facet。指定 'null' 將會產生與指定 'false' 相同的執行階段行為。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsOptional">
      <summary>將此屬性設定為 optional。用來儲存此屬性的資料庫資料行將會是 nullable。</summary>
      <returns>相同的 DateTimePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsRequired">
      <summary>將此屬性設定為 required。用來儲存此屬性的資料庫資料行將不會是 nullable。<see cref="T:System.DateTime" /> 屬性預設為必要項。</summary>
      <returns>相同的 DateTimePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration">
      <summary>用來設定實體類型或複雜類型的 <see cref="T:System.decimal" /> 屬性。此組態功能是透過 Code First Fluent 應用程式開發介面所取得，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>在模型中設定用來儲存屬性之資料庫資料行的註釋。此註釋值可以在稍後處理資料行 (例如建立移轉) 時使用。</summary>
      <returns>相同的 DecimalPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="name">註釋名稱，此名稱必須是有效的 C#/EDM 識別項。</param>
      <param name="value">註釋值，此值可以是字串或可透過 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的其他類型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnName(System.String)">
      <summary>設定用來儲存此屬性的資料庫資料行名稱。</summary>
      <returns>相同的 DecimalPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnName">資料行名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>設定用來儲存此屬性之資料庫資料行的順序。當實體類型有複合索引鍵時，此方法也會用來指定索引鍵排序。</summary>
      <returns>相同的 DecimalPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnOrder">此資料行應該出現在資料庫資料表中的順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnType(System.String)">
      <summary>設定用來儲存此屬性之資料庫資料行的資料類型。</summary>
      <returns>相同的 DecimalPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnType">資料庫提供者特有的資料類型名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>設定資料庫如何產生此屬性的值。</summary>
      <returns>相同的 DecimalPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="databaseGeneratedOption">用來針對資料庫中的屬性產生值的模式。設定為 'null' 表示將視屬性的類型、它在模型中的語意 (處理主索引鍵的方式不同) 以及所使用的慣例集合而定，使用預設選項「無」、「識別」或「計算」。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary>設定此屬性的有效位數和小數位數。</summary>
      <returns>相同的 DecimalPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="precision">此屬性的有效位數。</param>
      <param name="scale">此屬性的小數位數。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken">
      <summary>設定此屬性當做開放式並行存取 Token 使用。</summary>
      <returns>相同的 DecimalPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>設定此屬性是否當做開放式並行存取 Token 使用。</summary>
      <returns>相同的 DecimalPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="concurrencyToken">指出此屬性是否為並行 Token 的值。指定 'null' 將會從此屬性中移除並行 Token Facet。指定 'null' 將會產生與指定 'false' 相同的執行階段行為。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsOptional">
      <summary>將此屬性設定為 optional。用來儲存此屬性的資料庫資料行將會是 nullable。</summary>
      <returns>相同的 DecimalPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsRequired">
      <summary>將此屬性設定為 required。用來儲存此屬性的資料庫資料行將不會是 nullable。<see cref="T:System.decimal" /> 屬性預設為必要項。</summary>
      <returns>相同的 DecimalPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1">
      <summary>允許針對用以刪除實體的預存程序執行組態。</summary>
      <typeparam name="TEntityType">使用預存程序可予刪除之實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要相比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.GetHashCode">
      <summary>擷取目前執行個體的雜湊碼。</summary>
      <returns>目前執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.GetType">
      <summary>擷取目前執行個體的類型。</summary>
      <returns>目前執行個體的類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>設定預存程序的名稱。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="procedureName">預存程序名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>設定預存程序的名稱。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="procedureName">預存程序名稱。</param>
      <param name="schemaName">結構描述名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>針對外部索引鍵屬性未包含在此類別中的關聯性設定參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="navigationPropertyExpression">Lambda 運算式，表示關聯性的導覽屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">執行組態的 Lambda 運算式。</param>
      <typeparam name="TPrincipalEntityType">關聯性中之主體實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>針對外部索引鍵屬性未包含在此類別中的關聯性設定參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="navigationPropertyExpression">Lambda 運算式，表示關聯性的導覽屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">執行組態的 Lambda 運算式。</param>
      <typeparam name="TPrincipalEntityType">關聯性中之主體實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
      <typeparam name="TProperty">要設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
      <typeparam name="TProperty">要設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.RowsAffectedParameter(System.String)">
      <summary>設定要傳回受此預存程序影響之資料列的輸出參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.ToString">
      <summary>將目前執行個體的值轉換為其對應的字串表示。</summary>
      <returns>目前執行個體的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1">
      <summary>設定可支援外部索引鍵屬性的關聯性，這些屬性會在物件模型中公開。此組態功能是透過 Code First Fluent 應用程式開發介面所取得，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
      <typeparam name="TDependentEntityType">相依實體類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetHashCode">
      <summary>做為特定類型的雜湊函式。</summary>
      <returns>目前物件的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetType">
      <summary>取得目前執行個體的類型。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>設定關聯性使用外部索引鍵屬性，這些屬性會在物件模型中公開。如果外部索引鍵屬性不會在物件模型中公開，則使用 Map 方法。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="foreignKeyExpression">Lambda 運算式，表示要當做外部索引鍵使用的屬性。如果外部索引鍵是由多個屬性所組成，則指定匿名類型 (包括屬性)。當使用多個外部索引鍵屬性時，必須使用之前為主體實體類型所設定之主索引鍵屬性的相同順序來指定這些屬性。</param>
      <typeparam name="TKey">索引鍵的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1">
      <summary>針對實體類型或是實體類型中的屬性子集來設定資料表和資料行對應。此組態功能是透過 Code First Fluent 應用程式開發介面所取得，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
      <typeparam name="TEntityType">要對應的實體類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetHashCode">
      <summary>做為特定類型的雜湊函式。</summary>
      <returns>目前物件的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>在模型中針對此實體的對應資料表設定註釋。此註釋值可以在稍後處理資料表 (例如建立移轉) 時使用。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="name">註釋名稱，此名稱必須是有效的 C#/EDM 識別項。</param>
      <param name="value">註釋值，此值可以是字串或可透過 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的其他類型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.MapInheritedProperties">
      <summary>重新對應繼承自基底類型的所有屬性。當設定衍生類型對應至個別資料表時，這會導致所有屬性都包含在資料表中，而不只是非繼承的屬性。這稱為「一實體類一表」(TPC) 對應。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Properties``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>設定將會包含在此對應片段中的屬性。如果未呼叫此方法，將會設定尚未包含在對應片段中的所有屬性。</summary>
      <param name="propertiesExpression">匿名類型的 Lambda 運算式，該類型包含要對應的屬性。C#:t =&amp;gt; new { t.Id, t.Property1, t.Property2 } VB.Net:Function(t) New With { p.Id, t.Property1, t.Property2 }</param>
      <typeparam name="TObject">匿名類型，包括要對應的屬性。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary>設定包含在此對應片段中的 <see cref="T:System.byte[]" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}})">
      <summary>設定包含在此對應片段中的 <see cref="T:DbGeography" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}})">
      <summary>設定包含在此對應片段中的 <see cref="T:DbGeometry" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary>設定包含在此對應片段中的 <see cref="T:System.DateTime" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary>設定包含在此對應片段中的 <see cref="T:System.DateTimeOffset" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary>設定包含在此對應片段中的 <see cref="T:System.decimal" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary>設定包含在此對應片段中的 <see cref="T:System.DateTime?" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary>設定包含在此對應片段中的 <see cref="T:System.DateTimeOffset?" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary>設定包含在此對應片段中的 <see cref="T:System.decimal?" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary>設定包含在此對應片段中的 <see cref="T:System.TimeSpan?" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary>設定包含在此對應片段中的 <see cref="T:System.struct?" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="T">正在設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary>設定包含在此對應片段中的 <see cref="T:System.string" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary>設定包含在此對應片段中的 <see cref="T:System.TimeSpan" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>設定包含在此對應片段中的 <see cref="T:System.struct" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="T">正在設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>設定用來區別繼承階層架構中類型之間的鑑別子條件。</summary>
      <returns>用來進一步設定鑑別子條件的組態物件。</returns>
      <param name="property">Lambda 運算式，表示用來區別類型的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="TProperty">用來區別類型之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires(System.String)">
      <summary>設定用來區別繼承階層架構中類型之間的鑑別子資料行。</summary>
      <returns>用來進一步設定鑑別子資料行和值的組態物件。</returns>
      <param name="discriminator">鑑別子資料行的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String)">
      <summary>設定要對應的目標資料表名稱。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="tableName">資料表名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String,System.String)">
      <summary>設定要對應的目標資料表名稱和結構描述。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="tableName">資料表名稱。</param>
      <param name="schemaName">資料表的結構描述。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration">
      <summary>設定關聯性的資料表和資料行對應，此對應不會公開物件模型中的外部索引鍵屬性。此組態功能是透過 Code First Fluent 應用程式開發介面所取得，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="other">要與目前物件比較的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetHashCode">
      <summary>做為特定類型的雜湊函式。</summary>
      <returns>目前類型的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetType">
      <summary>取得目前執行個體的類型。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.HasColumnAnnotation(System.String,System.String,System.Object)">
      <summary>在模型中為已使用 <see cref="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])" /> 設定的資料庫資料行設定註釋。此註釋值可以在稍後處理資料行 (例如建立移轉) 時使用。</summary>
      <returns>相同的 ForeignKeyAssociationMappingConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="keyColumnName">以 HasKey 方法設定的資料行名稱。</param>
      <param name="annotationName">註釋名稱，此名稱必須是有效的 C#/EDM 識別項。</param>
      <param name="value">註釋值，此值可以是字串或可透過 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的其他類型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])">
      <summary>為外部索引鍵設定資料行的名稱。</summary>
      <returns>相同的 ForeignKeyAssociationMappingConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="keyColumnNames">外部索引鍵資料行名稱。當使用多個外部索引鍵屬性時，必須使用之前為目標實體類型所設定之主索引鍵屬性的相同順序來指定這些屬性。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>設定外部索引鍵資料行所在的資料表名稱。指定的資料表必須已經針對實體類型對應。如果您希望外部索引鍵位於其自己的資料表中，請針對 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" /> 使用 Map 方法執行實體分割，以便建立只有主索引鍵屬性的資料表。然後，您可以透過此方法將外部索引鍵加入至資料表。</summary>
      <returns>相同的 ForeignKeyAssociationMappingConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="tableName">資料表名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>設定外部索引鍵資料行所在的資料表名稱和結構描述。指定的資料表必須已經針對實體類型對應。如果您希望外部索引鍵位於其自己的資料表中，請針對 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" /> 使用 Map 方法執行實體分割，以便建立只有主索引鍵屬性的資料表。然後，您可以透過此方法將外部索引鍵加入至資料表。</summary>
      <returns>相同的 ForeignKeyAssociationMappingConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="tableName">資料表名稱。</param>
      <param name="schemaName">資料表的結構描述。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration">
      <summary>設定只能支援外部索引鍵屬性的關聯性，這些屬性不會在物件模型中公開。此組態功能是透過 Code First Fluent 應用程式開發介面所取得，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">要與目前比較的物件</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetHashCode">
      <summary>做為特定類型的雜湊函式。</summary>
      <returns>目前類型的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetType">
      <summary>取得目前執行個體的類型。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration})">
      <summary>設定關聯性使用外部索引鍵屬性，這些屬性不會在物件模型中公開。可藉由指定組態動作來自訂資料行和資料表。如果指定空的組態動作，則會依照慣例產生資料行名稱。如果在物件模型中公開外部索引鍵屬性，則使用 HasForeignKey 方法。並非所有關聯性都支援在物件模型中公開外部索引鍵屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="configurationAction">設定外部索引鍵資料行和資料表的動作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1">
      <summary>表示允許對用於插入實體之預存程序執行的組態。</summary>
      <typeparam name="TEntityType">使用預存程序可予插入之實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Equals(System.Object)">
      <summary>指定此執行個體是否等於特定物件。</summary>
      <returns>若此執行個體等於特定物件，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.GetHashCode">
      <summary>取得此執行個體的雜湊碼。</summary>
      <returns>此執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.GetType">
      <summary>取得此執行個體的類型。</summary>
      <returns>此執行個體的類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>設定預存程序的名稱。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="procedureName">預存程序名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>設定預存程序的名稱。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="procedureName">預存程序名稱。</param>
      <param name="schemaName">結構描述名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>針對外部索引鍵屬性未包含在此類別中的關聯性設定參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="navigationPropertyExpression">Lambda 運算式，表示關聯性的導覽屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">執行組態的 Lambda 運算式。</param>
      <typeparam name="TPrincipalEntityType">關聯性中之主體實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>針對外部索引鍵屬性未包含在此類別中的關聯性設定參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="navigationPropertyExpression">Lambda 運算式，表示關聯性的導覽屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">執行組態的 Lambda 運算式。</param>
      <typeparam name="TPrincipalEntityType">關聯性中之主體實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
      <typeparam name="TProperty">要設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
      <typeparam name="TProperty">要設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>設定供此預存程序對應至屬性的結果資料行。這是用於資料庫所產生的資料行。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定結果的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果資料行的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>設定供此預存程序對應至屬性的結果資料行。這是用於資料庫所產生的資料行。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定結果的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果資料行的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>設定供此預存程序對應至屬性的結果資料行。這是用於資料庫所產生的資料行。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定結果的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果資料行的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>設定供此預存程序對應至屬性的結果資料行。這是用於資料庫所產生的資料行。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定結果的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果資料行的名稱。</param>
      <typeparam name="TProperty">要設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>設定供此預存程序對應至屬性的結果資料行。這是用於資料庫所產生的資料行。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定結果的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果資料行的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>設定供此預存程序對應至屬性的結果資料行。這是用於資料庫所產生的資料行。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定結果的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果資料行的名稱。</param>
      <typeparam name="TProperty">要設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.ToString">
      <summary>傳回此執行個體的字串表示。</summary>
      <returns>此執行個體的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration">
      <summary>用來針對實體類型或複雜類型設定有長度 Facet 的資料行。此組態功能是由 Code First Fluent 應用程式開發介面所公開，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetHashCode">
      <summary>做為特定類型的雜湊函式。</summary>
      <returns>目前類型的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetType">
      <summary>取得目前執行個體的類型。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>設定此資料行具有指定的最大長度。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> 執行個體。</returns>
      <param name="value">資料行的最大長度。將此值設定為 null 將會從此資料行中移除任何最大長度限制，而且資料庫資料行將會使用預設長度。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsFixedLength">
      <summary>設定此資料行具有固定長度。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsMaxLength">
      <summary>設定此資料行允許資料庫提供者支援的最大長度。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsVariableLength">
      <summary>設定此資料行具有變動長度。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration">
      <summary>用來針對實體類型或複雜類型設定有長度 Facet 的屬性。此組態功能是透過 Code First Fluent 應用程式開發介面所取得，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>設定此屬性具有指定的最大長度。</summary>
      <returns>相同的 LengthPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="value">此屬性的最大長度。設定 'null' 將會從此屬性中移除任何最大長度限制，而且資料庫資料行將會使用預設長度。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsFixedLength">
      <summary>設定此屬性具有固定長度。使用 HasMaxLength 設定此屬性的固定長度。</summary>
      <returns>相同的 LengthPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsMaxLength">
      <summary>設定此屬性允許資料庫提供者支援的最大長度。</summary>
      <returns>相同的 LengthPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsVariableLength">
      <summary>設定此屬性具有變動長度。根據預設，屬性具有變動長度。</summary>
      <returns>相同的 LengthPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2">
      <summary>從實體類型設定 many 關聯性。</summary>
      <typeparam name="TEntityType">關聯性源自的實體類型。</typeparam>
      <typeparam name="TTargetEntityType">關聯性設為目標的實體類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>做為特定類型的雜湊函式。</summary>
      <returns>目前類型的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany">
      <summary>將關聯性設定為 many:many，而且在關聯性的另一端沒有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>將關聯性設定為 many:many，而且在關聯性的另一端有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression">Lambda 運算式，表示關聯性另一端的導覽屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional">
      <summary>將關聯性設定為 many:optional，而且在關聯性的另一端沒有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>將關聯性設定為 many:optional，而且在關聯性的另一端有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression">Lambda 運算式，表示關聯性另一端的導覽屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired">
      <summary>將關聯性設定為 many:required，而且在關聯性的另一端沒有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>將關聯性設定為 many:required，而且在關聯性的另一端有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression">Lambda 運算式，表示關聯性另一端的導覽屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration">
      <summary>設定 many:many 關聯性的資料表和資料行對應。此組態功能是透過 Code First Fluent 應用程式開發介面所取得，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="other">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetHashCode">
      <summary>做為特定類型的雜湊函式。</summary>
      <returns>目前物件的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetType">
      <summary>取得目前執行個體的類型。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.HasTableAnnotation(System.String,System.Object)">
      <summary>在模型中為聯結資料表設定註釋。此註釋值可以在稍後處理資料表 (例如建立移轉) 時使用。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="name">註釋名稱，此名稱必須是有效的 C#/EDM 識別項。</param>
      <param name="value">註釋值，此值可以是字串或可透過 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的其他類型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapLeftKey(System.String[])">
      <summary>為左邊外部索引鍵設定資料行的名稱。左邊外部索引鍵會指向 HasMany 呼叫中所指定的導覽屬性的父實體。</summary>
      <returns>相同的 ManyToManyAssociationMappingConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="keyColumnNames">外部索引鍵資料行名稱。當使用多個外部索引鍵屬性時，必須使用之前為目標實體類型所設定之主索引鍵屬性的相同順序來指定這些屬性。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapRightKey(System.String[])">
      <summary>為右邊外部索引鍵設定資料行的名稱。右邊外部索引鍵會指向 WithMany 呼叫中所指定的導覽屬性的父實體。</summary>
      <returns>相同的 ManyToManyAssociationMappingConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="keyColumnNames">外部索引鍵資料行名稱。當使用多個外部索引鍵屬性時，必須使用之前為目標實體類型所設定之主索引鍵屬性的相同順序來指定這些屬性。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>設定關聯性的聯結資料表名稱。</summary>
      <returns>相同的 ManyToManyAssociationMappingConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="tableName">資料表名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>設定關聯性的聯結資料表名稱和結構描述。</summary>
      <returns>相同的 ManyToManyAssociationMappingConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="tableName">資料表名稱。</param>
      <param name="schemaName">資料表的結構描述。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2">
      <summary>允許針對用以修改多對多關聯性的預存程序執行組態。</summary>
      <typeparam name="TEntityType">要設定其關聯性之實體的類型。</typeparam>
      <typeparam name="TTargetEntityType">關聯性目標另一端之實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.GetHashCode">
      <summary>擷取目前執行個體的雜湊碼。</summary>
      <returns>目前執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.GetType">
      <summary>擷取目前執行個體的類型。</summary>
      <returns>目前執行個體的類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.HasName(System.String)">
      <summary>設定預存程序的名稱。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="procedureName">程序的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.HasName(System.String,System.String)">
      <summary>設定預存程序的名稱。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="procedureName">程序的名稱。</param>
      <param name="schemaName">結構描述的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>設定左側索引鍵值的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>設定左側索引鍵值的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
      <typeparam name="TProperty">要設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>設定左側索引鍵值的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>設定左側索引鍵值的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
      <typeparam name="TProperty">要設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter(System.Linq.Expressions.Expression{System.Func{`1,System.Byte[]}},System.String)">
      <summary>設定右側索引鍵值的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``0}}},System.String)">
      <summary>設定右側索引鍵值的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
      <typeparam name="TProperty">要設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter(System.Linq.Expressions.Expression{System.Func{`1,System.String}},System.String)">
      <summary>設定右側索引鍵值的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.String)">
      <summary>設定右側索引鍵值的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
      <typeparam name="TProperty">要設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.ToString">
      <summary>將目前執行個體的值轉換為其對應的字串表示。</summary>
      <returns>目前執行個體的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2">
      <summary>允許針對用以修改多對多關聯性的預存程序執行組態。</summary>
      <typeparam name="TEntityType">要設定其關聯性之實體的類型。</typeparam>
      <typeparam name="TTargetEntityType">關聯性目標另一端之實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration{`0,`1}})">
      <summary>設定預存程序用以刪除關聯性。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="modificationStoredProcedureConfigurationAction">執行預存程序組態的 Lambda 運算式。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.GetHashCode">
      <summary>擷取目前執行個體的雜湊碼。</summary>
      <returns>目前執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration{`0,`1}})">
      <summary>設定預存程序用以插入關聯性。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="modificationStoredProcedureConfigurationAction">執行預存程序組態的 Lambda 運算式。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.ToString">
      <summary>將目前執行個體的值轉換為其對應的字串表示。</summary>
      <returns>目前執行個體的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2">
      <summary>設定 many:many 關聯性。此組態功能是透過 Code First Fluent 應用程式開發介面所取得，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
      <typeparam name="TEntityType">HasMany 呼叫中所指定的導覽屬性的父實體的類型。</typeparam>
      <typeparam name="TTargetEntityType">WithMany 呼叫中所指定的導覽屬性的父實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>做為特定類型的雜湊函式。</summary>
      <returns>目前類型的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration})">
      <summary>設定用來儲存關聯性的外部索引鍵資料行和資料表。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" /> 執行個體。</returns>
      <param name="configurationAction">設定外部索引鍵資料行和資料表的動作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.MapToStoredProcedures">
      <summary>設定要用於修改此關聯性的預存程序。將會使用程序和參數名稱的預設慣例。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration{`0,`1}})">
      <summary>設定要用於修改此關聯性的預存程序。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" /> 執行個體。</returns>
      <param name="modificationStoredProcedureMappingConfigurationAction">要覆寫程序和參數名稱之預設慣例的組態。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProcedureConfigurationBase">
      <summary>執行預存程序組態用來修改資料庫中的實體。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1">
      <summary>允許針對用以修改實體的預存程序執行組態。</summary>
      <typeparam name="TEntityType">使用預存程序可予修改之實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration{`0}})">
      <summary>設定用來刪除實體的預存程序。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="modificationStoredProcedureConfigurationAction">執行預存程序組態的 Lambda 運算式。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Equals(System.Object)">
      <summary>指定此執行個體是否與指定的物件相同。</summary>
      <returns>若此執行個體與指定的物件相同，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.GetHashCode">
      <summary>取得此執行個體的雜湊碼。</summary>
      <returns>此執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration{`0}})">
      <summary>設定預存程序用以插入實體。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="modificationStoredProcedureConfigurationAction">執行預存程序組態的 Lambda 運算式。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.ToString">
      <summary>傳回此執行個體的字串表示。</summary>
      <returns>此執行個體的字串表示。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Update(System.Action{System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration{`0}})">
      <summary>設定預存程序用以更新實體。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="modificationStoredProcedureConfigurationAction">執行預存程序組態的 Lambda 運算式。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration">
      <summary>根據指派給屬性的值，設定用來區別繼承階層架構中類型之間的條件。此組態功能是透過 Code First Fluent 應用程式開發介面所取得，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetHashCode">
      <summary>做為特定類型的雜湊函式。</summary>
      <returns>目前物件的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.HasValue">
      <summary>設定在屬性中要求值的條件。如果資料列沒有任何值指派給此屬性儲存所在的資料行，就會假設這些資料列具有此實體類型的基底類型。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2">
      <summary>從實體類型設定 optional 關聯性。</summary>
      <typeparam name="TEntityType">關聯性源自的實體類型。</typeparam>
      <typeparam name="TTargetEntityType">關聯性設為目標的實體類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetHashCode">
      <summary>做為特定類型的雜湊函式。</summary>
      <returns>目前類型的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany">
      <summary>將關聯性設定為 optional:many，而且在關聯性的另一端沒有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>將關聯性設定為 optional:many，而且在關聯性的另一端有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression">Lambda 運算式，表示關聯性另一端的導覽屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent">
      <summary>將關聯性設定為 optional:optional，而且在關聯性的另一端沒有導覽屬性。正在設定的實體類型將會是相依項，而且包含主體的外部索引鍵。關聯性所針對的實體類型將會是關聯性中的主體。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>將關聯性設定為 optional:optional，而且在關聯性的另一端有導覽屬性。正在設定的實體類型將會是相依項，而且包含主體的外部索引鍵。關聯性所針對的實體類型將會是關聯性中的主體。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression">Lambda 運算式，表示關聯性另一端的導覽屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal">
      <summary>將關聯性設定為 optional:optional，而且在關聯性的另一端沒有導覽屬性。正在設定的實體類型將會是關聯性中的主體。關聯性所針對的實體類型將會是相依項，而且包含主體的外部索引鍵。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>將關聯性設定為 optional:optional，而且在關聯性的另一端有導覽屬性。正在設定的實體類型將會是關聯性中的主體。關聯性所針對的實體類型將會是相依項，而且包含主體的外部索引鍵。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression">Lambda 運算式，表示關聯性另一端的導覽屬性。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired">
      <summary>將關聯性設定為 optional:required，而且在關聯性的另一端沒有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>將關聯性設定為 optional:required，而且在關聯性的另一端有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression">Lambda 運算式，表示關聯性另一端的導覽屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration">
      <summary>從實體類型設定基本資料行。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetHashCode">
      <summary>做為特定類型的雜湊函式。</summary>
      <returns>目前類型的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>設定用來儲存此屬性之基本資料行的順序。當實體類型有複合索引鍵時，此方法也會用來指定索引鍵排序。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> 執行個體。</returns>
      <param name="columnOrder">此資料行應該出現在資料庫資料表中的順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnType(System.String)">
      <summary>設定用來儲存此屬性之基本資料行的資料類型。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> 執行個體。</returns>
      <param name="columnType">資料庫提供者特有的資料類型名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsOptional">
      <summary>將基本資料行設定為 optional。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsRequired">
      <summary>將基本資料行設定為 required。</summary>
      <returns>可以鏈結多個呼叫的相同 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration">
      <summary>提供用來設定實體類型或複雜類型之基本屬性的方法。此組態功能是透過 Code First Fluent 應用程式開發介面所取得，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.Equals(System.Object)">
      <summary>判斷此執行個體是否等於指定的物件。</summary>
      <returns>若此執行個體等於指定的物件，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetHashCode">
      <summary>傳回目前執行個體的雜湊碼。</summary>
      <returns>目前執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>在模型中設定用來儲存屬性之資料庫資料行的註釋。此註釋值可以在稍後處理資料行 (例如建立移轉) 時使用。</summary>
      <returns>相同的 PrimitivePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="name">註釋名稱，此名稱必須是有效的 C#/EDM 識別項。</param>
      <param name="value">註釋值，此值可以是字串或可透過 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的其他類型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary>設定用來儲存此屬性的資料庫資料行名稱。</summary>
      <returns>相同的 PrimitivePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnName">資料行名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>設定用來儲存此屬性之資料庫資料行的順序。當實體類型有複合索引鍵時，此方法也會用來指定索引鍵排序。</summary>
      <returns>相同的 PrimitivePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnOrder">此資料行應該出現在資料庫資料表中的順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary>設定用來儲存此屬性之資料庫資料行的資料類型。</summary>
      <returns>相同的 PrimitivePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnType">資料庫提供者特有的資料類型名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>設定資料庫如何產生此屬性的值。</summary>
      <returns>相同的 PrimitivePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="databaseGeneratedOption">用來針對資料庫中的屬性產生值的模式。設定為 'null' 表示將視屬性的類型、它在模型中的語意 (處理主索引鍵的方式不同) 以及所使用的慣例集合而定，使用預設選項「無」、「識別」或「計算」。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasParameterName(System.String)">
      <summary>設定此屬性所指預存程序中使用之參數的名稱。</summary>
      <returns>相同的 PrimitivePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary>設定此屬性當做開放式並行存取 Token 使用。</summary>
      <returns>相同的 PrimitivePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>設定此屬性是否當做開放式並行存取 Token 使用。</summary>
      <returns>相同的 PrimitivePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="concurrencyToken">指出此屬性是否為並行 Token 的值。指定 'null' 將會從此屬性中移除並行 Token Facet。指定 'null' 將會產生與指定 'false' 相同的執行階段行為。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsOptional">
      <summary>將此屬性設定為 optional。用來儲存此屬性的資料庫資料行將會是 nullable。</summary>
      <returns>相同的 PrimitivePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsRequired">
      <summary>將此屬性設定為 required。用來儲存此屬性的資料庫資料行將不會是 nullable。</summary>
      <returns>相同的 PrimitivePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.ToString">
      <summary>傳回此執行個體的字串表示。</summary>
      <returns>此執行個體的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration">
      <summary>允許針對以模型中屬性為基礎的輕量型慣例執行組態。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration})">
      <summary>允許套用此慣例的屬性的組態。</summary>
      <param name="propertyConfigurationAction">針對 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行組態的動作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>此執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Having``1(System.Func{System.Reflection.PropertyInfo,``0})">
      <summary>在擷取值以供稍後設定期間使用時，根據述詞來篩選套用此慣例的屬性。</summary>
      <returns>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="capturingPredicate">函式，用於擷取每個屬性的值。如果此值為 null，就會篩選出該屬性。</param>
      <typeparam name="T">所擷取值的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>目前的物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Where(System.Func{System.Reflection.PropertyInfo,System.Boolean})">
      <summary>根據述詞來篩選套用此慣例的屬性。</summary>
      <returns>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="predicate">用來測試每個屬性是否符合條件的函式。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1">
      <summary>允許針對以模型中實體類型的屬性和所擷取的值為基礎的輕量型慣例執行組態。</summary>
      <typeparam name="T">所擷取值的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,`0})">
      <summary>允許套用此慣例的屬性的組態。</summary>
      <param name="propertyConfigurationAction">使用擷取的值，針對 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 執行組態的動作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.GetHashCode">
      <summary>做為特定類型的雜湊函式。</summary>
      <returns>目前類型的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration">
      <summary>用來設定對應片段中的屬性。此組態功能是透過 Code First Fluent 應用程式開發介面所取得，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>在模型中設定用來儲存屬性之資料庫資料行的註釋。此註釋值可以在稍後處理資料行 (例如建立移轉) 時使用。</summary>
      <returns>相同的 PropertyMappingConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="name">註釋名稱，此名稱必須是有效的 C#/EDM 識別項。</param>
      <param name="value">註釋值，此值可以是字串或可透過 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的其他類型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration.HasColumnName(System.String)">
      <summary>設定在對應片段中用來儲存此屬性的資料庫資料行名稱。</summary>
      <returns>相同的 PropertyMappingConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnName">資料行名稱。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2">
      <summary>從實體類型設定 required 關聯性。</summary>
      <typeparam name="TEntityType">關聯性源自的實體類型。</typeparam>
      <typeparam name="TTargetEntityType">關聯性設為目標的實體類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>指定所指定的物件是否與目前的物件相同。</summary>
      <returns>如果指定的物件和目前的物件相同，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetHashCode">
      <summary>取得與目前物件相關聯的雜湊碼。</summary>
      <returns>與目前物件相關聯的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.ToString">
      <summary>傳回目前物件的字串表示。</summary>
      <returns>目前物件的字串表示。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany">
      <summary>將關聯性設定為 required:many，而且在關聯性的另一端沒有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>將關聯性設定為 required:many，而且在關聯性的另一端有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression">Lambda 運算式，表示關聯性另一端的導覽屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional">
      <summary>將關聯性設定為 required:optional，而且在關聯性的另一端沒有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>將關聯性設定為 required:optional，而且在關聯性的另一端有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression">Lambda 運算式，表示關聯性另一端的導覽屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent">
      <summary>將關聯性設定為 required:required，而且在關聯性的另一端沒有導覽屬性。正在設定的實體類型將會是相依項，而且包含主體的外部索引鍵。關聯性所針對的實體類型將會是關聯性中的主體。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>將關聯性設定為 required:required，而且在關聯性的另一端有導覽屬性。正在設定的實體類型將會是相依項，而且包含主體的外部索引鍵。關聯性所針對的實體類型將會是關聯性中的主體。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression">Lambda 運算式，表示關聯性另一端的導覽屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal">
      <summary>將關聯性設定為 required:required，而且在關聯性的另一端沒有導覽屬性。正在設定的實體類型將會是關聯性中的主體。關聯性所針對的實體類型將會是相依項，而且包含主體的外部索引鍵。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>將關聯性設定為 required:required，而且在關聯性的另一端有導覽屬性。正在設定的實體類型將會是關聯性中的主體。關聯性所針對的實體類型將會是相依項，而且包含主體的外部索引鍵。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression">Lambda 運算式，表示關聯性另一端的導覽屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration">
      <summary>設定用來儲存字串值的資料庫資料行。此組態功能是透過 Code First Fluent 應用程式開發介面所取得，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetHashCode">
      <summary>做為特定類型的雜湊函式。</summary>
      <returns>目前類型的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetType">
      <summary>取得目前執行個體的類型。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>設定資料庫資料行的順序。</summary>
      <returns>相同的 StringColumnConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnOrder">此資料行應該出現在資料庫資料表中的順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnType(System.String)">
      <summary>設定資料庫資料行的資料類型。</summary>
      <returns>相同的 StringColumnConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnType">資料庫提供者特有的資料類型名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>設定此屬性具有指定的最大長度。</summary>
      <returns>相同的 StringColumnConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="value">此屬性的最大長度。設定為 'null' 將會針對此資料行使用預設長度。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsFixedLength">
      <summary>設定此資料行具有固定長度。使用 HasMaxLength 設定此屬性的固定長度。</summary>
      <returns>相同的 StringColumnConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsMaxLength">
      <summary>設定此資料行允許資料庫提供者支援的最大長度。</summary>
      <returns>相同的 StringColumnConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsOptional">
      <summary>將此資料行設定為 optional。</summary>
      <returns>相同的 StringColumnConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsRequired">
      <summary>將此資料行設定為 required。</summary>
      <returns>相同的 StringColumnConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode">
      <summary>設定此資料行支援 Unicode 字串內容。</summary>
      <returns>相同的 StringColumnConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>設定此資料行是否支援 Unicode 字串內容。</summary>
      <returns>相同的 StringColumnConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="unicode">指出此資料行是否支援 Unicode 字串內容的值。指定 'null' 將會從此資料行中移除 Unicode Facet。指定 'null' 將會產生與指定 'false' 相同的執行階段行為。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsVariableLength">
      <summary>設定此資料行具有變動長度。根據預設，資料行具有變動長度。</summary>
      <returns>相同的 StringColumnConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration">
      <summary>用來設定實體類型或複雜類型的 <see cref="T:System.string" /> 屬性。此組態功能是透過 Code First Fluent 應用程式開發介面所取得，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>在模型中設定用來儲存屬性之資料庫資料行的註釋。此註釋值可以在稍後處理資料行 (例如建立移轉) 時使用。</summary>
      <returns>相同的 StringPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="name">註釋名稱，此名稱必須是有效的 C#/EDM 識別項。</param>
      <param name="value">此註釋值可以字串或可透過 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的其他類型。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnName(System.String)">
      <summary>設定用來儲存此屬性的資料庫資料行名稱。</summary>
      <returns>相同的 StringPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnName">資料行名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>設定用來儲存此屬性之資料庫資料行的順序。當實體類型有複合索引鍵時，此方法也會用來指定索引鍵排序。</summary>
      <returns>相同的 StringPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnOrder">此資料行應該出現在資料庫資料表中的順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnType(System.String)">
      <summary>設定用來儲存此屬性之資料庫資料行的資料類型。</summary>
      <returns>相同的 StringPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnType">資料庫提供者特有的資料類型名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>設定資料庫如何產生此屬性的值。</summary>
      <returns>相同的 StringPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="databaseGeneratedOption">用來針對資料庫中的屬性產生值的模式。設定為 'null' 表示將視屬性的類型、它在模型中的語意 (處理主索引鍵的方式不同) 以及所使用的慣例集合而定，使用預設選項「無」、「識別」或「計算」。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>設定此屬性具有指定的最大長度。</summary>
      <returns>相同的 StringPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="value">此屬性的最大長度。設定 'null' 將會從此屬性中移除任何最大長度限制，而且資料庫資料行將會使用預設長度。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken">
      <summary>設定此屬性當做開放式並行存取 Token 使用。</summary>
      <returns>相同的 StringPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>設定此屬性是否當做開放式並行存取 Token 使用。</summary>
      <returns>相同的 StringPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="concurrencyToken">指出此屬性是否為並行 Token 的值。指定 'null' 將會從此屬性中移除並行 Token Facet。指定 'null' 將會產生與指定 'false' 相同的執行階段行為。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsFixedLength">
      <summary>設定此屬性具有固定長度。使用 HasMaxLength 設定此屬性的固定長度。</summary>
      <returns>相同的 StringPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsMaxLength">
      <summary>設定此屬性允許資料庫提供者支援的最大長度。</summary>
      <returns>相同的 StringPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsOptional">
      <summary>將此屬性設定為 optional。用來儲存此屬性的資料庫資料行將會是 nullable。<see cref="T:System.string" /> 屬性預設為選擇項。</summary>
      <returns>相同的 StringPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsRequired">
      <summary>將此屬性設定為 required。用來儲存此屬性的資料庫資料行將不會是 nullable。</summary>
      <returns>相同的 StringPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode">
      <summary>設定此屬性支援 Unicode 字串內容。</summary>
      <returns>相同的 StringPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>設定此屬性是否支援 Unicode 字串內容。</summary>
      <returns>相同的 StringPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="unicode">指出此屬性是否支援 Unicode 字串內容的值。指定 'null' 將會從此屬性中移除 Unicode Facet。指定 'null' 將會產生與指定 'false' 相同的執行階段行為。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsVariableLength">
      <summary>設定此屬性具有變動長度。根據預設，<see cref="T:System.string" /> 屬性具有變動長度。</summary>
      <returns>相同的 StringPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1">
      <summary>允許針對模型中的類型執行組態。</summary>
      <typeparam name="TStructuralType">要設定的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetHashCode">
      <summary>做為特定類型的雜湊函式。</summary>
      <returns>目前物件的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary>設定在此類型上定義的 <see cref="T:System.byte[]" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}})">
      <summary>設定在此類型上定義的 <see cref="T:DbGeography" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}})">
      <summary>設定在此類型上定義的 <see cref="T:DbGeometry" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary>設定在此類型上定義的 <see cref="T:System.DateTime" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary>設定在此類型上定義的 <see cref="T:System.DateTimeOffset" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary>設定在此類型上定義的 <see cref="T:System.decimal" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary>設定在此類型上定義的 <see cref="T:System.DateTime?" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary>設定在此類型上定義的 <see cref="T:System.DateTimeOffset?" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary>設定在此類型上定義的 <see cref="T:System.decimal?" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary>設定在此類型上定義的 <see cref="T:System.TimeSpan?" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary>設定在此類型上定義的 <see cref="T:System.struct?" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="T">正在設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary>設定在此類型上定義的 <see cref="T:System.string" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary>設定在此類型上定義的 <see cref="T:System.TimeSpan" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>設定在此類型上定義的 <see cref="T:System.struct" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="T">正在設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration">
      <summary>允許針對以模型中實體類型為基礎的輕量型慣例執行組態。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration})">
      <summary>允許套用此慣例的實體類型的組態。</summary>
      <param name="entityConfigurationAction">針對 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 執行組態的動作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Equals(System.Object)">
      <summary>指定此執行個體是否等於指定物件。</summary>
      <returns>若此執行個體等於指定物件，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.GetHashCode">
      <summary>取得此執行個體的雜湊碼。</summary>
      <returns>此執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Having``1(System.Func{System.Type,``0})">
      <summary>在擷取值以供稍後設定期間使用時，根據述詞來篩選套用此慣例的實體類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="capturingPredicate">函數，用於擷取每個實體類型的值。如果此值為 null，就會篩選出該實體類型。</param>
      <typeparam name="T">所擷取值的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.ToString">
      <summary>傳回此執行個體的字串表示。</summary>
      <returns>此執行個體的字串表示。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Where(System.Func{System.Type,System.Boolean})">
      <summary>根據述詞來篩選套用此慣例的實體類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="predicate">用來測試每個實體類型是否符合條件的函式。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1">
      <summary>允許針對以模型中實體類型 (繼承自通用的指定類型) 為基礎的輕量型慣例執行組態。</summary>
      <typeparam name="T">套用此慣例的實體類型的通用類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0}})">
      <summary>允許套用此慣例的實體類型的組態。</summary>
      <param name="entityConfigurationAction">針對 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 執行組態的動作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Equals(System.Object)">
      <summary>指定此執行個體是否等於指定物件。</summary>
      <returns>若此執行個體等於指定物件，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetHashCode">
      <summary>取得此執行個體的雜湊碼。</summary>
      <returns>此執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Having``1(System.Func{System.Type,``0})">
      <summary>在擷取值以供稍後設定期間使用時，根據述詞來篩選套用此慣例的實體類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="capturingPredicate">函數，用於擷取每個實體類型的值。如果此值為 null，就會篩選出該實體類型。</param>
      <typeparam name="TValue">所擷取值的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.ToString">
      <summary>傳回此執行個體的字串表示。</summary>
      <returns>此執行個體的字串表示。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Where(System.Func{System.Type,System.Boolean})">
      <summary>根據述詞來篩選套用此慣例的實體類型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="predicate">用來測試每個實體類型是否符合條件的函式。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1">
      <summary>允許針對以模型中實體類型和所擷取的值為基礎的輕量型慣例執行組態。</summary>
      <typeparam name="T">所擷取值的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0})">
      <summary>允許套用此慣例的實體類型的組態。</summary>
      <param name="entityConfigurationAction">使用擷取的值，針對 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 執行組態的動作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要相比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.GetHashCode">
      <summary>擷取目前執行個體的雜湊碼。</summary>
      <returns>目前執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.ToString">
      <summary>將目前執行個體的值轉換為其對應的字串表示。</summary>
      <returns>目前執行個體的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2">
      <summary>允許針對以模型中實體類型 (繼承自通用的指定類型) 和所擷取值為基礎的輕量型慣例執行組態。</summary>
      <typeparam name="T">套用此慣例的實體類型的通用類型。</typeparam>
      <typeparam name="TValue">所擷取值的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0},`1})">
      <summary>允許套用此慣例的實體類型的組態。</summary>
      <param name="entityConfigurationAction">使用擷取的值，針對 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 執行組態的動作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.Equals(System.Object)">
      <summary>指定此執行個體是否等於指定物件。</summary>
      <returns>若此執行個體等於指定物件，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.GetHashCode">
      <summary>取得此執行個體的雜湊碼。</summary>
      <returns>此執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.ToString">
      <summary>傳回此執行個體的字串表示。</summary>
      <returns>此執行個體的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1">
      <summary>允許針對用以更新實體的預存程序執行組態。</summary>
      <typeparam name="TEntityType">使用預存程序可予更新之實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Equals(System.Object)">
      <summary>判斷指定物件是否等於此執行個體物件。</summary>
      <returns>若指定的物件等於此執行個體物件，則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.GetHashCode">
      <summary>擷取雜湊碼。</summary>
      <returns>雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.GetType">
      <summary>擷取此組態的類型。</summary>
      <returns>此組態的類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>設定預存程序的名稱。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="procedureName">預存程序名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>設定預存程序的名稱。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="procedureName">預存程序名稱。</param>
      <param name="schemaName">結構描述名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>針對外部索引鍵屬性未包含在此類別中的關聯性設定參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="navigationPropertyExpression">Lambda 運算式，表示關聯性的導覽屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">執行組態的 Lambda 運算式。</param>
      <typeparam name="TPrincipalEntityType">關聯性中之主體實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>針對外部索引鍵屬性未包含在此類別中的關聯性設定參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="navigationPropertyExpression">Lambda 運算式，表示關聯性的導覽屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">執行組態的 Lambda 運算式。</param>
      <typeparam name="TPrincipalEntityType">關聯性中之主體實體的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String,System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">目前的值參數名稱。</param>
      <param name="originalValueParameterName">原始的值參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String,System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">目前的值參數名稱。</param>
      <param name="originalValueParameterName">原始的值參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String,System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">目前的值參數名稱。</param>
      <param name="originalValueParameterName">原始的值參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
      <typeparam name="TProperty">要設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String,System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">目前的值參數名稱。</param>
      <param name="originalValueParameterName">原始的值參數名稱。</param>
      <typeparam name="TProperty">要設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String,System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">目前的值參數名稱。</param>
      <param name="originalValueParameterName">原始的值參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">參數名稱。</param>
      <typeparam name="TProperty">要設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String)">
      <summary>設定此預存程序的參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定參數的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">目前的值參數名稱。</param>
      <param name="originalValueParameterName">原始的值參數名稱。</param>
      <typeparam name="TProperty">要設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>設定供此預存程序對應至屬性的結果資料行。這是用於資料庫所產生的資料行。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定結果的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果資料行的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>設定供此預存程序對應至屬性的結果資料行。這是用於資料庫所產生的資料行。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定結果的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果資料行的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>設定供此預存程序對應至屬性的結果資料行。這是用於資料庫所產生的資料行。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定結果的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果資料行的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>設定供此預存程序對應至屬性的結果資料行。這是用於資料庫所產生的資料行。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定結果的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果資料行的名稱。</param>
      <typeparam name="TProperty">要設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>設定供此預存程序對應至屬性的結果資料行。這是用於資料庫所產生的資料行。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定結果的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果資料行的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>設定供此預存程序對應至屬性的結果資料行。這是用於資料庫所產生的資料行。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="propertyExpression">Lambda 運算式，表示將要設定結果的屬性。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果資料行的名稱。</param>
      <typeparam name="TProperty">要設定之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.RowsAffectedParameter(System.String)">
      <summary>設定要傳回受此預存程序影響之資料列的輸出參數。</summary>
      <returns>相同的組態執行個體，以便鏈結多個呼叫。</returns>
      <param name="parameterName">參數名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.ToString">
      <summary>將此執行個體的值轉換為其對應的字串表示。</summary>
      <returns>此執行個體值的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration">
      <summary>設定用來區別繼承階層架構中類型之間的鑑別子資料行。此組態功能是透過 Code First Fluent 應用程式開發介面所取得，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetHashCode">
      <summary>做為特定類型的雜湊函式。</summary>
      <returns>目前類型的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(System.Nullable{``0})">
      <summary>設定用來識別正在設定的實體類型與繼承階層架構中其他類型的鑑別子值。</summary>
      <returns>設定用來儲存鑑別子值之資料行的組態物件。</returns>
      <param name="value">用來識別實體類型的值。</param>
      <typeparam name="T">鑑別子值的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue(System.String)">
      <summary>設定用來識別正在設定的實體類型與繼承階層架構中其他類型的鑑別子值。</summary>
      <returns>設定用來儲存鑑別子值之資料行的組態物件。</returns>
      <param name="value">用來識別實體類型的值。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(``0)">
      <summary>設定用來識別正在設定的實體類型與繼承階層架構中其他類型的鑑別子值。</summary>
      <returns>設定用來儲存鑑別子值之資料行的組態物件。</returns>
      <param name="value">用來識別實體類型的值。</param>
      <typeparam name="T">鑑別子值的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention">
      <summary>提供當相關類型之間只有一對導覽屬性存在時，偵測互為反向之導覽屬性的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將此慣例套用至模型中的項目。</summary>
      <param name="item">要套用慣例的項目。</param>
      <param name="model">模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AttributeToColumnAnnotationConvention`2">
      <summary>適用於 Code First 慣例的一般用途類別，這些慣例可從 .NET 屬性 (Property) 讀取屬性 (Attribute) 並根據這些屬性 (Attribute) 產生資料行註釋。</summary>
      <typeparam name="TAttribute">要探索之屬性的類型。</typeparam>
      <typeparam name="TAnnotation">要建立的註釋類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AttributeToColumnAnnotationConvention`2.#ctor(System.String,System.Func{System.Reflection.PropertyInfo,System.Collections.Generic.IList{`0},`1})">
      <summary>建構慣例，此慣例可利用指定的處理站委派來建立具有指定名稱的資料行註釋。</summary>
      <param name="annotationName">要建立的註釋名稱。</param>
      <param name="annotationFactory">用來針對每個資料行建立註釋的處理站。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AttributeToTableAnnotationConvention`2">
      <summary>適用於 Code First 慣例的一般用途類別，這些慣例可從 .NET 類型讀取屬性並根據這些屬性產生資料表註釋。</summary>
      <typeparam name="TAttribute">要探索之屬性的類型。</typeparam>
      <typeparam name="TAnnotation">要建立的註釋類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AttributeToTableAnnotationConvention`2.#ctor(System.String,System.Func{System.Type,System.Collections.Generic.IList{`0},`1})">
      <summary>建構慣例，此慣例可利用指定的處理站委派來建立具有指定名稱的資料表註釋。</summary>
      <param name="annotationName">要建立的註釋名稱。</param>
      <param name="annotationFactory">用來針對每個資料表建立註釋的處理站。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention">
      <summary>表示用於處理在此模型之屬性上找到之 <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.Schema.ColumnAttribute)">
      <summary>將慣例套用至指定組態。</summary>
      <param name="configuration">組態。</param>
      <param name="attribute">資料行屬性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention">
      <summary>表示透過 <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> 或 <see cref="T:System.Data.Entity.DbModelBuilder" /> 應用程式開發介面套用指定之資料行排序的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將組態套用至對應模型中的指定項目。</summary>
      <param name="item">項目。</param>
      <param name="model">對應模型。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.ValidateColumns(System.Data.Entity.Core.Metadata.Edm.EntityType,System.String)">
      <summary>驗證針對資料行提供的排序組態。此基底實作不會執行任何作業。</summary>
      <param name="table">資料行所屬之資料表的名稱。</param>
      <param name="tableName">資料表的定義。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict">
      <summary>套用透過 <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> 或 <see cref="T:System.Data.Entity.DbModelBuilder" /> 應用程式開發介面指定之資料行排序的慣例。如果偵測到重複的已設定資料行順序，此慣例就會擲回。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict.ValidateColumns(System.Data.Entity.Core.Metadata.Edm.EntityType,System.String)">
      <summary>驗證針對資料行提供的排序組態，以確保並未對任兩個資料行提供相同的序數。</summary>
      <param name="table">資料行所屬之資料表的名稱。</param>
      <param name="tableName">資料表的定義。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention">
      <summary>表示用於處理在此模型之類型上找到之 <see cref="T:System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute)">
      <summary>使用指定的組態和屬性來套用慣例。</summary>
      <param name="configuration">組態。</param>
      <param name="attribute">屬性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention">
      <summary>表示當類型沒有主索引鍵、沒有對應的基底類型，也沒有導覽屬性時，將此類型設定為複雜類型的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將組態套用至對應模型中的指定項目。</summary>
      <param name="item">項目。</param>
      <param name="model">對應模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention">
      <summary>表示用於處理在此模型之屬性上找到之 <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute)">
      <summary>將此慣例套用至屬性。</summary>
      <param name="configuration">具有屬性 (Attribute) 之屬性 (Property) 的組態。</param>
      <param name="attribute">屬性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.Convention">
      <summary>不會覆寫組態的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.#ctor">
      <summary>衍生類別可以使用預設建構函式，套用一組可變更模型組態的規則。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Properties">
      <summary>開始組態輕量型慣例以套用至模型中的所有屬性。</summary>
      <returns>慣例的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Properties``1">
      <summary>開始組態輕量型慣例以套用至模型中指定之類型的所有基本屬性。</summary>
      <returns>慣例的組態物件。</returns>
      <typeparam name="T">將要套用此慣例的屬性所屬類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Types``1">
      <summary>開始組態輕量型慣例以套用至模型中衍生自或實作指定之類型的所有對應類型。</summary>
      <returns>慣例的組態物件。</returns>
      <typeparam name="T">將要套用此慣例的實體所屬類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Types">
      <summary>開始組態輕量型慣例以套用至模型中的所有對應類型。</summary>
      <returns>慣例的組態物件。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention">
      <summary>表示用於處理在此模型之屬性上找到之 <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute)">
      <summary>將慣例套用至給定組態的屬性。</summary>
      <param name="configuration">組態。</param>
      <param name="attribute">屬性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention">
      <summary>針對十進位屬性將有效位數設定為 18 並將小數位數設定為 2 的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.#ctor">
      <summary>使用預設值初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.#ctor(System.Byte,System.Byte)">
      <summary>使用指定的有效位數和小數位數，初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention" /> 的新執行個體。</summary>
      <param name="precision">精確度</param>
      <param name="scale">Scale</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將此慣例套用至屬性。</summary>
      <param name="item">項目。</param>
      <param name="model">模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention">
      <summary>表示移動主索引鍵屬性，以使其最先出現的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將此慣例套用至模型中的項目。</summary>
      <param name="item">要套用慣例的項目。</param>
      <param name="model">模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention">
      <summary>表示慣例，該慣例可根據外部索引鍵屬性之 CLR 可為 Null 的屬性來區別選擇性的和必要的關聯性。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將組態套用至對應模型中的指定項目。</summary>
      <param name="item">項目。</param>
      <param name="model">對應模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention">
      <summary>表示用以探索外部索引鍵屬性之慣例的基底類別。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將此慣例套用至屬性。</summary>
      <param name="item">項目。</param>
      <param name="model">模型。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>若 <paramref name="dependentProperty" /> 應為外部索引鍵的一部分，覆寫時會傳回 true。</summary>
      <returns>若 dependentProperty 應為外部索引鍵的一部分，則為 true，否則為 false。</returns>
      <param name="associationType">正在設定的關聯類型。</param>
      <param name="dependentAssociationEnd">相依端點。</param>
      <param name="dependentProperty">相依端點上的候選屬性。</param>
      <param name="principalEntityType">主體端點實體類型。</param>
      <param name="principalKeyProperty">主體端點上做為外部索引鍵候選目標的索引鍵屬性。</param>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.SupportsMultipleAssociations">
      <summary>取得慣例是否支援彼此間已有定義多個關聯之實體類型的配對。</summary>
      <returns>若慣例支援彼此間已有定義多個關聯之實體類型的配對，則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention">
      <summary>表示導入外部索引鍵之索引時所使用的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將此慣例套用至屬性。</summary>
      <param name="item">項目。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention">
      <summary>表示會用於處理在此模型之導覽屬性上找到之 <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention.Apply(System.Data.Entity.Core.Metadata.Edm.NavigationProperty,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將此慣例套用至模型中的項目。</summary>
      <param name="item">要套用慣例的項目。</param>
      <param name="model">資料庫模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention">
      <summary>表示在此模型的外部索引鍵屬性上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute)">
      <summary>將慣例套用至指定的屬性。</summary>
      <param name="memberInfo">屬性資訊。</param>
      <param name="configuration">要對模型中之實體類型執行的組態。</param>
      <param name="attribute">從資料庫對應中排除的屬性或類別。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1">
      <summary>在建立模型之後，於模型之概念部分運作的慣例。</summary>
      <typeparam name="T">此慣例運作的目標中繼資料項目類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1.Apply(`0,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將此慣例套用至模型中的項目。</summary>
      <param name="item">要套用慣例的項目。</param>
      <param name="model">模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConvention">
      <summary>識別可以加入至 <see cref="T:System.Data.Entity.DbModelBuilder" /> 執行個體或從其中移除的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention">
      <summary>偵測主索引鍵屬性的慣例。辨識的命名模式的優先順序是：1. 'Id' 2.[type name]Id 主索引鍵的偵測不區分大小寫。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention.MatchKeyProperty(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>符合 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> 類別的慣例。</summary>
      <returns>要符合的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> 類別。</returns>
      <param name="entityType">實體類型。</param>
      <param name="primitiveProperties">基本屬性的集合。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IndexAttributeConvention">
      <summary>用來在模型中針對屬性 (Property) 探索 <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> 屬性 (Attribute) 以及產生 <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> 資料行註釋的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IndexAttributeConvention.#ctor">
      <summary>建構慣例的新執行個體。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention">
      <summary>表示用於處理在此模型之屬性上找到之 <see cref="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute)">
      <summary>將慣例套用至指定組態的屬性。</summary>
      <param name="memberInfo">成員資訊。</param>
      <param name="configuration">組態。</param>
      <param name="attribute">屬性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1">
      <summary>在建立模型之後，於模型之資料庫部分運作的慣例。</summary>
      <typeparam name="T">此慣例運作的目標中繼資料項目類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1.Apply(`0,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將此慣例套用至模型中的項目。</summary>
      <param name="item">要套用慣例的項目。</param>
      <param name="model">模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention">
      <summary>在此模型的屬性上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention">
      <summary>表示用以探索主索引鍵屬性之慣例的基底類別。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將此慣例套用至模型中的項目。</summary>
      <param name="item">要套用慣例的項目。</param>
      <param name="model">模型。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.MatchKeyProperty(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>覆寫時會傳回屬於主索引鍵一部分之屬性的子集。</summary>
      <returns>應為主索引鍵一部分的屬性。</returns>
      <param name="entityType">實體類型。</param>
      <param name="primitiveProperties">實體的基本類型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention">
      <summary>在與多對多關聯性相關之兩個資料表的聯結資料表中加入串聯刪除的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention">
      <summary>慣例，用以確保在對應繼承的屬性時不會建立無效或不支援的對應</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention">
      <summary>表示用於處理在此模型之屬性上找到之 <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.MaxLengthAttribute)">
      <summary>將慣例套用至指定組態的屬性。</summary>
      <param name="configuration">組態。</param>
      <param name="attribute">屬性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention">
      <summary>用來探索名稱為相依導覽屬性名稱與主體類型主索引鍵屬性名稱組合之外部索引鍵屬性的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>比對相依實體模型的索引鍵。</summary>
      <returns>傳回 <see cref="T:System.Boolean" />。</returns>
      <param name="associationType">關聯類型繼資料物件。</param>
      <param name="dependentAssociationEnd">相依關聯的端點。</param>
      <param name="dependentProperty">相依屬性。</param>
      <param name="principalEntityType">主體實體類型</param>
      <param name="principalKeyProperty">主體索引鍵屬性。</param>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.SupportsMultipleAssociations">
      <summary>取得或設定值，此值表示慣例是否支援多個關聯。</summary>
      <returns>如果慣例支援多個關聯，則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention">
      <summary>表示用於處理在此模型之屬性上找到之 <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute)">
      <summary>將慣例套用至指定的屬性。</summary>
      <param name="memberInfo">屬性資訊。</param>
      <param name="configuration">要對模型中之實體類型執行的組態。</param>
      <param name="attribute">從資料庫對應中排除的屬性或類別。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention">
      <summary>表示在此模型的類型上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute)">
      <summary>將慣例套用至指定的屬性。</summary>
      <param name="configuration">要對模型中之實體類型執行的組態。</param>
      <param name="attribute">從資料庫對應中排除的屬性或類別。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention">
      <summary>提供用於對任何必要關聯性啟用串聯刪除的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將此慣例套用至模型中的項目。</summary>
      <param name="item">要套用慣例的項目。</param>
      <param name="model">資料庫模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention">
      <summary>提供在一對一關聯性中將相依實體類型的主索引鍵設定為外部索引鍵的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將此慣例套用至模型中的項目。</summary>
      <param name="item">要套用慣例的項目。</param>
      <param name="model">資料庫模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention">
      <summary>表示將實體集名稱設定為實體類型名稱之複數化版本的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將此慣例套用至屬性。</summary>
      <param name="item">實體集。</param>
      <param name="model">資料庫模型</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention">
      <summary>表示將資料表名稱設定為實體類型名稱之複數化版本的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將此慣例套用至模型中的項目。</summary>
      <param name="item">要套用慣例的項目。</param>
      <param name="model">模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention">
      <summary>用來探索名稱符合主體類型主索引鍵屬性名稱之外部索引鍵屬性的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>符合與慣例相關聯的相依索引鍵屬性。</summary>
      <returns>相符的相依索引鍵屬性。</returns>
      <param name="associationType">關聯類型。</param>
      <param name="dependentAssociationEnd">相依關聯 End。</param>
      <param name="dependentProperty">相依屬性。</param>
      <param name="principalEntityType">主體實體類型。</param>
      <param name="principalKeyProperty">主體索引鍵屬性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1">
      <summary>慣例的基底類別，該慣例會處理在模型中所找到基本屬性 (Property) 的 CLR 屬性 (Attribute)。</summary>
      <typeparam name="TAttribute">要尋找之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,`0)">
      <summary>將此慣例套用至具有已套用 TAttribute 類型之屬性 (Attribute) 的屬性 (Property)。</summary>
      <param name="configuration">具有屬性 (Attribute) 之屬性 (Property) 的組態。</param>
      <param name="attribute">屬性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1">
      <summary>慣例的基底類別，該慣例會處理在模型中所找到類型之屬性 (Property) 的 CLR 屬性 (Attribute)。</summary>
      <typeparam name="TAttribute">要尋找之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0)">
      <summary>將此慣例套用至具有已套用 TAttribute 類型之屬性 (Attribute) 的屬性 (Property)。</summary>
      <param name="memberInfo">具有屬性 (Attribute) 之屬性 (Property) 的成員資訊。</param>
      <param name="configuration">包含屬性 (Property) 之類別的組態。</param>
      <param name="attribute">屬性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention">
      <summary>表示為類型支援長度 Facet 的屬性設定長度上限的慣例。預設值為 128。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.#ctor">
      <summary>使用預設長度，初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.#ctor(System.Int32)">
      <summary>使用指定的長度，初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention" /> 的新執行個體。</summary>
      <param name="length">屬性的長度上限。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將慣例套用至指定的模型組態。</summary>
      <param name="item">項目。</param>
      <param name="model">對應模型。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將慣例套用至指定的模型組態。</summary>
      <param name="item">項目。</param>
      <param name="model">對應模型。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將慣例套用至指定的模型組態。</summary>
      <param name="item">項目。</param>
      <param name="model">對應模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention">
      <summary>在此模型的導覽屬性上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention">
      <summary>表示用於處理在此模型之基本屬性上找到之 <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.RequiredAttribute)">
      <summary>將慣例套用至給定組態的屬性。</summary>
      <param name="configuration">組態。</param>
      <param name="attribute">屬性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention">
      <summary>表示當提供者是 SqlCe 時，為類型支援長度 Facet 的屬性，將預設長度上限設為 4000 的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.#ctor">
      <summary>使用預設長度初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.#ctor(System.Int32)">
      <summary>使用指定的長度初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention" /> 的新執行個體。</summary>
      <param name="length">屬性的預設長度上限。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將慣例套用至指定的提供者。</summary>
      <param name="item">項目。</param>
      <param name="model">模型。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將慣例套用至指定的提供者。</summary>
      <param name="item">項目。</param>
      <param name="model">模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention">
      <summary>表示將整數主索引鍵設定為識別的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>將組態套用至對應模型中的指定項目。</summary>
      <param name="item">項目。</param>
      <param name="model">對應模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention">
      <summary>表示用於處理在此模型之屬性上找到之 <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.StringLengthAttribute)">
      <summary>使用指定的組態和屬性來套用慣例。</summary>
      <param name="configuration">組態。</param>
      <param name="attribute">屬性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention">
      <summary>表示在此模型的類型上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.TableAttribute)">
      <summary>將此慣例套用至屬性。</summary>
      <param name="configuration">具有屬性 (Attribute) 之屬性 (Property) 的組態。</param>
      <param name="attribute">屬性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention">
      <summary>表示用於處理在此模型之屬性上找到之 <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.TimestampAttribute)">
      <summary>將此慣例套用至屬性。</summary>
      <param name="configuration">具有屬性 (Attribute) 之屬性 (Property) 的組態。</param>
      <param name="attribute">屬性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1">
      <summary>慣例的基底類別，該慣例會處理在模型中找到的 CLR 屬性。</summary>
      <typeparam name="TAttribute">要尋找之屬性的類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0)">
      <summary>將此慣例套用至具有已套用 TAttribute 類型之屬性的類別。</summary>
      <param name="configuration">包含屬性 (Property) 之類別的組態。</param>
      <param name="attribute">屬性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention">
      <summary>用來探索名稱為主體類型名稱與主體類型主索引鍵屬性名稱組合之外部索引鍵屬性的慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>判斷相依索引鍵的屬性是否符合目前的索引鍵。</summary>
      <returns>如果相依索引鍵的屬性符合目前的索引鍵，則為 true，否則為 false。</returns>
      <param name="associationType">關聯類型。</param>
      <param name="dependentAssociationEnd">End 的相依關聯。</param>
      <param name="dependentProperty">相依屬性。</param>
      <param name="principalEntityType">主體實體類型。</param>
      <param name="principalKeyProperty">主體索引鍵屬性。</param>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeography">
      <summary>表示測地學 (圓形大地) 座標系統中的資料。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Area">
      <summary>取得可為 null 的雙精度浮點數值，指出此 DbGeography 值的範圍，如果此值不代表表面，就可能為 null。</summary>
      <returns>表示此 DbGeography 值之面積的可為 Null 的雙精度值。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsBinary">
      <summary>產生此 DbGeography 值的已知二進位表示。</summary>
      <returns>此 DbGeography 值的已知二進位表示。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsGml">
      <summary>產生此 DbGeography 值的地理標記語言 (GML) 表示。</summary>
      <returns>包含此 DbGeography 值之 GML 表示的字串。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsText">
      <summary>產生此 DbGeography 值的已知文字表示。只包含點的經度和緯度。</summary>
      <returns>包含此 DbGeography 值之已知文字表示的字串。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Buffer(System.Nullable{System.Double})">
      <summary>傳回地理物件，代表與地理執行個體之間的距離小於或等於指定值的所有點的聯集。</summary>
      <returns>表示所有點的聯集的地理物件</returns>
      <param name="distance">距離。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.CoordinateSystemId">
      <summary>取得與座標系統關聯的識別項。</summary>
      <returns>與座標系統關聯的識別項。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId">
      <summary>取得地理位置值 (WGS 84) 的預設座標系統 ID (SRID)</summary>
      <returns>地理位置值 (WGS 84) 的預設座標系統 ID (SRID)</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Difference(System.Data.Entity.Spatial.DbGeography)">
      <summary>計算此 DbGeography 值與另一個 DbGeography 值的差異。</summary>
      <returns>表示此地理位置值與 other 之間差異的新 DbGeography 值。</returns>
      <param name="other">應該針對此地理位置值計算與此值的差異。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Dimension">
      <summary>取得給定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的維度，如果值是集合，則為其最大項目的維度。</summary>
      <returns>給定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的維度。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Disjoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>從指定的 DbGeography 引數判斷此 DbGeography 是否在空間上不相交。</summary>
      <returns>如果 other 與此地理位置值沒有交集，則為 true，否則為 false。</returns>
      <param name="other">應該和此地理位置值針對不相交做比較的地理位置值。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Distance(System.Data.Entity.Spatial.DbGeography)">
      <summary>計算此 DbGeography 值與另一個 DbGeography 值中最接近點之間的距離。</summary>
      <returns>指定此地理位置值與 other 中兩個最接近點之間距離的雙精度浮點數值。</returns>
      <param name="other">應該針對此地理位置值計算與此值的距離。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.ElementAt(System.Int32)">
      <summary>從指定位置傳回此 DbGeography 值的項目 (若此值代表地理集合)。&amp;amp;lt;param name="index"&amp;amp;gt;此地理位置值中的位置，應該在此取得項目。&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;returns&amp;amp;gt;如果此地理位置值代表其他地理位置值的集合，即為其中位於指定之位置的項目，否則為 null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>從此 DbGeography 值中取自特定位置的項目</returns>
      <param name="index">索引。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.ElementCount">
      <summary>取得此 DbGeography 值 (如果代表地理位置集合) 中的項目數目。&amp;amp;lt;returns&amp;amp;gt;如果此地理位置值代表其他地理位置值的集合，即為其中的項目數，否則為 null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>此 DbGeography 值中的項目數目。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Elevation">
      <summary>取得此 DbGeography 值的高度 (Z 座標) (如果它代表點)。&amp;amp;lt;returns&amp;amp;gt;如果此地理位置值代表點，即為該點的高度 (Z 座標) 值，否則為 null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>此 DbGeography 值的高度 (Z 座標)。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.EndPoint">
      <summary>取得 DbGeography 值，表示此值的起始點，如果此 DbGeography 值不代表曲線，就可能為 null。</summary>
      <returns>表示此值之起始點的 DbGeography 值。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromBinary(System.Byte[])">
      <summary>根據指定的已知二進位值，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>新的 DbGeography 值，由含有預設地理座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 的已知二進位值所定義。</returns>
      <param name="wellKnownBinary">包含地理位置值的已知二進位表示的位元組陣列。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>新的 DbGeography 值，由含有指定的座標系統識別項的已知二進位值所定義。</returns>
      <param name="wellKnownBinary">包含地理位置值的已知二進位表示的位元組陣列。</param>
      <param name="coordinateSystemId">新的 DbGeography 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromGml(System.String)">
      <summary>根據指定的地理標記語言 (GML) 值，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>新的 DbGeography 值，由含有預設地理座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 的 GML 值所定義。</returns>
      <param name="geographyMarkup">包含地理位置值之地理標記語言 (GML) 表示的字串。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromGml(System.String,System.Int32)">
      <summary>根據指定的地理標記語言 (GML) 值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>新的 DbGeography 值，由含有指定之座標系統識別項的 GML 值所定義。</returns>
      <param name="geographyMarkup">包含地理位置值之地理標記語言 (GML) 表示的字串。</param>
      <param name="coordinateSystemId">新的 DbGeography 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromText(System.String)">
      <summary>根據指定的已知文字值，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>新的 DbGeography 值，由含有預設地理座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 的已知文字值所定義。</returns>
      <param name="wellKnownText">包含地理位置值之已知文字表示的字串。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>新的 DbGeography 值，由含有指定的座標系統識別項的已知文字值所定義。</returns>
      <param name="wellKnownText">包含地理位置值之已知文字表示的字串。</param>
      <param name="coordinateSystemId">新的 DbGeography 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 集合值。</summary>
      <returns>新的 DbGeography 值，由含有指定的座標系統識別項的已知二進位值所定義。</returns>
      <param name="geographyCollectionWellKnownBinary">包含地理位置值的已知二進位表示的位元組陣列。</param>
      <param name="coordinateSystemId">新的 DbGeography 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 集合值。</summary>
      <returns>新的 DbGeography 值，由含有指定的座標系統識別項的已知文字值所定義。</returns>
      <param name="geographyCollectionWellKnownText">包含地理位置值之已知文字表示的字串。</param>
      <param name="coordinateSystemId">新的 DbGeography 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Intersection(System.Data.Entity.Spatial.DbGeography)">
      <summary>計算此 DbGeography 值與另一個 DbGeography 值的交集。</summary>
      <returns>表示此地理位置值與 other 之間交集的新 DbGeography 值。</returns>
      <param name="other">應該針對此地理位置值計算與此值的交集。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Intersects(System.Data.Entity.Spatial.DbGeography)">
      <summary>判斷此 DbGeography 值是否在空間上與指定的 DbGeography 引數有交集。</summary>
      <returns>如果 other 與此地理位置值有交集，則為 true，否則為 false。</returns>
      <param name="other">應該和此地理位置值針對交集做比較的地理位置值。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.IsClosed">
      <summary>取得可為 null 的布林值，指出此 DbGeography 值是否封閉，如果此值不代表曲線，就可能為 null。</summary>
      <returns>如果此 DbGeography 值是封閉的，則為 True，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.IsEmpty">
      <summary>取得可為 Null 的布林值，指出此 DbGeography 值是否是空的。</summary>
      <returns>如果此 DbGeography 值是空的，則為 True，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Latitude">
      <summary>取得此 DbGeography 值的緯度座標 (如果它代表點)。&amp;amp;lt;returns&amp;amp;gt;如果此地理位置值代表點，即為該點的緯度座標值，否則為 null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>此 DbGeography 值的緯度座標。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Length">
      <summary>取得可為 null 的雙精度浮點數值，指出此 DbGeography 值的長度，如果此值不代表曲線，就可能為 null。</summary>
      <returns>表示此 DbGeography 值之長度的可為 Null 的雙精度值。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.LineFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 線值。</summary>
      <returns>新的 DbGeography 值，由含有指定的座標系統識別項的已知二進位值所定義。</returns>
      <param name="lineWellKnownBinary">包含地理位置值的已知二進位表示的位元組陣列。</param>
      <param name="coordinateSystemId">新的 DbGeography 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.LineFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 線值。</summary>
      <returns>新的 DbGeography 值，由含有指定的座標系統識別項的已知文字值所定義。</returns>
      <param name="lineWellKnownText">包含地理位置值之已知文字表示的字串。</param>
      <param name="coordinateSystemId">新的 DbGeography 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Longitude">
      <summary>取得此 DbGeography 值的經度座標 (如果它代表點)。&amp;amp;lt;returns&amp;amp;gt;如果此地理位置值代表點，即為該點的經度座標值，否則為 null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>此 DbGeography 值的經度座標。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Measure">
      <summary>取得此 DbGeography 值的 M (量值) 座標 (如果它代表點)。&amp;amp;lt;returns&amp;amp;gt;如果此地理位置值代表點，即為該點的 M (量值) 座標值，否則為 null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>此 DbGeography 值的 M (量值) 座標。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>從二進位值傳回多線值。</summary>
      <returns>來自二進位值的多線值。</returns>
      <param name="multiLineWellKnownBinary">已知二進位值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiLineFromText(System.String,System.Int32)">
      <summary>從已知文字值傳回多線值。</summary>
      <returns>來自已知文字值的多線值。</returns>
      <param name="multiLineWellKnownText">已知文字。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>從已知二進位值傳回多點值。</summary>
      <returns>來自已知二進位值的多點值。</returns>
      <param name="multiPointWellKnownBinary">已知二進位值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPointFromText(System.String,System.Int32)">
      <summary>從已知文字值傳回多點值。</summary>
      <returns>來自已知文字值的多點值。</returns>
      <param name="multiPointWellKnownText">已知文字值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>從已知二進位值傳回多多邊形值。</summary>
      <returns>來自已知二進位值的多多邊形值。</returns>
      <param name="multiPolygonWellKnownBinary">多多邊形已知二進位值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPolygonFromText(System.String,System.Int32)">
      <summary>從已知文字值傳回多多邊形值。</summary>
      <returns>來自已知文字值的多多邊形值。</returns>
      <param name="multiPolygonWellKnownText">多多邊形已知文字值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointAt(System.Int32)">
      <summary>從指定位置傳回此 DbGeography 值的項目 (如果它代表 linestring 或線型圓圈)。&amp;amp;lt;param name="index"&amp;amp;gt;此地理位置值中的位置，應該在此取得項目。&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;returns&amp;amp;gt;如果此地理位置值代表 linestring 或線型圓圈，即為其中位於指定之位置的項目，否則為 null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>從此 DbGeography 值中取自特定位置的項目</returns>
      <param name="index">索引。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.PointCount">
      <summary>取得此 DbGeography 值中的點數 (如果它代表 linestring 或線型圓圈)。&amp;amp;lt;returns&amp;amp;gt;如果此地理位置值代表 linestring 或線型圓圈，即為其中的項目數，否則為 null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>此 DbGeography 值中的點數目。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 點值。</summary>
      <returns>新的 DbGeography 值，由含有指定的座標系統識別項的已知二進位值所定義。</returns>
      <param name="pointWellKnownBinary">包含地理位置值的已知二進位表示的位元組陣列。</param>
      <param name="coordinateSystemId">新的 DbGeography 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 點值。</summary>
      <returns>新的 DbGeography 值，由含有指定的座標系統識別項的已知文字值所定義。</returns>
      <param name="pointWellKnownText">包含地理位置值之已知文字表示的字串。</param>
      <param name="coordinateSystemId">新的 DbGeography 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多邊形值。</summary>
      <returns>新的 DbGeography 值，由含有指定的座標系統識別項的已知二進位值所定義。</returns>
      <param name="polygonWellKnownBinary">包含地理位置值的已知二進位表示的位元組陣列。</param>
      <param name="coordinateSystemId">新的 DbGeography 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PolygonFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多邊形值。</summary>
      <returns>新的 DbGeography 值，由含有指定的座標系統識別項的已知文字值所定義。</returns>
      <param name="polygonWellKnownText">包含地理位置值之已知文字表示的字串。</param>
      <param name="coordinateSystemId">新的 DbGeography 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Provider">
      <summary>取得要用於此空間類型之作業的空間提供者。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.ProviderValue">
      <summary>取得此 DbGeography 值的表示，此值是建構它的基礎提供者專用的。</summary>
      <returns>此 DbGeography 值的表示法。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.SpatialEquals(System.Data.Entity.Spatial.DbGeography)">
      <summary>判斷此 DbGeography 是否在空間上等於指定的 DbGeography 引數。</summary>
      <returns>如果在空間上 other 等於此地理位置值，則為 true，否則為 false。</returns>
      <param name="other">應該和此地理位置值針對相等做比較的地理位置值。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.SpatialTypeName">
      <summary>取得 DBGeography 的空間類型名稱。</summary>
      <returns>DBGeography 的空間類型名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.StartPoint">
      <summary>取得 DbGeography 值，表示此值的起始點，如果此 DbGeography 值不代表曲線，就可能為 null。</summary>
      <returns>表示此值之起始點的 DbGeography 值。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.SymmetricDifference(System.Data.Entity.Spatial.DbGeography)">
      <summary>計算此 DbGeography 值與另一個 DbGeography 值的對稱差異。</summary>
      <returns>表示此地理位置值與 other 之間對稱差異的新 DbGeography 值。</returns>
      <param name="other">應該針對此地理位置值計算與此值的對稱差異。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.ToString">
      <summary>傳回地理位置值的字串表示。</summary>
      <returns>地理位置值的字串表示。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Union(System.Data.Entity.Spatial.DbGeography)">
      <summary>計算此 DbGeography 值與另一個 DbGeography 值的聯集。</summary>
      <returns>表示此地理位置值與 other 之間聯集的新 DbGeography 值。</returns>
      <param name="other">應該針對此地理位置值計算與此值的聯集。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.WellKnownValue">
      <summary>取得或設定此 DbGeography 值的資料合約可序列化已知表示。</summary>
      <returns>此 DbGeography 值的資料合約可序列化已知表示法。</returns>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值之資料合約的可序列化表示。</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeographyWellKnownValue.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.CoordinateSystemId">
      <summary>取得或設定此值的座標系統識別項 (SRID)。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.WellKnownBinary">
      <summary>取得或設定此值的已知二進位表示。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.WellKnownText">
      <summary>取得或設定此值的已知文字表示。</summary>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeometry">
      <summary>表示幾何圖案。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Area">
      <summary>取得可為 null 的雙精度浮點數值，指出此 DbGeometry 值的範圍，如果此值不代表表面，就可能為 null。</summary>
      <returns>可為 null 的雙精度浮點數值，表示此 DbGeometry 值的面積。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsBinary">
      <summary>產生此 DbGeometry 值的已知二進位表示。</summary>
      <returns>此 DbGeometry 值的已知二進位表示法。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsGml">
      <summary>產生此 DbGeometry 值的地理標記語言 (GML) 表示。</summary>
      <returns>包含此 DbGeometry 值之 GML 表示的字串。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsText">
      <summary>產生此 DbGeometry 值的已知文字表示。只包含點的 X 和 Y 座標。</summary>
      <returns>包含此 DbGeometry 值之已知文字表示的字串。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Boundary">
      <summary>取得 DbGeometry 物件的界限。</summary>
      <returns>DbGeometry 物件的界限。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Buffer(System.Nullable{System.Double})">
      <summary>傳回幾何物件，代表與幾何執行個體之間的距離小於或等於指定值的所有點的聯集。</summary>
      <returns>表示所有點的聯集的幾何物件。</returns>
      <param name="distance">距離。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Centroid">
      <summary>取得 DbGeometry 值，表示此 DbGeometry 值的中心點，如果此值不代表表面，就可能為 null。</summary>
      <returns>DbGeometry 值，表示此 DbGeometry 值的中心點。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Contains(System.Data.Entity.Spatial.DbGeometry)">
      <summary>判斷此 DbGeometry 值是否在空間上包含指定的 DbGeometry 引數。</summary>
      <returns>若此幾何值包含 other，則為 true，否則為 false。</returns>
      <param name="other">應該和此幾何值針對內含項目做比較的幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ConvexHull">
      <summary>取得此 DbGeometry 值的凸殼 (Convex Hull)，做為另一個 DbGeometry 值。</summary>
      <returns>此 DbGeometry 值的凸殼 (Convex Hull)，做為另一個 DbGeometry 值。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.CoordinateSystemId">
      <summary>取得 DbGeometry 物件的座標系統識別項。</summary>
      <returns>DbGeometry 物件的座標系統識別項。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Crosses(System.Data.Entity.Spatial.DbGeometry)">
      <summary>判斷此 DbGeometry 值是否在空間上與指定的 DbGeometry 引數交叉。</summary>
      <returns>若 other 與此幾何值交叉，則為 true，否則為 false。</returns>
      <param name="other">應該和此幾何值做比較的幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId">
      <summary>取得幾何值的預設座標系統 ID (SRID)。</summary>
      <returns>幾何值的預設座標系統 ID (SRID)。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Difference(System.Data.Entity.Spatial.DbGeometry)">
      <summary>計算此 DbGeometry 值與另一個 DbGeometry 值之間的差異。</summary>
      <returns>表示此幾何值與 other 之間差異的新 DbGeometry 值。</returns>
      <param name="other">應該針對此幾何值計算與此值的差異。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Dimension">
      <summary>取得給定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的維度，如果值是集合，則為其最大項目的維度。</summary>
      <returns>給定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的維度。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Disjoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>判斷此 DbGeometry 是否在空間上與指定的 DbGeometry 引數不相交。</summary>
      <returns>若 other 與此幾何值沒有交集，則為 true，否則為 false。</returns>
      <param name="other">應該和此幾何值針對不相交做比較的幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Distance(System.Data.Entity.Spatial.DbGeometry)">
      <summary>計算此 DbGeometry 值與另一個 DbGeometry 值中最接近點之間的距離。</summary>
      <returns>指定此幾何值與 other 中兩個最接近點之間距離的雙精度浮點數值。</returns>
      <param name="other">應該針對此幾何值計算與此值的距離。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.ElementAt(System.Int32)">
      <summary>從指定位置傳回此 DbGeometry 值的項目，若此項目代表幾何集合。</summary>
      <returns>此幾何值中位於指定位置的項目 (若其表示其他幾何值的集合)，否則為 null。</returns>
      <param name="index">此幾何值中的位置，應該在此取得項目。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ElementCount">
      <summary>取得此 DbGeometry 值中的項目數目 (如果它表示幾何集合)。</summary>
      <returns>此幾何值中的項目數 (若其表示其他幾何值的集合)，否則為 null。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Elevation">
      <summary>取得此 DbGeometry 值 (如果代表點) 的高度 (Z 座標)。</summary>
      <returns>此 DbGeometry 值的高度 (Z 座標) (若其代表點)，否則為 null。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.EndPoint">
      <summary>取得 DbGeometry 值，表示此值的起始點，如果此 DbGeometry 值不代表曲線，就可能為 null。</summary>
      <returns>表示此值之起始點的 DbGeometry 值。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Envelope">
      <summary>取得此 DbGeometry 值的封套 (最小的周框方塊)，做為幾何值。</summary>
      <returns>此 DbGeometry 值的封套 (最小的周框方塊)。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ExteriorRing">
      <summary>取得 DbGeometry 值，表示此 DbGeometry 值的外環，如果此值不代表多邊形，就可能為 null。</summary>
      <returns>表示此 DbGeometry 值其外環的 DbGeometry 值。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromBinary(System.Byte[])">
      <summary>根據指定的已知二進位值，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>新的 DbGeometry 值，由含有預設幾何座標系統識別項 (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 的已知二進位值所定義。</returns>
      <param name="wellKnownBinary">包含幾何值的已知二進位表示的位元組陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>新的 DbGeometry 值，由含有指定的座標系統識別項的已知二進位值所定義。</returns>
      <param name="wellKnownBinary">包含幾何值的已知二進位表示的位元組陣列。</param>
      <param name="coordinateSystemId">新的 DbGeometry 值應該使用的座標系統的識別項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 無效。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromGml(System.String)">
      <summary>根據指定的地理標記語言 (GML) 值，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>新的 DbGeometry 值，由含有預設幾何座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 的 GML 值所定義。</returns>
      <param name="geometryMarkup">包含幾何值之地理標記語言 (GML) 表示的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromGml(System.String,System.Int32)">
      <summary>根據指定的地理標記語言 (GML) 值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>新的 DbGeometry 值，由含有指定之座標系統識別項的 GML 值所定義。</returns>
      <param name="geometryMarkup">包含幾何值之地理標記語言 (GML) 表示的字串。</param>
      <param name="coordinateSystemId">新的 DbGeometry 值應該使用的座標系統的識別項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 無效。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromText(System.String)">
      <summary>根據指定的已知文字值，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>新的 DbGeometry 值，由含有預設幾何座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 的已知文字值所定義。</returns>
      <param name="wellKnownText">包含幾何值之已知文字表示的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>新的 DbGeometry 值，由含有指定的座標系統識別項的已知文字值所定義。</returns>
      <param name="wellKnownText">包含幾何值之已知文字表示的字串。</param>
      <param name="coordinateSystemId">新的 DbGeometry 值應該使用的座標系統的識別項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 無效。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 集合值。</summary>
      <returns>新的 DbGeometry 值，由含有指定的座標系統識別項的已知二進位值所定義。</returns>
      <param name="geometryCollectionWellKnownBinary">包含幾何值的已知二進位表示的位元組陣列。</param>
      <param name="coordinateSystemId">新的 DbGeometry 值應該使用的座標系統的識別項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownBinary" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 無效。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 集合值。</summary>
      <returns>新的 DbGeometry 值，由含有指定的座標系統識別項的已知文字值所定義。</returns>
      <param name="geometryCollectionWellKnownText">包含幾何值之已知文字表示的字串。</param>
      <param name="coordinateSystemId">新的 DbGeometry 值應該使用的座標系統的識別項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownText" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 無效。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.InteriorRingAt(System.Int32)">
      <summary>從指定位置傳回此 DbGeometry 值的內環，若此值代表多邊形。</summary>
      <returns>此幾何值中位於指定位置的內環 (若其代表多邊形)，否則為 null。</returns>
      <param name="index">此幾何值中的位置，應該在此取得內環。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.InteriorRingCount">
      <summary>取得此 DbGeometry 值中的內環數目 (如果它代表多邊形)。</summary>
      <returns>此幾何值中的項目數 (若其代表多邊形)，否則為 null。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Intersection(System.Data.Entity.Spatial.DbGeometry)">
      <summary>計算此 DbGeometry 值與另一個 DbGeometry 值的交集。</summary>
      <returns>表示此幾何值與 other 之間交集的新 DbGeometry 值。</returns>
      <param name="other">應該針對此幾何值計算與此值的交集。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Intersects(System.Data.Entity.Spatial.DbGeometry)">
      <summary>判斷此 DbGeometry 值是否在空間上與指定的 DbGeometry 引數有交集。</summary>
      <returns>若 other 與此幾何值有交集，則為 true，否則為 false。</returns>
      <param name="other">應該和此幾何值針對交集做比較的幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsClosed">
      <summary>取得可為 null 的布林值，指出此 DbGeometry 值是否封閉，如果此值不代表曲線，就可能為 null。</summary>
      <returns>若此 DbGeometry 值為封閉，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsEmpty">
      <summary>取得可為 null 的布林值，指出此 DbGeometry 值是否為空的，如果此值不代表曲線，就可能為 null。</summary>
      <returns>若此 DbGeometry 值是空的，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsRing">
      <summary>取得可為 null 的布林值，指出此 DbGeometry 值是否為環形，如果此值不代表曲線，就可能為 null。</summary>
      <returns>若此 DbGeometry 值是環形，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsSimple">
      <summary>取得可為 null 的布林值，指出此 DbGeometry 值是否為簡單值。</summary>
      <returns>若此 DbGeometry 值是簡單值，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsValid">
      <summary>取得可為 null 的布林值，指出此 DbGeometry 值是否有效。</summary>
      <returns>若此 DbGeometry 值有效，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Length">
      <summary>取得可為 null 的雙精度浮點數值，指出此 DbGeometry 值的長度，如果此值不代表曲線，就可能為 null。</summary>
      <returns>此 DbGeometry 值的長度。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.LineFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 線值。</summary>
      <returns>新的 DbGeometry 值，由含有指定的座標系統識別項的已知二進位值所定義。</returns>
      <param name="lineWellKnownBinary">包含幾何值的已知二進位表示的位元組陣列。</param>
      <param name="coordinateSystemId">新的 DbGeometry 值應該使用的座標系統的識別項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownBinary" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 無效。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.LineFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 線值。</summary>
      <returns>新的 DbGeometry 值，由含有指定的座標系統識別項的已知文字值所定義。</returns>
      <param name="lineWellKnownText">包含幾何值之已知文字表示的字串。</param>
      <param name="coordinateSystemId">新的 DbGeometry 值應該使用的座標系統的識別項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownText" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 無效。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Measure">
      <summary>取得此 DbGeometry 值 (如果代表點) 的量值 (M 座標)。</summary>
      <returns>此幾何值的量值 (M 座標) (若其代表點)，否則為 null。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>從二進位值傳回多線值。</summary>
      <returns>來自二進位值的多線值。</returns>
      <param name="multiLineWellKnownBinary">已知二進位值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiLineFromText(System.String,System.Int32)">
      <summary>從已知文字值傳回多線值。</summary>
      <returns>來自已知文字值的多線值。</returns>
      <param name="multiLineWellKnownText">已知文字。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>從已知二進位值傳回多點值。</summary>
      <returns>來自已知二進位值的多點值。</returns>
      <param name="multiPointWellKnownBinary">已知二進位值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPointFromText(System.String,System.Int32)">
      <summary>從已知文字值傳回多點值。</summary>
      <returns>來自已知文字值的多點值。</returns>
      <param name="multiPointWellKnownText">已知文字值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>從已知二進位值傳回多多邊形值。</summary>
      <returns>來自已知文字值的多點值。</returns>
      <param name="multiPolygonWellKnownBinary">多多邊形已知文字值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPolygonFromText(System.String,System.Int32)">
      <summary>從已知二進位值傳回多多邊形值。</summary>
      <returns>來自已知二進位值的多多邊形值。</returns>
      <param name="multiPolygonWellKnownText">多多邊形已知文字值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Overlaps(System.Data.Entity.Spatial.DbGeometry)">
      <summary>判斷此 DbGeometry 值是否在空間上與指定的 DbGeometry 引數重疊。</summary>
      <returns>若此幾何值與 other 重疊，則為 true，否則為 false。</returns>
      <param name="other">應該和此幾何值針對重疊做比較的幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointAt(System.Int32)">
      <summary>傳回此 DbGeometry 值 (如果代表 linestring 或線型圓圈) 中位於特定位置的項目。</summary>
      <returns>此幾何值中位於指定位置的項目 (若其表示 linestring 或線型圓圈)，否則為 null。</returns>
      <param name="index">此幾何值中的位置，應該在此取得項目。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.PointCount">
      <summary>取得此 DbGeometry 值 (如果代表 linestring 或線型圓圈) 中的點數目。</summary>
      <returns>此幾何值中的項目數 (若其表示 linestring 或線型圓圈)，否則為 null。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 點值。</summary>
      <returns>新的 DbGeometry 值，由含有指定的座標系統識別項的已知二進位值所定義。</returns>
      <param name="pointWellKnownBinary">包含幾何值的已知二進位表示的位元組陣列。</param>
      <param name="coordinateSystemId">新的 DbGeometry 值應該使用的座標系統的識別項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownBinary" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 無效。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 點值。</summary>
      <returns>新的 DbGeometry 值，由含有指定的座標系統識別項的已知文字值所定義。</returns>
      <param name="pointWellKnownText">包含幾何值之已知文字表示的字串。</param>
      <param name="coordinateSystemId">新的 DbGeometry 值應該使用的座標系統的識別項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownText" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 無效。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.PointOnSurface">
      <summary>取得此 DbGeometry 值的表面點，如果此值不代表表面，就可能為 null。</summary>
      <returns>位於此 DbGeometry 值其表面上的一點。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多邊形值。</summary>
      <returns>新的 DbGeometry 值，由含有指定的座標系統識別項的已知二進位值所定義。</returns>
      <param name="polygonWellKnownBinary">包含幾何值的已知二進位表示的位元組陣列。</param>
      <param name="coordinateSystemId">新的 DbGeometry 值應該使用的座標系統的識別項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownBinary" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 無效。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PolygonFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多邊形值。</summary>
      <returns>新的 DbGeometry 值，由含有指定的座標系統識別項的已知文字值所定義。</returns>
      <param name="polygonWellKnownText">包含幾何值之已知文字表示的字串。</param>
      <param name="coordinateSystemId">新的 DbGeometry 值應該使用的座標系統的識別項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownText" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 無效。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Provider">
      <summary>取得要用於此空間類型之作業的空間提供者。</summary>
      <returns>要用於此空間類型之作業的空間提供者。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ProviderValue">
      <summary>取得此 DbGeometry 值的表示，此值是建構它的基礎提供者專用的。</summary>
      <returns>此 DbGeometry 值的表示法。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Relate(System.Data.Entity.Spatial.DbGeometry,System.String)">
      <summary>依據指定的維度延伸九交模型 (DE-9IM) 交集模式，判斷此 DbGeometry 值是否在空間上與指定的 DbGeometry 引數有關聯。</summary>
      <returns>若依據指定的交集模式矩陣，此幾何值和 other 相關，則為 true，否則為 false。</returns>
      <param name="other">應該和此幾何值針對關聯做比較的幾何值。</param>
      <param name="matrix">包含定義關聯性之 (DE-9IM) 交集模式文字表示的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 和 <paramref name="matrix" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.SpatialEquals(System.Data.Entity.Spatial.DbGeometry)">
      <summary>判斷此 DbGeometry 是否在空間上等於指定的 DbGeometry 引數。</summary>
      <returns>若在空間上 other 等於此幾何值，則為 true，否則為 false。</returns>
      <param name="other">應該和此幾何值針對相等做比較的幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.SpatialTypeName">
      <summary>取得此 DbGeometry 值的空間類型名稱表示法。</summary>
      <returns>此 DbGeometry 值的空間類型名稱表示法。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.StartPoint">
      <summary>取得 DbGeometry 值，表示此值的起始點，如果此 DbGeometry 值不代表曲線，就可能為 null。</summary>
      <returns>表示此值之起始點的 DbGeometry 值。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.SymmetricDifference(System.Data.Entity.Spatial.DbGeometry)">
      <summary>計算此 DbGeometry 值與另一個 DbGeometry 值之間的對稱差異。</summary>
      <returns>表示此幾何值與 other 之間對稱差異的新 DbGeometry 值。</returns>
      <param name="other">應該針對此幾何值計算與此值的對稱差異。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.ToString">
      <summary>傳回幾何值的字串表示。</summary>
      <returns>幾何值的字串表示法。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Touches(System.Data.Entity.Spatial.DbGeometry)">
      <summary>判斷此 DbGeometry 值是否在空間上與指定的 DbGeometry 引數相接觸。</summary>
      <returns>若 other 與此幾何值相接觸，則為 true，否則為 false。</returns>
      <param name="other">應該和此幾何值做比較的幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Union(System.Data.Entity.Spatial.DbGeometry)">
      <summary>計算此 DbGeometry 值與另一個 DbGeometry 值的聯集。</summary>
      <returns>表示此幾何值與 other 之間聯集的新 DbGeometry 值。</returns>
      <param name="other">應該針對此幾何值計算與此值的聯集。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.WellKnownValue">
      <summary>取得或設定此 DbGeometry 值的資料合約可序列化已知表示。</summary>
      <returns>此 DbGeometry 值的資料合約可序列化已知表示法。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Within(System.Data.Entity.Spatial.DbGeometry)">
      <summary>判斷此 DbGeometry 值是否在空間上位於指定的 DbGeometry 引數之內。</summary>
      <returns>若此幾何值位於 other 之內，則為 true，否則為 false。</returns>
      <param name="other">應該和此幾何值針對內含項目做比較的幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.XCoordinate">
      <summary>取得此 DbGeometry 值 (如果代表點) 的 X 座標。</summary>
      <returns>此幾何值的 X 座標值 (若其代表點)，否則為 null。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.YCoordinate">
      <summary>取得此 DbGeometry 值 (如果代表點) 的 Y 座標。</summary>
      <returns>此幾何值的 Y 座標值 (若其代表點)，否則為 null。</returns>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值之資料合約的可序列化表示。</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometryWellKnownValue.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.CoordinateSystemId">
      <summary>取得或設定此值的座標系統識別項 (SRID)。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.WellKnownBinary">
      <summary>取得或設定此值的已知二進位表示。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.WellKnownText">
      <summary>取得或設定此值的已知文字表示。</summary>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbSpatialDataReader">
      <summary>用於地理空間 (幾何/地理) 類型支援的與提供者無關的服務應用程式開發介面。</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Spatial.DbSpatialDataReader" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeography(System.Int32)">
      <summary>在衍生類型中實作時，從位於指定之資料行序數的資料行讀取 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 的執行個體。</summary>
      <returns>位於指定之資料行值的 DbGeography 執行個體</returns>
      <param name="ordinal">包含地理位置值之資料行的序數</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeographyAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>從位於指定資料行序數的資料行中非同步讀取 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 的執行個體。</summary>
      <returns>表示非同步作業的工作。工作結果包含位於指定資料行值之 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 的執行個體。</returns>
      <param name="ordinal">包含地理位置值之資料行的序數。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeometry(System.Int32)">
      <summary>在衍生類型中實作時，從位於指定之資料行序數的資料行讀取 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 的執行個體。</summary>
      <returns>位於指定之資料行值的 DbGeometry 執行個體</returns>
      <param name="ordinal">包含提供者專用幾何資料的資料錄資料行的序數</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeometryAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>從位於指定資料行序數的資料行中非同步讀取 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 的執行個體。</summary>
      <returns>表示非同步作業的工作。工作結果包含位於指定資料行值之 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 的執行個體。</returns>
      <param name="ordinal">包含提供者專用幾何資料的資料錄資料行的序數。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.IsGeographyColumn(System.Int32)">
      <summary>傳回位於指定資料行序數的資料行是否是地理類型</summary>
      <returns>如果位於指定資料行序數的資料行是地理類型，則為 true，否則為 false。</returns>
      <param name="ordinal">資料行序數。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.IsGeometryColumn(System.Int32)">
      <summary>傳回位於指定資料行序數的資料行是否是幾何類型</summary>
      <returns>如果位於指定資料行序數的資料行是幾何類型，則為 true，否則為 false。</returns>
      <param name="ordinal">資料行序數。</param>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbSpatialServices">
      <summary>用於地理空間 (幾何/地理) 類型支援的與提供者無關的服務應用程式開發介面。</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsBinary(System.Data.Entity.Spatial.DbGeography)">
      <summary>取得所指 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的已知二進位表示法。</summary>
      <returns>所指 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的已知二進位表示法。</returns>
      <param name="geographyValue">應該產生已知二進位表示法的地理位置值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsBinary(System.Data.Entity.Spatial.DbGeometry)">
      <summary>取得所指 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的已知二進位表示法。</summary>
      <returns>所指 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的已知二進位表示法。</returns>
      <param name="geometryValue">應該產生已知二進位表示法的幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsGml(System.Data.Entity.Spatial.DbGeography)">
      <summary>產生此 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的地理標記語言 (GML) 表示。</summary>
      <returns>包含此 DbGeography 值之 GML 表示的字串。</returns>
      <param name="geographyValue">應該針對此地理位置值產生 GML。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsGml(System.Data.Entity.Spatial.DbGeometry)">
      <summary>產生此 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的地理標記語言 (GML) 表示。</summary>
      <returns>包含此 DbGeometry 值之 GML 表示的字串。</returns>
      <param name="geometryValue">應該針對此幾何值產生 GML。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsText(System.Data.Entity.Spatial.DbGeography)">
      <summary>取得所指 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的已知文字表示法。此值應該只包含點的經度和緯度。</summary>
      <returns>包含 geographyValue 的已知文字表示法的字串。</returns>
      <param name="geographyValue">應該產生已知文字表示法的地理位置值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsText(System.Data.Entity.Spatial.DbGeometry)">
      <summary>取得所指 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的已知文字表示法，僅包括點的 X 和 Y 座標。</summary>
      <returns>包含 geometryValue 的已知文字表示法的字串。</returns>
      <param name="geometryValue">應該產生已知文字表示法的幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Entity.Spatial.DbGeography)">
      <summary>傳回含有高度及量值之 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 的文字表示法。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 的文字表示法。</returns>
      <param name="geographyValue">地理位置值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回含有高度及量值之 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 的文字表示法。</summary>
      <returns>含有高度及量值之 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 的文字表示法。</returns>
      <param name="geometryValue">幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Buffer(System.Data.Entity.Spatial.DbGeography,System.Double)">
      <summary>建立一個地理位置值，表示所有與給定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值相距小於或等於 distance 的點。</summary>
      <returns>一個新的 DbGeography 值，表示所有與 geographyValue 相距小於或等於 distance 的點。</returns>
      <param name="geographyValue">地理位置值。</param>
      <param name="distance">指定 geographyValue 與緩衝區相距多遠的雙精度浮點數值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Buffer(System.Data.Entity.Spatial.DbGeometry,System.Double)">
      <summary>建立一個幾何值，表示所有與給定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值相距小於或等於 distance 的點。</summary>
      <returns>一個新的 DbGeometry 值，表示所有與 geometryValue 相距小於或等於 distance 的點。</returns>
      <param name="geometryValue">幾何值。</param>
      <param name="distance">指定 geometryValue 與緩衝區相距多遠的雙精度浮點數值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Contains(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>判斷一個 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否在空間上包含其他幾何。</summary>
      <returns>若 geometryValue 包含 otherGeometry，則為 true，否則為 false。</returns>
      <param name="geometryValue">第一個幾何值。</param>
      <param name="otherGeometry">第二個幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateGeography(System.Data.Entity.Spatial.DbSpatialServices,System.Object)">
      <summary>此方法的目的是在適當驗證指定的提供者值之後，供 <see cref="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)" /> 的衍生實作使用，以確保它適合與衍生實作搭配使用。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 執行個體，其中包含指定的 providerValue，並且使用指定的 spatialServices 做為其空間實作。</returns>
      <param name="spatialServices">傳回 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的空間服務執行個體，將視它的空間功能的實作而定。</param>
      <param name="providerValue">提供者值。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateGeometry(System.Data.Entity.Spatial.DbSpatialServices,System.Object)">
      <summary>此方法的目的是在適當驗證指定的提供者值之後，供 <see cref="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)" /> 的衍生實作使用，以確保它適合與衍生實作搭配使用。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 執行個體，其中包含指定的 providerValue，並且使用指定的 spatialServices 做為其空間實作。</returns>
      <param name="spatialServices">傳回 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的空間服務執行個體，將視它的空間功能的實作而定。</param>
      <param name="providerValue">提供者值。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Entity.Spatial.DbGeographyWellKnownValue)">
      <summary>根據指定的已知 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 表示法，建立與此空間服務實作相容的提供者特定值。</summary>
      <returns>提供者特定值，此值以相容於此空間服務實作的方式將 wellKnownValue 中所包含的資訊編碼。</returns>
      <param name="wellKnownValue">
        <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" /> 的執行個體，其中包含地理位置值的已知表示法。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Entity.Spatial.DbGeometryWellKnownValue)">
      <summary>根據指定的已知 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 表示法，建立與此空間服務實作相容的提供者特定值。</summary>
      <returns>提供者特定值，此值以相容於此空間服務實作的方式將 wellKnownValue 中所包含的資訊編碼。</returns>
      <param name="wellKnownValue">
        <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" /> 的執行個體，其中包含幾何值的已知表示法。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Entity.Spatial.DbGeography)">
      <summary>建立 <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" /> 的執行個體，此執行個體使用一種或兩種標準的已知空間格式表示指定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>geographyValue 的已知表示法，做為新的 <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" />。</returns>
      <param name="geographyValue">地理位置值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Entity.Spatial.DbGeometry)">
      <summary>建立 <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" /> 的執行個體，此執行個體使用一種或兩種標準的已知空間格式表示指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>geometryValue 的已知表示法，做為新的 <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" />。</returns>
      <param name="geometryValue">幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Crosses(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>判斷兩個指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否在空間上交叉。</summary>
      <returns>若 geometryValue 與 otherGeometry 交叉，則為 true，否則為 false。</returns>
      <param name="geometryValue">第一個幾何值。</param>
      <param name="otherGeometry">第二個幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbSpatialServices.Default">
      <summary>取得 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 的預設服務。</summary>
      <returns>預設服務。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Difference(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>計算兩個 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值之間的差異。</summary>
      <returns>表示 geographyValue 與 otherGeography 之間差異的新 DbGeography 值。</returns>
      <param name="geographyValue">第一個地理位置值。</param>
      <param name="otherGeography">第二個地理位置值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Difference(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>計算兩個 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值之間的差異。</summary>
      <returns>表示 geometryValue 與 otherGeometry 之間差異的新 DbGeometry 值。</returns>
      <param name="geometryValue">第一個幾何值。</param>
      <param name="otherGeometry">第二個幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Disjoint(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>判斷兩個指定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值是否在空間上不相交。</summary>
      <returns>若 geographyValue 與 otherGeography 沒有交集，則為 true，否則為 false。</returns>
      <param name="geographyValue">要比較不相交的第一個地理位置值。</param>
      <param name="otherGeography">要比較不相交的第二個地理位置值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Disjoint(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>判斷兩個指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否在空間上不相交。</summary>
      <returns>若 geometryValue 與 otherGeometry 沒有交集，則為 true，否則為 false。</returns>
      <param name="geometryValue">要比較不相交的第一個幾何值。</param>
      <param name="otherGeometry">要比較不相交的第二個幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Distance(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>計算兩個 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值中最接近點之間的距離。</summary>
      <returns>指定 geographyValue 與 otherGeography 中兩個最接近點之間距離的雙精度浮點數值。</returns>
      <param name="geographyValue">第一個地理位置值。</param>
      <param name="otherGeography">第二個地理位置值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Distance(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>計算兩個 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值中最接近點之間的距離。</summary>
      <returns>指定 geometryValue 與 otherGeometry 中兩個最接近點之間距離的雙精度浮點數值。</returns>
      <param name="geometryValue">第一個幾何值。</param>
      <param name="otherGeometry">第二個幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.ElementAt(System.Data.Entity.Spatial.DbGeography,System.Int32)">
      <summary>傳回指定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的項目 (若此值代表地理集合)。</summary>
      <returns>若 geographyValue 表示其他地理位置值的集合，即為其中位於 index 位置的項目，否則為 null。</returns>
      <param name="geographyValue">地理位置值，不需要代表地理位置集合。</param>
      <param name="index">此地理位置值中的位置，應該在此取得項目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.ElementAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>傳回指定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的項目 (若此值代表幾何集合)。</summary>
      <returns>若 geometryValue 表示其他幾何值的集合，即為其中位於 index 位置的項目，否則為 null。</returns>
      <param name="geometryValue">幾何值，不需要代表幾何集合。</param>
      <param name="index">此幾何值中的位置，應該在此取得項目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 集合值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由具有指定的座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 的已知二進位值所定義。</returns>
      <param name="geographyCollectionWellKnownBinary">包含地理位置值的已知二進位表示法的位元組陣列。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 集合值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由具有指定的座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 的已知文字值所定義。</returns>
      <param name="geographyCollectionWellKnownText">包含地理位置值之已知文字表示法的字串。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[])">
      <summary>根據指定的已知二進位值，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由具有預設 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 的已知二進位值所定義。</returns>
      <param name="wellKnownBinary">包含地理位置值的已知二進位表示法的位元組陣列。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由具有指定的座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 的已知二進位值所定義。</returns>
      <param name="wellKnownBinary">包含地理位置值的已知二進位表示法的位元組陣列。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromGml(System.String)">
      <summary>根據指定的地理標記語言 (GML) 值，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由具有預設 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 的 GML 值所定義。</returns>
      <param name="geographyMarkup">包含地理位置值之幾何標記語言 (GML) 表示的字串。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromGml(System.String,System.Int32)">
      <summary>根據指定的地理標記語言 (GML) 值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由具有指定之座標系統識別項 (SRID) 的 GML 值所定義。</returns>
      <param name="geographyMarkup">包含地理位置值之幾何標記語言 (GML) 表示的字串。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)">
      <summary>根據與此空間服務實作的提供者特定值，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>由此空間服務實作及指定之提供者值所支援的新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</returns>
      <param name="providerValue">此空間服務實作可以解譯為地理值的提供者特定值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromText(System.String)">
      <summary>根據指定的已知文字值，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由具有預設 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 的已知文字值所定義。</returns>
      <param name="wellKnownText">包含地理位置值之已知文字表示法的字串。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由具有指定的座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 的已知文字值所定義。</returns>
      <param name="wellKnownText">包含地理位置值之已知文字表示法的字串。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyLineFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 線值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由具有指定的座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 的已知二進位值所定義。</returns>
      <param name="lineWellKnownBinary">包含地理位置值的已知二進位表示法的位元組陣列。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyLineFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 線值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由具有指定的座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 的已知文字值所定義。</returns>
      <param name="lineWellKnownText">包含地理位置值之已知文字表示法的字串。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多線值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多線值。</returns>
      <param name="multiLineWellKnownBinary">已知二進位值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiLineFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多線值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多線值。</returns>
      <param name="multiLineWellKnownText">已知文字值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多點值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多點值。</returns>
      <param name="multiPointWellKnownBinary">已知二進位值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPointFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多點值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多點值。</returns>
      <param name="multiPointWellKnownText">已知文字值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多多邊形值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多多邊形值。</returns>
      <param name="multiPolygonWellKnownBinary">已知二進位值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPolygonFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多多邊形值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多多邊形值。</returns>
      <param name="multiPolygonKnownText">已知文字值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPointFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 點值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由具有指定的座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 的已知二進位值所定義。</returns>
      <param name="pointWellKnownBinary">包含地理位置值的已知二進位表示法的位元組陣列。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPointFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 點值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由具有指定的座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 的已知文字值所定義。</returns>
      <param name="pointWellKnownText">包含地理位置值之已知文字表示法的字串。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多邊形值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由具有指定的座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 的已知二進位值所定義。</returns>
      <param name="polygonWellKnownBinary">包含地理位置值的已知二進位表示法的位元組陣列。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPolygonFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多邊形值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由具有指定的座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 的已知文字值所定義。</returns>
      <param name="polygonWellKnownText">包含地理位置值之已知文字表示法的字串。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 集合值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由具有指定的座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 的已知二進位值所定義。</returns>
      <param name="geometryCollectionWellKnownBinary">包含幾何值的已知二進位表示法的位元組陣列。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 集合值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由具有指定的座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 的已知文字值所定義。</returns>
      <param name="geometryCollectionWellKnownText">包含幾何值之已知文字表示法的字串。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[])">
      <summary>根據指定的已知二進位值，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由具有預設 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 的已知二進位值所定義。</returns>
      <param name="wellKnownBinary">包含幾何值的已知二進位表示法的位元組陣列。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由具有指定的座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 的已知二進位值所定義。</returns>
      <param name="wellKnownBinary">包含幾何值的已知二進位表示法的位元組陣列。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromGml(System.String)">
      <summary>根據指定的地理標記語言 (GML) 值，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由具有預設 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 的 GML 值所定義。</returns>
      <param name="geometryMarkup">包含幾何值之地理標記語言 (GML) 表示的字串。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromGml(System.String,System.Int32)">
      <summary>根據指定的地理標記語言 (GML) 值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由具有指定之座標系統識別項 (SRID) 的 GML 值所定義。</returns>
      <param name="geometryMarkup">包含幾何值之地理標記語言 (GML) 表示的字串。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)">
      <summary>根據與此空間服務實作的提供者特定值，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>由此空間服務實作及指定之提供者值所支援的新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</returns>
      <param name="providerValue">此空間服務實作可以解譯為幾何值的提供者特定值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromText(System.String)">
      <summary>根據指定的已知文字值，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由具有預設 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 的已知文字值所定義。</returns>
      <param name="wellKnownText">包含幾何值之已知文字表示法的字串。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由具有指定的座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 的已知文字值所定義。</returns>
      <param name="wellKnownText">包含幾何值之已知文字表示法的字串。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryLineFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 線值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由具有指定的座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 的已知二進位值所定義。</returns>
      <param name="lineWellKnownBinary">包含幾何值的已知二進位表示法的位元組陣列。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryLineFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 線值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由具有指定的座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 的已知文字值所定義。</returns>
      <param name="lineWellKnownText">包含幾何值之已知文字表示法的字串。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多線值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多線值</returns>
      <param name="multiLineWellKnownBinary">已知二進位值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiLineFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多線值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多線值</returns>
      <param name="multiLineWellKnownText">已知文字值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多點值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多點值。</returns>
      <param name="multiPointWellKnownBinary">已知二進位值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPointFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多點值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多點值。</returns>
      <param name="multiPointWellKnownText">已知文字值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多多邊形值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多多邊形值。</returns>
      <param name="multiPolygonWellKnownBinary">已知二進位值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPolygonFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多多邊形值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多多邊形值。</returns>
      <param name="multiPolygonKnownText">已知文字值。</param>
      <param name="coordinateSystemId">座標系統識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPointFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 點值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由具有指定的座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 的已知二進位值所定義。</returns>
      <param name="pointWellKnownBinary">包含幾何值的已知二進位表示法的位元組陣列。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPointFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 點值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由具有指定的座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 的已知文字值所定義。</returns>
      <param name="pointWellKnownText">包含幾何值之已知文字表示法的字串。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>根據指定的已知二進位值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多邊形值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由具有指定的座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 的已知二進位值所定義。</returns>
      <param name="polygonWellKnownBinary">包含幾何值的已知二進位表示法的位元組陣列。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPolygonFromText(System.String,System.Int32)">
      <summary>根據指定的已知文字值和座標系統識別項 (SRID)，建立新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多邊形值。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由具有指定的座標系統識別項 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 的已知文字值所定義。</returns>
      <param name="polygonWellKnownText">包含幾何值之已知文字表示法的字串。</param>
      <param name="coordinateSystemId">新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值應該使用的座標系統的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetArea(System.Data.Entity.Spatial.DbGeography)">
      <summary>傳回可為 Null 的雙精度浮點數值，指出指定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的範圍，如果該值不代表表面，就可能為 null。</summary>
      <returns>可為 null 的雙精度浮點數值，表示所指 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的面積。</returns>
      <param name="geographyValue">地理位置值，不需要代表表面。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetArea(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回可為 Null 的雙精度浮點數值，指出指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的範圍，如果該值不代表表面，就可能為 null。</summary>
      <returns>可為 null 的雙精度浮點數值，表示所指 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的面積。</returns>
      <param name="geometryValue">幾何值，不需要代表表面。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetBoundary(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回可為 Null 的雙精度浮點數值，表示所指定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的界限。</summary>
      <returns>指定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的界限。</returns>
      <param name="geometryValue">幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCentroid(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，此值代表指定 DbGeometry 值的中心點，如果該值不代表表面，就可能為 null。</summary>
      <returns>若 geometryValue 代表表面，即為該表面的中心點，否則為 null。</returns>
      <param name="geometryValue">幾何值，不需要代表表面。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetConvexHull(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回可為 Null 的雙精度浮點數值，表示所指定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的凸面。</summary>
      <returns>指定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的凸殼。</returns>
      <param name="geometryValue">幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Entity.Spatial.DbGeography)">
      <summary>傳回指定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的座標系統識別項。</summary>
      <returns>指定之 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的座標系統識別項。</returns>
      <param name="geographyValue">地理位置值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回指定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的座標系統識別項。</summary>
      <returns>指定之 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的座標系統識別項。</returns>
      <param name="geometryValue">幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetDimension(System.Data.Entity.Spatial.DbGeography)">
      <summary>取得給定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的維度，如果值是集合，則為其最大項目的維度。</summary>
      <returns>geographyValue 的維度，若 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 是集合則為最大項目維度。</returns>
      <param name="geographyValue">應該針對此地理位置值擷取維度值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetDimension(System.Data.Entity.Spatial.DbGeometry)">
      <summary>取得給定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的維度，如果值是集合，則為其最大項目的維度。</summary>
      <returns>geometryValue 的維度，若 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 是集合則為最大項目維度。</returns>
      <param name="geometryValue">應該針對此幾何值擷取維度值。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElementCount(System.Data.Entity.Spatial.DbGeography)">
      <summary>傳回給定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值中的項目數量 (若此值代表地理集合)。</summary>
      <returns>若 geographyValue 表示其他地理位置值的集合，即為其中的項目數，否則為 null。</returns>
      <param name="geographyValue">地理位置值，不需要代表地理位置集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElementCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回給定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值中的項目數量 (若此值代表幾何集合)。</summary>
      <returns>若 geometryValue 表示其他幾何值的集合，即為其中的項目數，否則為 null。</returns>
      <param name="geometryValue">幾何值，不需要代表幾何集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElevation(System.Data.Entity.Spatial.DbGeography)">
      <summary>傳回給定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值 (如果它代表點) 的高度 (Z 座標)。</summary>
      <returns>若 geographyValue 代表點，即為該點的高度 (Z 座標)，否則為 null。</returns>
      <param name="geographyValue">地理位置值，不需要代表點。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElevation(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回給定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值 (如果它代表點) 的高度 (Z)。</summary>
      <returns>若 geometryValue 代表點，即為該點的高度 (Z)，否則為 null。</returns>
      <param name="geometryValue">幾何值，不需要代表點。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEndPoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>傳回 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，此值代表指定 DbGeography 值的結束點，如果該值不代表曲線，則可能為 null。</summary>
      <returns>若 geographyValue 代表曲線，即為該曲線的結束點，否則為 null。</returns>
      <param name="geographyValue">地理位置值，不需要代表曲線。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEndPoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，此值代表指定 DbGeometry 值的結束點，如果該值不代表曲線，則可能為 null。</summary>
      <returns>若 geometryValue 代表曲線，即為該曲線的結束點，否則為 null。</returns>
      <param name="geometryValue">幾何值，不需要代表曲線。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEnvelope(System.Data.Entity.Spatial.DbGeometry)">
      <summary>取得指定之 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的封套 (最小的周框方塊)，做為幾何值。</summary>
      <returns>geometryValue 的封套，做為 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</returns>
      <param name="geometryValue">應該針對此幾何值擷取封套值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetExteriorRing(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，此值代表指定 DbGeometry 值的外環，如果該值不代表多邊形，則可能為 null。</summary>
      <returns>若 geometryValue 代表多邊形，即為表示該多邊形外環的 DbGeometry 值，否則為 null。</returns>
      <param name="geometryValue">幾何值，不需要代表多邊形。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetInteriorRingCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回指定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值中的內環數目 (如果它代表多邊形)。</summary>
      <returns>若 geometryValue 代表多邊形，即為其中的項目數，否則為 null。</returns>
      <param name="geometryValue">幾何值，不需要代表多邊形。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsClosed(System.Data.Entity.Spatial.DbGeography)">
      <summary>傳回可為 Null 的布林值，指出指定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值是否封閉，如果該值不代表曲線，則可能為 null。</summary>
      <returns>若指定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值為封閉，則為 true，否則為 false。</returns>
      <param name="geographyValue">地理位置值，不需要代表曲線。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsClosed(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回可為 Null 的布林值，指出指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否封閉，如果該值不代表曲線，則可能為 null。</summary>
      <returns>若指定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值為封閉，則為 true，否則為 false。</returns>
      <param name="geometryValue">幾何值，不需要代表曲線。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Entity.Spatial.DbGeography)">
      <summary>傳回可為 Null 的布林值，指出指定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值是否為空的。</summary>
      <returns>若指定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值是空的，則為 true，否則為 false。</returns>
      <param name="geographyValue">地理位置值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回可為 Null 的布林值，指出指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否為空的。</summary>
      <returns>若指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是空的，則為 true，否則為 false。</returns>
      <param name="geometryValue">幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsRing(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回可為 Null 的布林值，指出指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否為環形，如果該值不代表曲線，則可能為 null。</summary>
      <returns>若指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是環形，則為 true，否則為 false。</returns>
      <param name="geometryValue">幾何值，不需要代表曲線。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsSimple(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回可為 Null 的布林值，指出指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否為簡單值。</summary>
      <returns>若指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是簡單值，則為 true，否則為 false。</returns>
      <param name="geometryValue">幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsValid(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回可為 Null 的布林值，指出指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否有效。</summary>
      <returns>若指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值有效，則為 true，否則為 false。</returns>
      <param name="geometryValue">幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLatitude(System.Data.Entity.Spatial.DbGeography)">
      <summary>傳回指定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的緯度座標 (若其代表點)。</summary>
      <returns>指定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的緯度座標。</returns>
      <param name="geographyValue">地理位置值，不需要代表點。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLength(System.Data.Entity.Spatial.DbGeography)">
      <summary>傳回可為 Null 的雙精度浮點數值，指出指定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的長度，如果該值不代表曲線，則可能為 null。</summary>
      <returns>所指 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的長度。</returns>
      <param name="geographyValue">地理位置值，不需要代表曲線。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLength(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回可為 Null 的雙精度浮點數值，指出指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的長度，如果該值不代表曲線，則可能為 null。</summary>
      <returns>所指 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的長度。</returns>
      <param name="geometryValue">幾何值，不需要代表曲線。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLongitude(System.Data.Entity.Spatial.DbGeography)">
      <summary>傳回指定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的經度座標 (若其代表點)。</summary>
      <returns>指定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的經度座標。</returns>
      <param name="geographyValue">地理位置值，不需要代表點。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetMeasure(System.Data.Entity.Spatial.DbGeography)">
      <summary>傳回指定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的 M (量值) 座標 (如果它代表點)。</summary>
      <returns>所指 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的 M (量值) 座標。</returns>
      <param name="geographyValue">地理位置值，不需要代表點。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetMeasure(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的 M (量值) 座標 (如果它代表點)。</summary>
      <returns>所指 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的 M (量值) 座標。</returns>
      <param name="geometryValue">幾何值，不需要代表點。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointCount(System.Data.Entity.Spatial.DbGeography)">
      <summary>傳回指定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值中的點數 (如果它代表 linestring 或線型圓圈)。</summary>
      <returns>所指 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值中的點數目。</returns>
      <param name="geographyValue">地理位置值，不需要代表 linestring 或線型圓圈。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值中的點數 (如果它代表 linestring 或線型圓圈)。</summary>
      <returns>所指 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值中的點數目。</returns>
      <param name="geometryValue">幾何值，不需要代表 linestring 或線型圓圈。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointOnSurface(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，此值代表指定 DbGeometry 值的表面上的一點，如果該值不代表表面，就可能為 null。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，此值代表所指 DbGeometry 值其表面上的一點。</returns>
      <param name="geometryValue">幾何值，不需要代表表面。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Entity.Spatial.DbGeography)">
      <summary>傳回值，此值表示指定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的空間類型名稱。</summary>
      <returns>指定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的空間類型名稱。</returns>
      <param name="geographyValue">地理位置值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回值，此值表示指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的空間類型名稱。</summary>
      <returns>指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的空間類型名稱。</returns>
      <param name="geometryValue">幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetStartPoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>傳回 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，此值代表指定 DbGeography 值的起始點，如果該值不代表曲線，則可能為 null。</summary>
      <returns>所指 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的起始點。</returns>
      <param name="geographyValue">地理位置值，不需要代表曲線。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetStartPoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，此值代表指定 DbGeometry 值的起始點，如果該值不代表曲線，則可能為 null。</summary>
      <returns>所指 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的起始點。</returns>
      <param name="geometryValue">幾何值，不需要代表曲線。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetXCoordinate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的 X 座標 (如果它代表點)。</summary>
      <returns>所指 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的 X 座標。</returns>
      <param name="geometryValue">幾何值，不需要代表點。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetYCoordinate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>傳回指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的 Y 座標 (如果它代表點)。</summary>
      <returns>所指 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的 Y 座標。</returns>
      <param name="geometryValue">幾何值，不需要代表點。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.InteriorRingAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>從指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值傳回內環 (如果它代表多邊形)。</summary>
      <returns>若 geometryValue 代表多邊形，即為其中位於 index 位置的內環，否則為 null。</returns>
      <param name="geometryValue">幾何值，不需要代表多邊形。</param>
      <param name="index">此幾何值中的位置，應該在此取得項目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersection(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>計算兩個 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的交集。</summary>
      <returns>表示 geographyValue 與 otherGeography 之間交集的新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</returns>
      <param name="geographyValue">第一個地理位置值。</param>
      <param name="otherGeography">第二個地理位置值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersection(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>計算兩個 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的交集。</summary>
      <returns>表示 geometryValue 與 otherGeometry 之間交集的新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</returns>
      <param name="geometryValue">第一個幾何值。</param>
      <param name="otherGeometry">第二個幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersects(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>判斷兩個給定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值是否為空間相交的值。</summary>
      <returns>若 geographyValue 與 otherGeography 有交集，則為 true，否則為 false。</returns>
      <param name="geographyValue">要比較交集的第一個地理位置值。</param>
      <param name="otherGeography">要比較交集的第二個地理位置值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersects(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>判斷兩個給定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否為空間相交的值。</summary>
      <returns>若 geometryValue 與 otherGeometry 有交集，則為 true，否則為 false。</returns>
      <param name="geometryValue">要比較交集的第一個幾何值。</param>
      <param name="otherGeometry">要比較交集的第二個幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbSpatialServices.NativeTypesAvailable">
      <summary>取得值，指出 EF 會假設提供者具有必要的類型/資源而繼續執行，並不會立即失敗。預設值為 true。</summary>
      <returns>若 EF 會假設提供者具有必要的類型/資源而繼續執行，並不會立即失敗，則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Overlaps(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>判斷兩個指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否在空間上重疊。</summary>
      <returns>若 geometryValue 與 otherGeometry 重疊，則為 true，否則為 false。</returns>
      <param name="geometryValue">第一個幾何值。</param>
      <param name="otherGeometry">第二個幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.PointAt(System.Data.Entity.Spatial.DbGeography,System.Int32)">
      <summary>傳回指定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的點項目 (如果它代表 linestring 或線型圓圈)。</summary>
      <returns>若 geographyValue 代表 linestring 或線型圓圈，即為其中位於 index 位置的點，否則為 null。</returns>
      <param name="geographyValue">地理位置值，不需要代表 linestring 或線型圓圈。</param>
      <param name="index">此地理位置值中的位置，應該在此取得項目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.PointAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>傳回指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的點項目 (如果它代表 linestring 或線型圓圈)。</summary>
      <returns>若 geometryValue 代表 linestring 或線型圓圈，即為其中位於 index 位置的點，否則為 null。</returns>
      <param name="geometryValue">幾何值，不需要代表 linestring 或線型圓圈。</param>
      <param name="index">此幾何值中的位置，應該在此取得項目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Relate(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry,System.String)">
      <summary>依據指定的維度延伸九交模型 (DE-9IM) 交集模式，判斷兩個指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否在空間上有關聯。</summary>
      <returns>若依據指定的交集模式矩陣，此 geometryValue 值和 otherGeometry 相關，則為 true，否則為 false。</returns>
      <param name="geometryValue">第一個幾何值。</param>
      <param name="otherGeometry">應該和第一個幾何值針對關聯做比較的幾何值。</param>
      <param name="matrix">包含定義關聯性之 (DE-9IM) 交集模式文字表示的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />、<paramref name="otherGeometry" /> 或 <paramref name="matrix" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SpatialEquals(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>判斷兩個指定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值是否在空間上相等。</summary>
      <returns>若在空間上 geographyValue 等於 otherGeography，則為 true，否則為 false。</returns>
      <param name="geographyValue">要比較是否相等的第一個地理位置值。</param>
      <param name="otherGeography">要比較是否相等的第二個地理位置值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SpatialEquals(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>判斷兩個指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否在空間上相等。</summary>
      <returns>若在空間上 geometryValue 等於 otherGeometry，則為 true，否則為 false。</returns>
      <param name="geometryValue">要比較是否相等的第一個幾何值。</param>
      <param name="otherGeometry">要比較是否相等的第二個幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>計算兩個 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的對稱差異。</summary>
      <returns>表示 geographyValue 與 otherGeography 之間對稱差異的新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</returns>
      <param name="geographyValue">第一個地理位置值。</param>
      <param name="otherGeography">第二個地理位置值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>計算兩個 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值之間的對稱差異。</summary>
      <returns>表示 geometryValue 與 otherGeometry 之間對稱差異的新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</returns>
      <param name="geometryValue">第一個幾何值。</param>
      <param name="otherGeometry">第二個幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Touches(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>判斷兩個指定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否在空間上相接觸。</summary>
      <returns>若 geometryValue 和 otherGeometry 相接觸，則為 true，否則為 false。</returns>
      <param name="geometryValue">第一個幾何值。</param>
      <param name="otherGeometry">第二個幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Union(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>計算兩個 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值之間的聯集。</summary>
      <returns>表示 geographyValue 與 otherGeography 之間聯集的新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</returns>
      <param name="geographyValue">第一個地理位置值。</param>
      <param name="otherGeography">第二個地理位置值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Union(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>計算兩個 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值之間的聯集。</summary>
      <returns>表示 geometryValue 與 otherGeometry 之間聯集的新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</returns>
      <param name="geometryValue">第一個幾何值。</param>
      <param name="otherGeometry">第二個幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Within(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>判斷一個 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否在空間上位於其他幾何之內。</summary>
      <returns>若 geometryValue 在 otherGeometry 內部，則為 true，否則為 false。</returns>
      <param name="geometryValue">第一個幾何值。</param>
      <param name="otherGeometry">第二個幾何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 與此空間服務實作不相容。</exception>
    </member>
    <member name="T:System.Data.Entity.Utilities.TaskExtensions">
      <summary>包含 <see cref="T:System.Threading.Tasks.Task" /> 類別的擴充方法。</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.WithCurrentCulture(System.Threading.Tasks.Task)">
      <summary>設定 awaiter 用於等候此 <see cref="T:System.Threading.Tasks.Task" />，以避免將接續封送處理回原始的內容，但仍保留目前的文化與 UI 文化。</summary>
      <returns>用於等候此工作的物件。</returns>
      <param name="task">要等候的工作。</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.WithCurrentCulture``1(System.Threading.Tasks.Task{``0})">
      <summary>設定 awaiter 用於等候此 <see cref="T:System.Threading.Tasks.Task`1" />，以避免將接續封送處理回原始的內容，但仍保留目前的文化與 UI 文化。</summary>
      <returns>用於等候此工作的物件。</returns>
      <param name="task">要等候的工作。</param>
      <typeparam name="T">相關聯之 <see cref="T:System.Threading.Tasks.Task`1" /> 所產生的結果類型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter">
      <summary>提供可等候的物件，用於等候保留文化的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.#ctor(System.Threading.Tasks.Task)">
      <summary>建構 <see cref="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter" /> 類別的新執行個體。</summary>
      <param name="task">要等候的工作。</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.GetAwaiter">
      <summary>取得 awaiter 來等候此 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>awaiter 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.GetResult">
      <summary>結束等候已完成的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <exception cref="T:System.NullReferenceException">未正確地初始化 awaiter。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">這項工作已取消。</exception>
      <exception cref="T:System.Exception">這項工作已完成但發生錯誤。</exception>
    </member>
    <member name="P:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.IsCompleted">
      <summary>無論此 <see cref="T:System.Threading.Tasks.Task" /> 完成與否，一律取得。</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.OnCompleted(System.Action)">
      <summary>這個方法未實作，請勿呼叫。</summary>
      <param name="continuation">當等候作業完成時所要叫用的動作。</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>排程接續到此 <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> 相關聯的 <see cref="T:System.Threading.Tasks.Task" /> 的時間。</summary>
      <param name="continuation">當等候作業完成時所要叫用的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 引數為 Null (Visual Basic 中沒有對等項目)。</exception>
      <exception cref="T:System.InvalidOperationException">未正確地初始化 awaiter。</exception>
    </member>
    <member name="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1">
      <summary>提供可等候的物件，用於等候保留文化的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <typeparam name="T">相關聯之 <see cref="T:System.Threading.Tasks.Task`1" /> 所產生的結果類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.#ctor(System.Threading.Tasks.Task{`0})">
      <summary>建構 <see cref="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1" /> 類別的新執行個體。</summary>
      <param name="task">要等候的工作。</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.GetAwaiter">
      <summary>取得 awaiter 來等候此 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <returns>awaiter 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.GetResult">
      <summary>結束等候已完成的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <returns>已完成之 <see cref="T:System.Threading.Tasks.Task`1" /> 的結果。</returns>
      <exception cref="T:System.NullReferenceException">未正確地初始化 awaiter。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">這項工作已取消。</exception>
      <exception cref="T:System.Exception">這項工作已完成但發生錯誤。</exception>
    </member>
    <member name="P:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.IsCompleted">
      <summary>無論此 <see cref="T:System.Threading.Tasks.Task" /> 完成與否，一律取得。</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.OnCompleted(System.Action)">
      <summary>這個方法未實作，請勿呼叫。</summary>
      <param name="continuation">當等候作業完成時所要叫用的動作。</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.UnsafeOnCompleted(System.Action)">
      <summary>排程接續到此 <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> 相關聯的 <see cref="T:System.Threading.Tasks.Task`1" /> 的時間。</summary>
      <param name="continuation">當等候作業完成時所要叫用的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 引數為 Null (Visual Basic 中沒有對等項目)。</exception>
      <exception cref="T:System.InvalidOperationException">未正確地初始化 awaiter。</exception>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationException">
      <summary>表示當驗證實體失敗時，從 <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> 擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor">
      <summary>使用預設值，初始化 <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String)">
      <summary>初始化具有指定錯誤訊息之 <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> 類別的新執行個體。</summary>
      <param name="message">例外狀況訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult})">
      <summary>使用指定的錯誤訊息和驗證結果，初始化 <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> 類別的新執行個體。</summary>
      <param name="message">例外狀況訊息。</param>
      <param name="entityValidationResults">驗證結果。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult},System.Exception)">
      <summary>使用指定的錯誤訊息、驗證結果和內部例外狀況，初始化 <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> 類別的新執行個體。</summary>
      <param name="message">例外狀況訊息。</param>
      <param name="entityValidationResults">驗證結果。</param>
      <param name="innerException">導致例外狀況的錯誤。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和內部例外狀況，初始化 <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> 類別的新執行個體。</summary>
      <param name="message">例外狀況訊息。</param>
      <param name="innerException">導致例外狀況的錯誤。</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationException.EntityValidationErrors">
      <summary>取得與實體相關聯的驗證錯誤。</summary>
      <returns>與實體相關聯的驗證錯誤。</returns>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationResult">
      <summary>表示單一實體的驗證結果。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
      <summary>建立 <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" /> 類別的執行個體。</summary>
      <param name="entry">套用結果的實體項目。絕對不會是 null。</param>
      <param name="validationErrors">
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> 執行個體的清單。絕對不會是 null。可以是空白，表示此實體有效。</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.Entry">
      <summary>取得套用結果的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.IsValid">
      <summary>取得指出實體是否有效的指標。</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.ValidationErrors">
      <summary>取得驗證錯誤。絕對不會是 null。</summary>
    </member>
    <member name="T:System.Data.Entity.Validation.DbUnexpectedValidationException">
      <summary>從驗證程式碼擲回例外狀況時，從 <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" /> 擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor">
      <summary>初始化 DbUnexpectedValidationException 的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化資訊和內容，初始化 DbUnexpectedValidationException 的新執行個體。</summary>
      <param name="info">序列化資訊。</param>
      <param name="context">資料流內容。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String)">
      <summary>初始化 DbUnexpectedValidationException 的新執行個體。</summary>
      <param name="message">例外狀況訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String,System.Exception)">
      <summary>初始化 DbUnexpectedValidationException 的新執行個體。</summary>
      <param name="message">例外狀況訊息。</param>
      <param name="innerException">內部例外狀況。</param>
    </member>
    <member name="T:System.Data.Entity.Validation.DbValidationError">
      <summary>驗證錯誤。可以是實體層級或屬性層級的驗證錯誤。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbValidationError.#ctor(System.String,System.String)">
      <summary>建立 <see cref="T:System.Data.Entity.Validation.DbValidationError" /> 的執行個體。</summary>
      <param name="propertyName">無效屬性的名稱。可以是 null。</param>
      <param name="errorMessage">驗證錯誤訊息。可以是 null。</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.ErrorMessage">
      <summary>取得驗證錯誤訊息。</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.PropertyName">
      <summary>取得無效屬性的名稱。</summary>
    </member>
  </members>
</doc>